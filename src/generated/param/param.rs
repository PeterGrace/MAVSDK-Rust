// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `param/param.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct GetIntParamRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetIntParamRequest {
    fn default() -> &'a GetIntParamRequest {
        <GetIntParamRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetIntParamRequest {
    pub fn new() -> GetIntParamRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetIntParamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetIntParamRequest {
        GetIntParamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetIntParamRequest| { &m.name },
                    |m: &mut GetIntParamRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetIntParamRequest>(
                    "GetIntParamRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetIntParamRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetIntParamRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetIntParamRequest,
        };
        unsafe {
            instance.get(GetIntParamRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetIntParamRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetIntParamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIntParamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetIntParamResponse {
    // message fields
    pub param_result: ::protobuf::SingularPtrField<ParamResult>,
    pub value: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetIntParamResponse {
    fn default() -> &'a GetIntParamResponse {
        <GetIntParamResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetIntParamResponse {
    pub fn new() -> GetIntParamResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.param.ParamResult param_result = 1;


    pub fn get_param_result(&self) -> &ParamResult {
        self.param_result.as_ref().unwrap_or_else(|| ParamResult::default_instance())
    }
    pub fn clear_param_result(&mut self) {
        self.param_result.clear();
    }

    pub fn has_param_result(&self) -> bool {
        self.param_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_param_result(&mut self, v: ParamResult) {
        self.param_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_param_result(&mut self) -> &mut ParamResult {
        if self.param_result.is_none() {
            self.param_result.set_default();
        }
        self.param_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_param_result(&mut self) -> ParamResult {
        self.param_result.take().unwrap_or_else(|| ParamResult::new())
    }

    // int32 value = 2;


    pub fn get_value(&self) -> i32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = v;
    }
}

impl ::protobuf::Message for GetIntParamResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.param_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.param_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.param_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.param_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.value != 0 {
            os.write_int32(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetIntParamResponse {
        GetIntParamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ParamResult>>(
                    "param_result",
                    |m: &GetIntParamResponse| { &m.param_result },
                    |m: &mut GetIntParamResponse| { &mut m.param_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "value",
                    |m: &GetIntParamResponse| { &m.value },
                    |m: &mut GetIntParamResponse| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetIntParamResponse>(
                    "GetIntParamResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetIntParamResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetIntParamResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetIntParamResponse,
        };
        unsafe {
            instance.get(GetIntParamResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetIntParamResponse {
    fn clear(&mut self) {
        self.param_result.clear();
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetIntParamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetIntParamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetIntParamRequest {
    // message fields
    pub name: ::std::string::String,
    pub value: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetIntParamRequest {
    fn default() -> &'a SetIntParamRequest {
        <SetIntParamRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetIntParamRequest {
    pub fn new() -> SetIntParamRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // int32 value = 2;


    pub fn get_value(&self) -> i32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: i32) {
        self.value = v;
    }
}

impl ::protobuf::Message for SetIntParamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0 {
            my_size += ::protobuf::rt::value_size(2, self.value, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0 {
            os.write_int32(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetIntParamRequest {
        SetIntParamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &SetIntParamRequest| { &m.name },
                    |m: &mut SetIntParamRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "value",
                    |m: &SetIntParamRequest| { &m.value },
                    |m: &mut SetIntParamRequest| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetIntParamRequest>(
                    "SetIntParamRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetIntParamRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetIntParamRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetIntParamRequest,
        };
        unsafe {
            instance.get(SetIntParamRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetIntParamRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetIntParamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetIntParamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetIntParamResponse {
    // message fields
    pub param_result: ::protobuf::SingularPtrField<ParamResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetIntParamResponse {
    fn default() -> &'a SetIntParamResponse {
        <SetIntParamResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetIntParamResponse {
    pub fn new() -> SetIntParamResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.param.ParamResult param_result = 1;


    pub fn get_param_result(&self) -> &ParamResult {
        self.param_result.as_ref().unwrap_or_else(|| ParamResult::default_instance())
    }
    pub fn clear_param_result(&mut self) {
        self.param_result.clear();
    }

    pub fn has_param_result(&self) -> bool {
        self.param_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_param_result(&mut self, v: ParamResult) {
        self.param_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_param_result(&mut self) -> &mut ParamResult {
        if self.param_result.is_none() {
            self.param_result.set_default();
        }
        self.param_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_param_result(&mut self) -> ParamResult {
        self.param_result.take().unwrap_or_else(|| ParamResult::new())
    }
}

impl ::protobuf::Message for SetIntParamResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.param_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.param_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.param_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.param_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetIntParamResponse {
        SetIntParamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ParamResult>>(
                    "param_result",
                    |m: &SetIntParamResponse| { &m.param_result },
                    |m: &mut SetIntParamResponse| { &mut m.param_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetIntParamResponse>(
                    "SetIntParamResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetIntParamResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetIntParamResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetIntParamResponse,
        };
        unsafe {
            instance.get(SetIntParamResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetIntParamResponse {
    fn clear(&mut self) {
        self.param_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetIntParamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetIntParamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetFloatParamRequest {
    // message fields
    pub name: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFloatParamRequest {
    fn default() -> &'a GetFloatParamRequest {
        <GetFloatParamRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetFloatParamRequest {
    pub fn new() -> GetFloatParamRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GetFloatParamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFloatParamRequest {
        GetFloatParamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &GetFloatParamRequest| { &m.name },
                    |m: &mut GetFloatParamRequest| { &mut m.name },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetFloatParamRequest>(
                    "GetFloatParamRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetFloatParamRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetFloatParamRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetFloatParamRequest,
        };
        unsafe {
            instance.get(GetFloatParamRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetFloatParamRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetFloatParamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFloatParamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetFloatParamResponse {
    // message fields
    pub param_result: ::protobuf::SingularPtrField<ParamResult>,
    pub value: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetFloatParamResponse {
    fn default() -> &'a GetFloatParamResponse {
        <GetFloatParamResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetFloatParamResponse {
    pub fn new() -> GetFloatParamResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.param.ParamResult param_result = 1;


    pub fn get_param_result(&self) -> &ParamResult {
        self.param_result.as_ref().unwrap_or_else(|| ParamResult::default_instance())
    }
    pub fn clear_param_result(&mut self) {
        self.param_result.clear();
    }

    pub fn has_param_result(&self) -> bool {
        self.param_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_param_result(&mut self, v: ParamResult) {
        self.param_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_param_result(&mut self) -> &mut ParamResult {
        if self.param_result.is_none() {
            self.param_result.set_default();
        }
        self.param_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_param_result(&mut self) -> ParamResult {
        self.param_result.take().unwrap_or_else(|| ParamResult::new())
    }

    // float value = 2;


    pub fn get_value(&self) -> f32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f32) {
        self.value = v;
    }
}

impl ::protobuf::Message for GetFloatParamResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.param_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.param_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.param_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.value != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.param_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.value != 0. {
            os.write_float(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetFloatParamResponse {
        GetFloatParamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ParamResult>>(
                    "param_result",
                    |m: &GetFloatParamResponse| { &m.param_result },
                    |m: &mut GetFloatParamResponse| { &mut m.param_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "value",
                    |m: &GetFloatParamResponse| { &m.value },
                    |m: &mut GetFloatParamResponse| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetFloatParamResponse>(
                    "GetFloatParamResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetFloatParamResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetFloatParamResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetFloatParamResponse,
        };
        unsafe {
            instance.get(GetFloatParamResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetFloatParamResponse {
    fn clear(&mut self) {
        self.param_result.clear();
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetFloatParamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetFloatParamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetFloatParamRequest {
    // message fields
    pub name: ::std::string::String,
    pub value: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetFloatParamRequest {
    fn default() -> &'a SetFloatParamRequest {
        <SetFloatParamRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetFloatParamRequest {
    pub fn new() -> SetFloatParamRequest {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // float value = 2;


    pub fn get_value(&self) -> f32 {
        self.value
    }
    pub fn clear_value(&mut self) {
        self.value = 0.;
    }

    // Param is passed by value, moved
    pub fn set_value(&mut self, v: f32) {
        self.value = v;
    }
}

impl ::protobuf::Message for SetFloatParamRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.value = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if self.value != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if self.value != 0. {
            os.write_float(2, self.value)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetFloatParamRequest {
        SetFloatParamRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &SetFloatParamRequest| { &m.name },
                    |m: &mut SetFloatParamRequest| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "value",
                    |m: &SetFloatParamRequest| { &m.value },
                    |m: &mut SetFloatParamRequest| { &mut m.value },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetFloatParamRequest>(
                    "SetFloatParamRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetFloatParamRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetFloatParamRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetFloatParamRequest,
        };
        unsafe {
            instance.get(SetFloatParamRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetFloatParamRequest {
    fn clear(&mut self) {
        self.name.clear();
        self.value = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetFloatParamRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetFloatParamRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetFloatParamResponse {
    // message fields
    pub param_result: ::protobuf::SingularPtrField<ParamResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetFloatParamResponse {
    fn default() -> &'a SetFloatParamResponse {
        <SetFloatParamResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetFloatParamResponse {
    pub fn new() -> SetFloatParamResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.param.ParamResult param_result = 1;


    pub fn get_param_result(&self) -> &ParamResult {
        self.param_result.as_ref().unwrap_or_else(|| ParamResult::default_instance())
    }
    pub fn clear_param_result(&mut self) {
        self.param_result.clear();
    }

    pub fn has_param_result(&self) -> bool {
        self.param_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_param_result(&mut self, v: ParamResult) {
        self.param_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_param_result(&mut self) -> &mut ParamResult {
        if self.param_result.is_none() {
            self.param_result.set_default();
        }
        self.param_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_param_result(&mut self) -> ParamResult {
        self.param_result.take().unwrap_or_else(|| ParamResult::new())
    }
}

impl ::protobuf::Message for SetFloatParamResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.param_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.param_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.param_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.param_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetFloatParamResponse {
        SetFloatParamResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ParamResult>>(
                    "param_result",
                    |m: &SetFloatParamResponse| { &m.param_result },
                    |m: &mut SetFloatParamResponse| { &mut m.param_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetFloatParamResponse>(
                    "SetFloatParamResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetFloatParamResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetFloatParamResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetFloatParamResponse,
        };
        unsafe {
            instance.get(SetFloatParamResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetFloatParamResponse {
    fn clear(&mut self) {
        self.param_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetFloatParamResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetFloatParamResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ParamResult {
    // message fields
    pub result: ParamResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ParamResult {
    fn default() -> &'a ParamResult {
        <ParamResult as ::protobuf::Message>::default_instance()
    }
}

impl ParamResult {
    pub fn new() -> ParamResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.param.ParamResult.Result result = 1;


    pub fn get_result(&self) -> ParamResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ParamResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ParamResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ParamResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ParamResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ParamResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ParamResult {
        ParamResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ParamResult_Result>>(
                    "result",
                    |m: &ParamResult| { &m.result },
                    |m: &mut ParamResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &ParamResult| { &m.result_str },
                    |m: &mut ParamResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ParamResult>(
                    "ParamResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ParamResult {
        static mut instance: ::protobuf::lazy::Lazy<ParamResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ParamResult,
        };
        unsafe {
            instance.get(ParamResult::new)
        }
    }
}

impl ::protobuf::Clear for ParamResult {
    fn clear(&mut self) {
        self.result = ParamResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ParamResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ParamResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ParamResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    TIMEOUT = 2,
    CONNECTION_ERROR = 3,
    WRONG_TYPE = 4,
    PARAM_NAME_TOO_LONG = 5,
}

impl ::protobuf::ProtobufEnum for ParamResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ParamResult_Result> {
        match value {
            0 => ::std::option::Option::Some(ParamResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(ParamResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(ParamResult_Result::TIMEOUT),
            3 => ::std::option::Option::Some(ParamResult_Result::CONNECTION_ERROR),
            4 => ::std::option::Option::Some(ParamResult_Result::WRONG_TYPE),
            5 => ::std::option::Option::Some(ParamResult_Result::PARAM_NAME_TOO_LONG),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ParamResult_Result] = &[
            ParamResult_Result::UNKNOWN,
            ParamResult_Result::SUCCESS,
            ParamResult_Result::TIMEOUT,
            ParamResult_Result::CONNECTION_ERROR,
            ParamResult_Result::WRONG_TYPE,
            ParamResult_Result::PARAM_NAME_TOO_LONG,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ParamResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ParamResult_Result {
}

impl ::std::default::Default for ParamResult_Result {
    fn default() -> Self {
        ParamResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ParamResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11param/param.proto\x12\x10mavsdk.rpc.param\"(\n\x12GetIntParamReque\
    st\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"m\n\x13GetIntParamResp\
    onse\x12@\n\x0cparam_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.rpc.param.P\
    aramResultR\x0bparamResult\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05v\
    alue\">\n\x12SetIntParamRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\
    \x04name\x12\x14\n\x05value\x18\x02\x20\x01(\x05R\x05value\"W\n\x13SetIn\
    tParamResponse\x12@\n\x0cparam_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.r\
    pc.param.ParamResultR\x0bparamResult\"*\n\x14GetFloatParamRequest\x12\
    \x12\n\x04name\x18\x01\x20\x01(\tR\x04name\"o\n\x15GetFloatParamResponse\
    \x12@\n\x0cparam_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.rpc.param.Param\
    ResultR\x0bparamResult\x12\x14\n\x05value\x18\x02\x20\x01(\x02R\x05value\
    \"@\n\x14SetFloatParamRequest\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04n\
    ame\x12\x14\n\x05value\x18\x02\x20\x01(\x02R\x05value\"Y\n\x15SetFloatPa\
    ramResponse\x12@\n\x0cparam_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.rpc.\
    param.ParamResultR\x0bparamResult\"\xda\x01\n\x0bParamResult\x12<\n\x06r\
    esult\x18\x01\x20\x01(\x0e2$.mavsdk.rpc.param.ParamResult.ResultR\x06res\
    ult\x12\x1d\n\nresult_str\x18\x02\x20\x01(\tR\tresultStr\"n\n\x06Result\
    \x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SUCCESS\x10\x01\x12\x0b\n\x07TI\
    MEOUT\x10\x02\x12\x14\n\x10CONNECTION_ERROR\x10\x03\x12\x0e\n\nWRONG_TYP\
    E\x10\x04\x12\x17\n\x13PARAM_NAME_TOO_LONG\x10\x052\x92\x03\n\x0cParamSe\
    rvice\x12\\\n\x0bGetIntParam\x12$.mavsdk.rpc.param.GetIntParamRequest\
    \x1a%.mavsdk.rpc.param.GetIntParamResponse\"\0\x12\\\n\x0bSetIntParam\
    \x12$.mavsdk.rpc.param.SetIntParamRequest\x1a%.mavsdk.rpc.param.SetIntPa\
    ramResponse\"\0\x12b\n\rGetFloatParam\x12&.mavsdk.rpc.param.GetFloatPara\
    mRequest\x1a'.mavsdk.rpc.param.GetFloatParamResponse\"\0\x12b\n\rSetFloa\
    tParam\x12&.mavsdk.rpc.param.SetFloatParamRequest\x1a'.mavsdk.rpc.param.\
    SetFloatParamResponse\"\0B\x1d\n\x0fio.mavsdk.paramB\nParamProtoJ\xab\
    \x16\n\x06\x12\x04\0\0R\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\
    \x02\x12\x03\x02\x08\x18\n\x08\n\x01\x08\x12\x03\x04\0(\n\x0b\n\x04\x08\
    \xe7\x07\0\x12\x03\x04\0(\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x04\x07\
    \x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\x07\x08\
    \xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\x07\
    \x12\x03\x04\x16'\n\x08\n\x01\x08\x12\x03\x05\0+\n\x0b\n\x04\x08\xe7\x07\
    \x01\x12\x03\x05\0+\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\x07\x1b\
    \n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\x08\xe7\
    \x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x01\x07\
    \x12\x03\x05\x1e*\n;\n\x02\x06\0\x12\x04\x08\0!\x01\x1a/\x20Provide\x20r\
    aw\x20access\x20to\x20get\x20and\x20set\x20parameters.\n\n\n\n\x03\x06\0\
    \x01\x12\x03\x08\x08\x14\n^\n\x04\x06\0\x02\0\x12\x03\x0e\x04G\x1aQ\n\
    \x20Get\x20an\x20int\x20parameter.\n\n\x20If\x20the\x20type\x20is\x20wro\
    ng,\x20the\x20result\x20will\x20be\x20`WRONG_TYPE`.\n\n\x0c\n\x05\x06\0\
    \x02\0\x01\x12\x03\x0e\x08\x13\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\
    \x14&\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0e0C\n^\n\x04\x06\0\x02\x01\
    \x12\x03\x14\x04G\x1aQ\n\x20Set\x20an\x20int\x20parameter.\n\n\x20If\x20\
    the\x20type\x20is\x20wrong,\x20the\x20result\x20will\x20be\x20`WRONG_TYP\
    E`.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x14\x08\x13\n\x0c\n\x05\x06\
    \0\x02\x01\x02\x12\x03\x14\x14&\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x140C\n_\n\x04\x06\0\x02\x02\x12\x03\x1a\x04M\x1aR\n\x20Get\x20a\x20flo\
    at\x20parameter.\n\n\x20If\x20the\x20type\x20is\x20wrong,\x20the\x20resu\
    lt\x20will\x20be\x20`WRONG_TYPE`.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x1a\x08\x15\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x1a\x16*\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x1a4I\n_\n\x04\x06\0\x02\x03\x12\x03\x20\
    \x04M\x1aR\n\x20Set\x20a\x20float\x20parameter.\n\n\x20If\x20the\x20type\
    \x20is\x20wrong,\x20the\x20result\x20will\x20be\x20`WRONG_TYPE`.\n\n\x0c\
    \n\x05\x06\0\x02\x03\x01\x12\x03\x20\x08\x15\n\x0c\n\x05\x06\0\x02\x03\
    \x02\x12\x03\x20\x16*\n\x0c\n\x05\x06\0\x02\x03\x03\x12\x03\x204I\n\n\n\
    \x02\x04\0\x12\x04#\0%\x01\n\n\n\x03\x04\0\x01\x12\x03#\x08\x1a\n$\n\x04\
    \x04\0\x02\0\x12\x03$\x04\x14\"\x17\x20Name\x20of\x20the\x20parameter\n\
    \n\r\n\x05\x04\0\x02\0\x04\x12\x04$\x04#\x1c\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03$\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03$\x0b\x0f\n\x0c\n\x05\
    \x04\0\x02\0\x03\x12\x03$\x12\x13\n\n\n\x02\x04\x01\x12\x04'\0*\x01\n\n\
    \n\x03\x04\x01\x01\x12\x03'\x08\x1b\n\x0b\n\x04\x04\x01\x02\0\x12\x03(\
    \x04!\n\r\n\x05\x04\x01\x02\0\x04\x12\x04(\x04'\x1d\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03(\x04\x0f\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03(\x10\
    \x1c\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03(\x1f\x20\n/\n\x04\x04\x01\x02\
    \x01\x12\x03)\x04\x14\"\"\x20Value\x20of\x20the\x20requested\x20paramete\
    r\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04)\x04(!\n\x0c\n\x05\x04\x01\x02\
    \x01\x05\x12\x03)\x04\t\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03)\n\x0f\n\
    \x0c\n\x05\x04\x01\x02\x01\x03\x12\x03)\x12\x13\n\n\n\x02\x04\x02\x12\
    \x04,\0/\x01\n\n\n\x03\x04\x02\x01\x12\x03,\x08\x1a\n+\n\x04\x04\x02\x02\
    \0\x12\x03-\x04\x14\"\x1e\x20Name\x20of\x20the\x20parameter\x20to\x20set\
    \n\n\r\n\x05\x04\x02\x02\0\x04\x12\x04-\x04,\x1c\n\x0c\n\x05\x04\x02\x02\
    \0\x05\x12\x03-\x04\n\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03-\x0b\x0f\n\
    \x0c\n\x05\x04\x02\x02\0\x03\x12\x03-\x12\x13\n3\n\x04\x04\x02\x02\x01\
    \x12\x03.\x04\x14\"&\x20Value\x20the\x20parameter\x20should\x20be\x20set\
    \x20to\n\n\r\n\x05\x04\x02\x02\x01\x04\x12\x04.\x04-\x14\n\x0c\n\x05\x04\
    \x02\x02\x01\x05\x12\x03.\x04\t\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03.\
    \n\x0f\n\x0c\n\x05\x04\x02\x02\x01\x03\x12\x03.\x12\x13\n\n\n\x02\x04\
    \x03\x12\x040\02\x01\n\n\n\x03\x04\x03\x01\x12\x030\x08\x1b\n\x0b\n\x04\
    \x04\x03\x02\0\x12\x031\x04!\n\r\n\x05\x04\x03\x02\0\x04\x12\x041\x040\
    \x1d\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x031\x04\x0f\n\x0c\n\x05\x04\x03\
    \x02\0\x01\x12\x031\x10\x1c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x031\x1f\
    \x20\n\n\n\x02\x04\x04\x12\x044\06\x01\n\n\n\x03\x04\x04\x01\x12\x034\
    \x08\x1c\n$\n\x04\x04\x04\x02\0\x12\x035\x04\x14\"\x17\x20Name\x20of\x20\
    the\x20parameter\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x045\x044\x1e\n\x0c\n\
    \x05\x04\x04\x02\0\x05\x12\x035\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\
    \x035\x0b\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x035\x12\x13\n\n\n\x02\
    \x04\x05\x12\x047\0:\x01\n\n\n\x03\x04\x05\x01\x12\x037\x08\x1d\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x038\x04!\n\r\n\x05\x04\x05\x02\0\x04\x12\x048\
    \x047\x1f\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x038\x04\x0f\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x038\x10\x1c\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x038\
    \x1f\x20\n/\n\x04\x04\x05\x02\x01\x12\x039\x04\x14\"\"\x20Value\x20of\
    \x20the\x20requested\x20parameter\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\
    \x049\x048!\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x039\x04\t\n\x0c\n\x05\
    \x04\x05\x02\x01\x01\x12\x039\n\x0f\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\
    \x039\x12\x13\n\n\n\x02\x04\x06\x12\x04<\0?\x01\n\n\n\x03\x04\x06\x01\
    \x12\x03<\x08\x1c\n+\n\x04\x04\x06\x02\0\x12\x03=\x04\x14\"\x1e\x20Name\
    \x20of\x20the\x20parameter\x20to\x20set\n\n\r\n\x05\x04\x06\x02\0\x04\
    \x12\x04=\x04<\x1e\n\x0c\n\x05\x04\x06\x02\0\x05\x12\x03=\x04\n\n\x0c\n\
    \x05\x04\x06\x02\0\x01\x12\x03=\x0b\x0f\n\x0c\n\x05\x04\x06\x02\0\x03\
    \x12\x03=\x12\x13\n3\n\x04\x04\x06\x02\x01\x12\x03>\x04\x14\"&\x20Value\
    \x20the\x20parameter\x20should\x20be\x20set\x20to\n\n\r\n\x05\x04\x06\
    \x02\x01\x04\x12\x04>\x04=\x14\n\x0c\n\x05\x04\x06\x02\x01\x05\x12\x03>\
    \x04\t\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03>\n\x0f\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03>\x12\x13\n\n\n\x02\x04\x07\x12\x04@\0B\x01\n\n\
    \n\x03\x04\x07\x01\x12\x03@\x08\x1d\n\x0b\n\x04\x04\x07\x02\0\x12\x03A\
    \x04!\n\r\n\x05\x04\x07\x02\0\x04\x12\x04A\x04@\x1f\n\x0c\n\x05\x04\x07\
    \x02\0\x06\x12\x03A\x04\x0f\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x03A\x10\
    \x1c\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03A\x1f\x20\n\x1a\n\x02\x04\x08\
    \x12\x04E\0R\x01\x1a\x0e\x20Result\x20type.\n\n\n\n\x03\x04\x08\x01\x12\
    \x03E\x08\x13\n=\n\x04\x04\x08\x04\0\x12\x04G\x04N\x05\x1a/\x20Possible\
    \x20results\x20returned\x20for\x20param\x20requests.\n\n\x0c\n\x05\x04\
    \x08\x04\0\x01\x12\x03G\t\x0f\n\x1e\n\x06\x04\x08\x04\0\x02\0\x12\x03H\
    \x08\x14\"\x0f\x20Unknown\x20error\n\n\x0e\n\x07\x04\x08\x04\0\x02\0\x01\
    \x12\x03H\x08\x0f\n\x0e\n\x07\x04\x08\x04\0\x02\0\x02\x12\x03H\x12\x13\n\
    \"\n\x06\x04\x08\x04\0\x02\x01\x12\x03I\x08\x14\"\x13\x20Request\x20succ\
    eeded\n\n\x0e\n\x07\x04\x08\x04\0\x02\x01\x01\x12\x03I\x08\x0f\n\x0e\n\
    \x07\x04\x08\x04\0\x02\x01\x02\x12\x03I\x12\x13\n\"\n\x06\x04\x08\x04\0\
    \x02\x02\x12\x03J\x08\x14\"\x13\x20Request\x20timed\x20out\n\n\x0e\n\x07\
    \x04\x08\x04\0\x02\x02\x01\x12\x03J\x08\x0f\n\x0e\n\x07\x04\x08\x04\0\
    \x02\x02\x02\x12\x03J\x12\x13\n!\n\x06\x04\x08\x04\0\x02\x03\x12\x03K\
    \x08\x1d\"\x12\x20Connection\x20error\n\n\x0e\n\x07\x04\x08\x04\0\x02\
    \x03\x01\x12\x03K\x08\x18\n\x0e\n\x07\x04\x08\x04\0\x02\x03\x02\x12\x03K\
    \x1b\x1c\n\x1b\n\x06\x04\x08\x04\0\x02\x04\x12\x03L\x08\x17\"\x0c\x20Wro\
    ng\x20type\n\n\x0e\n\x07\x04\x08\x04\0\x02\x04\x01\x12\x03L\x08\x12\n\
    \x0e\n\x07\x04\x08\x04\0\x02\x04\x02\x12\x03L\x15\x16\n/\n\x06\x04\x08\
    \x04\0\x02\x05\x12\x03M\x08\x20\"\x20\x20Parameter\x20name\x20too\x20lon\
    g\x20(>\x2016)\n\n\x0e\n\x07\x04\x08\x04\0\x02\x05\x01\x12\x03M\x08\x1b\
    \n\x0e\n\x07\x04\x08\x04\0\x02\x05\x02\x12\x03M\x1e\x1f\n\x20\n\x04\x04\
    \x08\x02\0\x12\x03P\x04\x16\"\x13\x20Result\x20enum\x20value\n\n\r\n\x05\
    \x04\x08\x02\0\x04\x12\x04P\x04N\x05\n\x0c\n\x05\x04\x08\x02\0\x06\x12\
    \x03P\x04\n\n\x0c\n\x05\x04\x08\x02\0\x01\x12\x03P\x0b\x11\n\x0c\n\x05\
    \x04\x08\x02\0\x03\x12\x03P\x14\x15\nB\n\x04\x04\x08\x02\x01\x12\x03Q\
    \x04\x1a\"5\x20Human-readable\x20English\x20string\x20describing\x20the\
    \x20result\n\n\r\n\x05\x04\x08\x02\x01\x04\x12\x04Q\x04P\x16\n\x0c\n\x05\
    \x04\x08\x02\x01\x05\x12\x03Q\x04\n\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\
    \x03Q\x0b\x15\n\x0c\n\x05\x04\x08\x02\x01\x03\x12\x03Q\x18\x19b\x06proto\
    3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
