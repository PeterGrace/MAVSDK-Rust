// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `proto/protos/info/info.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Version {
    // message fields
    pub flight_sw_major: i32,
    pub flight_sw_minor: i32,
    pub flight_sw_patch: i32,
    pub flight_sw_vendor_major: i32,
    pub flight_sw_vendor_minor: i32,
    pub flight_sw_vendor_patch: i32,
    pub os_sw_major: i32,
    pub os_sw_minor: i32,
    pub os_sw_patch: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Version {
    fn default() -> &'a Version {
        <Version as ::protobuf::Message>::default_instance()
    }
}

impl Version {
    pub fn new() -> Version {
        ::std::default::Default::default()
    }

    // int32 flight_sw_major = 1;


    pub fn get_flight_sw_major(&self) -> i32 {
        self.flight_sw_major
    }
    pub fn clear_flight_sw_major(&mut self) {
        self.flight_sw_major = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_major(&mut self, v: i32) {
        self.flight_sw_major = v;
    }

    // int32 flight_sw_minor = 2;


    pub fn get_flight_sw_minor(&self) -> i32 {
        self.flight_sw_minor
    }
    pub fn clear_flight_sw_minor(&mut self) {
        self.flight_sw_minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_minor(&mut self, v: i32) {
        self.flight_sw_minor = v;
    }

    // int32 flight_sw_patch = 3;


    pub fn get_flight_sw_patch(&self) -> i32 {
        self.flight_sw_patch
    }
    pub fn clear_flight_sw_patch(&mut self) {
        self.flight_sw_patch = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_patch(&mut self, v: i32) {
        self.flight_sw_patch = v;
    }

    // int32 flight_sw_vendor_major = 4;


    pub fn get_flight_sw_vendor_major(&self) -> i32 {
        self.flight_sw_vendor_major
    }
    pub fn clear_flight_sw_vendor_major(&mut self) {
        self.flight_sw_vendor_major = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_vendor_major(&mut self, v: i32) {
        self.flight_sw_vendor_major = v;
    }

    // int32 flight_sw_vendor_minor = 5;


    pub fn get_flight_sw_vendor_minor(&self) -> i32 {
        self.flight_sw_vendor_minor
    }
    pub fn clear_flight_sw_vendor_minor(&mut self) {
        self.flight_sw_vendor_minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_vendor_minor(&mut self, v: i32) {
        self.flight_sw_vendor_minor = v;
    }

    // int32 flight_sw_vendor_patch = 6;


    pub fn get_flight_sw_vendor_patch(&self) -> i32 {
        self.flight_sw_vendor_patch
    }
    pub fn clear_flight_sw_vendor_patch(&mut self) {
        self.flight_sw_vendor_patch = 0;
    }

    // Param is passed by value, moved
    pub fn set_flight_sw_vendor_patch(&mut self, v: i32) {
        self.flight_sw_vendor_patch = v;
    }

    // int32 os_sw_major = 7;


    pub fn get_os_sw_major(&self) -> i32 {
        self.os_sw_major
    }
    pub fn clear_os_sw_major(&mut self) {
        self.os_sw_major = 0;
    }

    // Param is passed by value, moved
    pub fn set_os_sw_major(&mut self, v: i32) {
        self.os_sw_major = v;
    }

    // int32 os_sw_minor = 8;


    pub fn get_os_sw_minor(&self) -> i32 {
        self.os_sw_minor
    }
    pub fn clear_os_sw_minor(&mut self) {
        self.os_sw_minor = 0;
    }

    // Param is passed by value, moved
    pub fn set_os_sw_minor(&mut self, v: i32) {
        self.os_sw_minor = v;
    }

    // int32 os_sw_patch = 9;


    pub fn get_os_sw_patch(&self) -> i32 {
        self.os_sw_patch
    }
    pub fn clear_os_sw_patch(&mut self) {
        self.os_sw_patch = 0;
    }

    // Param is passed by value, moved
    pub fn set_os_sw_patch(&mut self, v: i32) {
        self.os_sw_patch = v;
    }
}

impl ::protobuf::Message for Version {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_major = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_minor = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_patch = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_vendor_major = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_vendor_minor = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.flight_sw_vendor_patch = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_sw_major = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_sw_minor = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.os_sw_patch = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.flight_sw_major != 0 {
            my_size += ::protobuf::rt::value_size(1, self.flight_sw_major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flight_sw_minor != 0 {
            my_size += ::protobuf::rt::value_size(2, self.flight_sw_minor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flight_sw_patch != 0 {
            my_size += ::protobuf::rt::value_size(3, self.flight_sw_patch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flight_sw_vendor_major != 0 {
            my_size += ::protobuf::rt::value_size(4, self.flight_sw_vendor_major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flight_sw_vendor_minor != 0 {
            my_size += ::protobuf::rt::value_size(5, self.flight_sw_vendor_minor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.flight_sw_vendor_patch != 0 {
            my_size += ::protobuf::rt::value_size(6, self.flight_sw_vendor_patch, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_sw_major != 0 {
            my_size += ::protobuf::rt::value_size(7, self.os_sw_major, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_sw_minor != 0 {
            my_size += ::protobuf::rt::value_size(8, self.os_sw_minor, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.os_sw_patch != 0 {
            my_size += ::protobuf::rt::value_size(9, self.os_sw_patch, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.flight_sw_major != 0 {
            os.write_int32(1, self.flight_sw_major)?;
        }
        if self.flight_sw_minor != 0 {
            os.write_int32(2, self.flight_sw_minor)?;
        }
        if self.flight_sw_patch != 0 {
            os.write_int32(3, self.flight_sw_patch)?;
        }
        if self.flight_sw_vendor_major != 0 {
            os.write_int32(4, self.flight_sw_vendor_major)?;
        }
        if self.flight_sw_vendor_minor != 0 {
            os.write_int32(5, self.flight_sw_vendor_minor)?;
        }
        if self.flight_sw_vendor_patch != 0 {
            os.write_int32(6, self.flight_sw_vendor_patch)?;
        }
        if self.os_sw_major != 0 {
            os.write_int32(7, self.os_sw_major)?;
        }
        if self.os_sw_minor != 0 {
            os.write_int32(8, self.os_sw_minor)?;
        }
        if self.os_sw_patch != 0 {
            os.write_int32(9, self.os_sw_patch)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Version {
        Version::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_major",
                    |m: &Version| { &m.flight_sw_major },
                    |m: &mut Version| { &mut m.flight_sw_major },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_minor",
                    |m: &Version| { &m.flight_sw_minor },
                    |m: &mut Version| { &mut m.flight_sw_minor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_patch",
                    |m: &Version| { &m.flight_sw_patch },
                    |m: &mut Version| { &mut m.flight_sw_patch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_vendor_major",
                    |m: &Version| { &m.flight_sw_vendor_major },
                    |m: &mut Version| { &mut m.flight_sw_vendor_major },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_vendor_minor",
                    |m: &Version| { &m.flight_sw_vendor_minor },
                    |m: &mut Version| { &mut m.flight_sw_vendor_minor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "flight_sw_vendor_patch",
                    |m: &Version| { &m.flight_sw_vendor_patch },
                    |m: &mut Version| { &mut m.flight_sw_vendor_patch },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "os_sw_major",
                    |m: &Version| { &m.os_sw_major },
                    |m: &mut Version| { &mut m.os_sw_major },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "os_sw_minor",
                    |m: &Version| { &m.os_sw_minor },
                    |m: &mut Version| { &mut m.os_sw_minor },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "os_sw_patch",
                    |m: &Version| { &m.os_sw_patch },
                    |m: &mut Version| { &mut m.os_sw_patch },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Version>(
                    "Version",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Version {
        static mut instance: ::protobuf::lazy::Lazy<Version> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Version,
        };
        unsafe {
            instance.get(Version::new)
        }
    }
}

impl ::protobuf::Clear for Version {
    fn clear(&mut self) {
        self.flight_sw_major = 0;
        self.flight_sw_minor = 0;
        self.flight_sw_patch = 0;
        self.flight_sw_vendor_major = 0;
        self.flight_sw_vendor_minor = 0;
        self.flight_sw_vendor_patch = 0;
        self.os_sw_major = 0;
        self.os_sw_minor = 0;
        self.os_sw_patch = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Version {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Version {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVersionRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVersionRequest {
    fn default() -> &'a GetVersionRequest {
        <GetVersionRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetVersionRequest {
    pub fn new() -> GetVersionRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetVersionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVersionRequest {
        GetVersionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetVersionRequest>(
                    "GetVersionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVersionRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetVersionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVersionRequest,
        };
        unsafe {
            instance.get(GetVersionRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetVersionRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVersionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVersionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetVersionResponse {
    // message fields
    pub info_result: ::protobuf::SingularPtrField<InfoResult>,
    pub version: ::protobuf::SingularPtrField<Version>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetVersionResponse {
    fn default() -> &'a GetVersionResponse {
        <GetVersionResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetVersionResponse {
    pub fn new() -> GetVersionResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.info.InfoResult info_result = 1;


    pub fn get_info_result(&self) -> &InfoResult {
        self.info_result.as_ref().unwrap_or_else(|| InfoResult::default_instance())
    }
    pub fn clear_info_result(&mut self) {
        self.info_result.clear();
    }

    pub fn has_info_result(&self) -> bool {
        self.info_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_info_result(&mut self, v: InfoResult) {
        self.info_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_info_result(&mut self) -> &mut InfoResult {
        if self.info_result.is_none() {
            self.info_result.set_default();
        }
        self.info_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_info_result(&mut self) -> InfoResult {
        self.info_result.take().unwrap_or_else(|| InfoResult::new())
    }

    // .mavsdk.rpc.info.Version version = 2;


    pub fn get_version(&self) -> &Version {
        self.version.as_ref().unwrap_or_else(|| Version::default_instance())
    }
    pub fn clear_version(&mut self) {
        self.version.clear();
    }

    pub fn has_version(&self) -> bool {
        self.version.is_some()
    }

    // Param is passed by value, moved
    pub fn set_version(&mut self, v: Version) {
        self.version = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_version(&mut self) -> &mut Version {
        if self.version.is_none() {
            self.version.set_default();
        }
        self.version.as_mut().unwrap()
    }

    // Take field
    pub fn take_version(&mut self) -> Version {
        self.version.take().unwrap_or_else(|| Version::new())
    }
}

impl ::protobuf::Message for GetVersionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.info_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.version {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.info_result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.version)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.info_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.version.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.info_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.version.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetVersionResponse {
        GetVersionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<InfoResult>>(
                    "info_result",
                    |m: &GetVersionResponse| { &m.info_result },
                    |m: &mut GetVersionResponse| { &mut m.info_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Version>>(
                    "version",
                    |m: &GetVersionResponse| { &m.version },
                    |m: &mut GetVersionResponse| { &mut m.version },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetVersionResponse>(
                    "GetVersionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetVersionResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetVersionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetVersionResponse,
        };
        unsafe {
            instance.get(GetVersionResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetVersionResponse {
    fn clear(&mut self) {
        self.info_result.clear();
        self.version.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetVersionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetVersionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct InfoResult {
    // message fields
    pub result: InfoResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a InfoResult {
    fn default() -> &'a InfoResult {
        <InfoResult as ::protobuf::Message>::default_instance()
    }
}

impl InfoResult {
    pub fn new() -> InfoResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.info.InfoResult.Result result = 1;


    pub fn get_result(&self) -> InfoResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = InfoResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: InfoResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for InfoResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != InfoResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != InfoResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> InfoResult {
        InfoResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<InfoResult_Result>>(
                    "result",
                    |m: &InfoResult| { &m.result },
                    |m: &mut InfoResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &InfoResult| { &m.result_str },
                    |m: &mut InfoResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<InfoResult>(
                    "InfoResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static InfoResult {
        static mut instance: ::protobuf::lazy::Lazy<InfoResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const InfoResult,
        };
        unsafe {
            instance.get(InfoResult::new)
        }
    }
}

impl ::protobuf::Clear for InfoResult {
    fn clear(&mut self) {
        self.result = InfoResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for InfoResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for InfoResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum InfoResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    INFORMATION_NOT_RECEIVED_YET = 2,
}

impl ::protobuf::ProtobufEnum for InfoResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<InfoResult_Result> {
        match value {
            0 => ::std::option::Option::Some(InfoResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(InfoResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(InfoResult_Result::INFORMATION_NOT_RECEIVED_YET),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [InfoResult_Result] = &[
            InfoResult_Result::UNKNOWN,
            InfoResult_Result::SUCCESS,
            InfoResult_Result::INFORMATION_NOT_RECEIVED_YET,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("InfoResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for InfoResult_Result {
}

impl ::std::default::Default for InfoResult_Result {
    fn default() -> Self {
        InfoResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for InfoResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1cproto/protos/info/info.proto\x12\x0fmavsdk.rpc.info\"\x80\x03\n\
    \x07Version\x12&\n\x0fflight_sw_major\x18\x01\x20\x01(\x05R\rflightSwMaj\
    or\x12&\n\x0fflight_sw_minor\x18\x02\x20\x01(\x05R\rflightSwMinor\x12&\n\
    \x0fflight_sw_patch\x18\x03\x20\x01(\x05R\rflightSwPatch\x123\n\x16fligh\
    t_sw_vendor_major\x18\x04\x20\x01(\x05R\x13flightSwVendorMajor\x123\n\
    \x16flight_sw_vendor_minor\x18\x05\x20\x01(\x05R\x13flightSwVendorMinor\
    \x123\n\x16flight_sw_vendor_patch\x18\x06\x20\x01(\x05R\x13flightSwVendo\
    rPatch\x12\x1e\n\x0bos_sw_major\x18\x07\x20\x01(\x05R\tosSwMajor\x12\x1e\
    \n\x0bos_sw_minor\x18\x08\x20\x01(\x05R\tosSwMinor\x12\x1e\n\x0bos_sw_pa\
    tch\x18\t\x20\x01(\x05R\tosSwPatch\"\x13\n\x11GetVersionRequest\"\x86\
    \x01\n\x12GetVersionResponse\x12<\n\x0binfo_result\x18\x01\x20\x01(\x0b2\
    \x1b.mavsdk.rpc.info.InfoResultR\ninfoResult\x122\n\x07version\x18\x02\
    \x20\x01(\x0b2\x18.mavsdk.rpc.info.VersionR\x07version\"\xad\x01\n\nInfo\
    Result\x12:\n\x06result\x18\x01\x20\x01(\x0e2\".mavsdk.rpc.info.InfoResu\
    lt.ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\x20\x01(\tR\tresultSt\
    r\"D\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SUCCESS\x10\x01\
    \x12\x20\n\x1cINFORMATION_NOT_RECEIVED_YET\x10\x022f\n\x0bInfoService\
    \x12W\n\nGetVersion\x12\".mavsdk.rpc.info.GetVersionRequest\x1a#.mavsdk.\
    rpc.info.GetVersionResponse\"\0B\x1b\n\x0eio.mavsdk.infoB\tInfoProtoJ\
    \x90\x11\n\x06\x12\x04\0\0+\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\
    \x01\x02\x12\x03\x02\x08\x17\n\x08\n\x01\x08\x12\x03\x04\0'\n\x0b\n\x04\
    \x08\xe7\x07\0\x12\x03\x04\0'\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x04\
    \x07\x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\x07\
    \x08\xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\
    \x07\x12\x03\x04\x16&\n\x08\n\x01\x08\x12\x03\x05\0*\n\x0b\n\x04\x08\xe7\
    \x07\x01\x12\x03\x05\0*\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\x07\
    \x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\x08\
    \xe7\x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x01\
    \x07\x12\x03\x05\x1e)\nP\n\x02\x06\0\x12\x04\x08\0\x0b\x01\x1aD\x20Provi\
    de\x20infomation\x20about\x20the\x20hardware\x20and/or\x20software\x20of\
    \x20a\x20system.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x13\n2\n\x04\x06\
    \0\x02\0\x12\x03\n\x04D\x1a%\x20Get\x20the\x20system\x20version\x20infor\
    mation.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\x08\x12\n\x0c\n\x05\x06\
    \0\x02\0\x02\x12\x03\n\x13$\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\n.@\n)\n\
    \x02\x04\0\x12\x04\x0e\0\x18\x01\x1a\x1d\x20System\x20version\x20informa\
    tion.\n\n\n\n\x03\x04\0\x01\x12\x03\x0e\x08\x0f\n,\n\x04\x04\0\x02\0\x12\
    \x03\x0f\x04\x1e\"\x1f\x20Flight\x20software\x20major\x20version\n\n\r\n\
    \x05\x04\0\x02\0\x04\x12\x04\x0f\x04\x0e\x11\n\x0c\n\x05\x04\0\x02\0\x05\
    \x12\x03\x0f\x04\t\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x0f\n\x19\n\x0c\n\
    \x05\x04\0\x02\0\x03\x12\x03\x0f\x1c\x1d\n,\n\x04\x04\0\x02\x01\x12\x03\
    \x10\x04\x1e\"\x1f\x20Flight\x20software\x20minor\x20version\n\n\r\n\x05\
    \x04\0\x02\x01\x04\x12\x04\x10\x04\x0f\x1e\n\x0c\n\x05\x04\0\x02\x01\x05\
    \x12\x03\x10\x04\t\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x10\n\x19\n\x0c\
    \n\x05\x04\0\x02\x01\x03\x12\x03\x10\x1c\x1d\n,\n\x04\x04\0\x02\x02\x12\
    \x03\x11\x04\x1e\"\x1f\x20Flight\x20software\x20patch\x20version\n\n\r\n\
    \x05\x04\0\x02\x02\x04\x12\x04\x11\x04\x10\x1e\n\x0c\n\x05\x04\0\x02\x02\
    \x05\x12\x03\x11\x04\t\n\x0c\n\x05\x04\0\x02\x02\x01\x12\x03\x11\n\x19\n\
    \x0c\n\x05\x04\0\x02\x02\x03\x12\x03\x11\x1c\x1d\n3\n\x04\x04\0\x02\x03\
    \x12\x03\x12\x04%\"&\x20Flight\x20software\x20vendor\x20major\x20version\
    \n\n\r\n\x05\x04\0\x02\x03\x04\x12\x04\x12\x04\x11\x1e\n\x0c\n\x05\x04\0\
    \x02\x03\x05\x12\x03\x12\x04\t\n\x0c\n\x05\x04\0\x02\x03\x01\x12\x03\x12\
    \n\x20\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x12#$\n3\n\x04\x04\0\x02\
    \x04\x12\x03\x13\x04%\"&\x20Flight\x20software\x20vendor\x20minor\x20ver\
    sion\n\n\r\n\x05\x04\0\x02\x04\x04\x12\x04\x13\x04\x12%\n\x0c\n\x05\x04\
    \0\x02\x04\x05\x12\x03\x13\x04\t\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\
    \x13\n\x20\n\x0c\n\x05\x04\0\x02\x04\x03\x12\x03\x13#$\n3\n\x04\x04\0\
    \x02\x05\x12\x03\x14\x04%\"&\x20Flight\x20software\x20vendor\x20patch\
    \x20version\n\n\r\n\x05\x04\0\x02\x05\x04\x12\x04\x14\x04\x13%\n\x0c\n\
    \x05\x04\0\x02\x05\x05\x12\x03\x14\x04\t\n\x0c\n\x05\x04\0\x02\x05\x01\
    \x12\x03\x14\n\x20\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\x14#$\n6\n\x04\
    \x04\0\x02\x06\x12\x03\x15\x04\x1a\")\x20Operating\x20system\x20software\
    \x20major\x20version\n\n\r\n\x05\x04\0\x02\x06\x04\x12\x04\x15\x04\x14%\
    \n\x0c\n\x05\x04\0\x02\x06\x05\x12\x03\x15\x04\t\n\x0c\n\x05\x04\0\x02\
    \x06\x01\x12\x03\x15\n\x15\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x15\x18\
    \x19\n6\n\x04\x04\0\x02\x07\x12\x03\x16\x04\x1a\")\x20Operating\x20syste\
    m\x20software\x20minor\x20version\n\n\r\n\x05\x04\0\x02\x07\x04\x12\x04\
    \x16\x04\x15\x1a\n\x0c\n\x05\x04\0\x02\x07\x05\x12\x03\x16\x04\t\n\x0c\n\
    \x05\x04\0\x02\x07\x01\x12\x03\x16\n\x15\n\x0c\n\x05\x04\0\x02\x07\x03\
    \x12\x03\x16\x18\x19\n6\n\x04\x04\0\x02\x08\x12\x03\x17\x04\x1a\")\x20Op\
    erating\x20system\x20software\x20patch\x20version\n\n\r\n\x05\x04\0\x02\
    \x08\x04\x12\x04\x17\x04\x16\x1a\n\x0c\n\x05\x04\0\x02\x08\x05\x12\x03\
    \x17\x04\t\n\x0c\n\x05\x04\0\x02\x08\x01\x12\x03\x17\n\x15\n\x0c\n\x05\
    \x04\0\x02\x08\x03\x12\x03\x17\x18\x19\n\t\n\x02\x04\x01\x12\x03\x1a\0\
    \x1c\n\n\n\x03\x04\x01\x01\x12\x03\x1a\x08\x19\n\n\n\x02\x04\x02\x12\x04\
    \x1b\0\x1e\x01\n\n\n\x03\x04\x02\x01\x12\x03\x1b\x08\x1a\n\x0b\n\x04\x04\
    \x02\x02\0\x12\x03\x1c\x04\x1f\n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1c\
    \x04\x1b\x1c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03\x1c\x04\x0e\n\x0c\n\
    \x05\x04\x02\x02\0\x01\x12\x03\x1c\x0f\x1a\n\x0c\n\x05\x04\x02\x02\0\x03\
    \x12\x03\x1c\x1d\x1e\n3\n\x04\x04\x02\x02\x01\x12\x03\x1d\x04\x18\"&\x20\
    Version\x20information\x20about\x20the\x20system\n\n\r\n\x05\x04\x02\x02\
    \x01\x04\x12\x04\x1d\x04\x1c\x1f\n\x0c\n\x05\x04\x02\x02\x01\x06\x12\x03\
    \x1d\x04\x0b\n\x0c\n\x05\x04\x02\x02\x01\x01\x12\x03\x1d\x0c\x13\n\x0c\n\
    \x05\x04\x02\x02\x01\x03\x12\x03\x1d\x16\x17\n\x1a\n\x02\x04\x03\x12\x04\
    !\0+\x01\x1a\x0e\x20Result\x20type.\n\n\n\n\x03\x04\x03\x01\x12\x03!\x08\
    \x12\n<\n\x04\x04\x03\x04\0\x12\x04#\x04'\x05\x1a.\x20Possible\x20result\
    s\x20returned\x20for\x20info\x20requests.\n\n\x0c\n\x05\x04\x03\x04\0\
    \x01\x12\x03#\t\x0f\n\x1e\n\x06\x04\x03\x04\0\x02\0\x12\x03$\x08\x14\"\
    \x0f\x20Unknown\x20error\n\n\x0e\n\x07\x04\x03\x04\0\x02\0\x01\x12\x03$\
    \x08\x0f\n\x0e\n\x07\x04\x03\x04\0\x02\0\x02\x12\x03$\x12\x13\n\"\n\x06\
    \x04\x03\x04\0\x02\x01\x12\x03%\x08\x14\"\x13\x20Request\x20succeeded\n\
    \n\x0e\n\x07\x04\x03\x04\0\x02\x01\x01\x12\x03%\x08\x0f\n\x0e\n\x07\x04\
    \x03\x04\0\x02\x01\x02\x12\x03%\x12\x13\n6\n\x06\x04\x03\x04\0\x02\x02\
    \x12\x03&\x08)\"'\x20Information\x20has\x20not\x20been\x20received\x20ye\
    t\n\n\x0e\n\x07\x04\x03\x04\0\x02\x02\x01\x12\x03&\x08$\n\x0e\n\x07\x04\
    \x03\x04\0\x02\x02\x02\x12\x03&'(\n\x20\n\x04\x04\x03\x02\0\x12\x03)\x04\
    \x16\"\x13\x20Result\x20enum\x20value\n\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04)\x04'\x05\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03)\x04\n\n\x0c\n\x05\
    \x04\x03\x02\0\x01\x12\x03)\x0b\x11\n\x0c\n\x05\x04\x03\x02\0\x03\x12\
    \x03)\x14\x15\nB\n\x04\x04\x03\x02\x01\x12\x03*\x04\x1a\"5\x20Human-read\
    able\x20English\x20string\x20describing\x20the\x20result\n\n\r\n\x05\x04\
    \x03\x02\x01\x04\x12\x04*\x04)\x16\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\
    \x03*\x04\n\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03*\x0b\x15\n\x0c\n\x05\
    \x04\x03\x02\x01\x03\x12\x03*\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
