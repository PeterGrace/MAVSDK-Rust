// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `mocap/mocap.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SetVisionPositionEstimateRequest {
    // message fields
    pub vision_position_estimate: ::protobuf::SingularPtrField<VisionPositionEstimate>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetVisionPositionEstimateRequest {
    fn default() -> &'a SetVisionPositionEstimateRequest {
        <SetVisionPositionEstimateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetVisionPositionEstimateRequest {
    pub fn new() -> SetVisionPositionEstimateRequest {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.VisionPositionEstimate vision_position_estimate = 1;


    pub fn get_vision_position_estimate(&self) -> &VisionPositionEstimate {
        self.vision_position_estimate.as_ref().unwrap_or_else(|| VisionPositionEstimate::default_instance())
    }
    pub fn clear_vision_position_estimate(&mut self) {
        self.vision_position_estimate.clear();
    }

    pub fn has_vision_position_estimate(&self) -> bool {
        self.vision_position_estimate.is_some()
    }

    // Param is passed by value, moved
    pub fn set_vision_position_estimate(&mut self, v: VisionPositionEstimate) {
        self.vision_position_estimate = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_vision_position_estimate(&mut self) -> &mut VisionPositionEstimate {
        if self.vision_position_estimate.is_none() {
            self.vision_position_estimate.set_default();
        }
        self.vision_position_estimate.as_mut().unwrap()
    }

    // Take field
    pub fn take_vision_position_estimate(&mut self) -> VisionPositionEstimate {
        self.vision_position_estimate.take().unwrap_or_else(|| VisionPositionEstimate::new())
    }
}

impl ::protobuf::Message for SetVisionPositionEstimateRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.vision_position_estimate {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.vision_position_estimate)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.vision_position_estimate.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.vision_position_estimate.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetVisionPositionEstimateRequest {
        SetVisionPositionEstimateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<VisionPositionEstimate>>(
                    "vision_position_estimate",
                    |m: &SetVisionPositionEstimateRequest| { &m.vision_position_estimate },
                    |m: &mut SetVisionPositionEstimateRequest| { &mut m.vision_position_estimate },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetVisionPositionEstimateRequest>(
                    "SetVisionPositionEstimateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetVisionPositionEstimateRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetVisionPositionEstimateRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetVisionPositionEstimateRequest,
        };
        unsafe {
            instance.get(SetVisionPositionEstimateRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetVisionPositionEstimateRequest {
    fn clear(&mut self) {
        self.vision_position_estimate.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetVisionPositionEstimateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetVisionPositionEstimateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetVisionPositionEstimateResponse {
    // message fields
    pub mocap_result: ::protobuf::SingularPtrField<MocapResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetVisionPositionEstimateResponse {
    fn default() -> &'a SetVisionPositionEstimateResponse {
        <SetVisionPositionEstimateResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetVisionPositionEstimateResponse {
    pub fn new() -> SetVisionPositionEstimateResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;


    pub fn get_mocap_result(&self) -> &MocapResult {
        self.mocap_result.as_ref().unwrap_or_else(|| MocapResult::default_instance())
    }
    pub fn clear_mocap_result(&mut self) {
        self.mocap_result.clear();
    }

    pub fn has_mocap_result(&self) -> bool {
        self.mocap_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mocap_result(&mut self, v: MocapResult) {
        self.mocap_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mocap_result(&mut self) -> &mut MocapResult {
        if self.mocap_result.is_none() {
            self.mocap_result.set_default();
        }
        self.mocap_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_mocap_result(&mut self) -> MocapResult {
        self.mocap_result.take().unwrap_or_else(|| MocapResult::new())
    }
}

impl ::protobuf::Message for SetVisionPositionEstimateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.mocap_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mocap_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mocap_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mocap_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetVisionPositionEstimateResponse {
        SetVisionPositionEstimateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MocapResult>>(
                    "mocap_result",
                    |m: &SetVisionPositionEstimateResponse| { &m.mocap_result },
                    |m: &mut SetVisionPositionEstimateResponse| { &mut m.mocap_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetVisionPositionEstimateResponse>(
                    "SetVisionPositionEstimateResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetVisionPositionEstimateResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetVisionPositionEstimateResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetVisionPositionEstimateResponse,
        };
        unsafe {
            instance.get(SetVisionPositionEstimateResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetVisionPositionEstimateResponse {
    fn clear(&mut self) {
        self.mocap_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetVisionPositionEstimateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetVisionPositionEstimateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetAttitudePositionMocapRequest {
    // message fields
    pub attitude_position_mocap: ::protobuf::SingularPtrField<AttitudePositionMocap>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetAttitudePositionMocapRequest {
    fn default() -> &'a SetAttitudePositionMocapRequest {
        <SetAttitudePositionMocapRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetAttitudePositionMocapRequest {
    pub fn new() -> SetAttitudePositionMocapRequest {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.AttitudePositionMocap attitude_position_mocap = 1;


    pub fn get_attitude_position_mocap(&self) -> &AttitudePositionMocap {
        self.attitude_position_mocap.as_ref().unwrap_or_else(|| AttitudePositionMocap::default_instance())
    }
    pub fn clear_attitude_position_mocap(&mut self) {
        self.attitude_position_mocap.clear();
    }

    pub fn has_attitude_position_mocap(&self) -> bool {
        self.attitude_position_mocap.is_some()
    }

    // Param is passed by value, moved
    pub fn set_attitude_position_mocap(&mut self, v: AttitudePositionMocap) {
        self.attitude_position_mocap = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_attitude_position_mocap(&mut self) -> &mut AttitudePositionMocap {
        if self.attitude_position_mocap.is_none() {
            self.attitude_position_mocap.set_default();
        }
        self.attitude_position_mocap.as_mut().unwrap()
    }

    // Take field
    pub fn take_attitude_position_mocap(&mut self) -> AttitudePositionMocap {
        self.attitude_position_mocap.take().unwrap_or_else(|| AttitudePositionMocap::new())
    }
}

impl ::protobuf::Message for SetAttitudePositionMocapRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.attitude_position_mocap {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.attitude_position_mocap)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.attitude_position_mocap.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.attitude_position_mocap.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetAttitudePositionMocapRequest {
        SetAttitudePositionMocapRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AttitudePositionMocap>>(
                    "attitude_position_mocap",
                    |m: &SetAttitudePositionMocapRequest| { &m.attitude_position_mocap },
                    |m: &mut SetAttitudePositionMocapRequest| { &mut m.attitude_position_mocap },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetAttitudePositionMocapRequest>(
                    "SetAttitudePositionMocapRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetAttitudePositionMocapRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetAttitudePositionMocapRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetAttitudePositionMocapRequest,
        };
        unsafe {
            instance.get(SetAttitudePositionMocapRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetAttitudePositionMocapRequest {
    fn clear(&mut self) {
        self.attitude_position_mocap.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetAttitudePositionMocapRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetAttitudePositionMocapRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetAttitudePositionMocapResponse {
    // message fields
    pub mocap_result: ::protobuf::SingularPtrField<MocapResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetAttitudePositionMocapResponse {
    fn default() -> &'a SetAttitudePositionMocapResponse {
        <SetAttitudePositionMocapResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetAttitudePositionMocapResponse {
    pub fn new() -> SetAttitudePositionMocapResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;


    pub fn get_mocap_result(&self) -> &MocapResult {
        self.mocap_result.as_ref().unwrap_or_else(|| MocapResult::default_instance())
    }
    pub fn clear_mocap_result(&mut self) {
        self.mocap_result.clear();
    }

    pub fn has_mocap_result(&self) -> bool {
        self.mocap_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mocap_result(&mut self, v: MocapResult) {
        self.mocap_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mocap_result(&mut self) -> &mut MocapResult {
        if self.mocap_result.is_none() {
            self.mocap_result.set_default();
        }
        self.mocap_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_mocap_result(&mut self) -> MocapResult {
        self.mocap_result.take().unwrap_or_else(|| MocapResult::new())
    }
}

impl ::protobuf::Message for SetAttitudePositionMocapResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.mocap_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mocap_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mocap_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mocap_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetAttitudePositionMocapResponse {
        SetAttitudePositionMocapResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MocapResult>>(
                    "mocap_result",
                    |m: &SetAttitudePositionMocapResponse| { &m.mocap_result },
                    |m: &mut SetAttitudePositionMocapResponse| { &mut m.mocap_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetAttitudePositionMocapResponse>(
                    "SetAttitudePositionMocapResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetAttitudePositionMocapResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetAttitudePositionMocapResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetAttitudePositionMocapResponse,
        };
        unsafe {
            instance.get(SetAttitudePositionMocapResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetAttitudePositionMocapResponse {
    fn clear(&mut self) {
        self.mocap_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetAttitudePositionMocapResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetAttitudePositionMocapResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOdometryRequest {
    // message fields
    pub odometry: ::protobuf::SingularPtrField<Odometry>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOdometryRequest {
    fn default() -> &'a SetOdometryRequest {
        <SetOdometryRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetOdometryRequest {
    pub fn new() -> SetOdometryRequest {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.Odometry odometry = 1;


    pub fn get_odometry(&self) -> &Odometry {
        self.odometry.as_ref().unwrap_or_else(|| Odometry::default_instance())
    }
    pub fn clear_odometry(&mut self) {
        self.odometry.clear();
    }

    pub fn has_odometry(&self) -> bool {
        self.odometry.is_some()
    }

    // Param is passed by value, moved
    pub fn set_odometry(&mut self, v: Odometry) {
        self.odometry = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_odometry(&mut self) -> &mut Odometry {
        if self.odometry.is_none() {
            self.odometry.set_default();
        }
        self.odometry.as_mut().unwrap()
    }

    // Take field
    pub fn take_odometry(&mut self) -> Odometry {
        self.odometry.take().unwrap_or_else(|| Odometry::new())
    }
}

impl ::protobuf::Message for SetOdometryRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.odometry {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.odometry)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.odometry.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.odometry.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOdometryRequest {
        SetOdometryRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Odometry>>(
                    "odometry",
                    |m: &SetOdometryRequest| { &m.odometry },
                    |m: &mut SetOdometryRequest| { &mut m.odometry },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetOdometryRequest>(
                    "SetOdometryRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetOdometryRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetOdometryRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetOdometryRequest,
        };
        unsafe {
            instance.get(SetOdometryRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetOdometryRequest {
    fn clear(&mut self) {
        self.odometry.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOdometryRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOdometryRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetOdometryResponse {
    // message fields
    pub mocap_result: ::protobuf::SingularPtrField<MocapResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetOdometryResponse {
    fn default() -> &'a SetOdometryResponse {
        <SetOdometryResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetOdometryResponse {
    pub fn new() -> SetOdometryResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.MocapResult mocap_result = 1;


    pub fn get_mocap_result(&self) -> &MocapResult {
        self.mocap_result.as_ref().unwrap_or_else(|| MocapResult::default_instance())
    }
    pub fn clear_mocap_result(&mut self) {
        self.mocap_result.clear();
    }

    pub fn has_mocap_result(&self) -> bool {
        self.mocap_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_mocap_result(&mut self, v: MocapResult) {
        self.mocap_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_mocap_result(&mut self) -> &mut MocapResult {
        if self.mocap_result.is_none() {
            self.mocap_result.set_default();
        }
        self.mocap_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_mocap_result(&mut self) -> MocapResult {
        self.mocap_result.take().unwrap_or_else(|| MocapResult::new())
    }
}

impl ::protobuf::Message for SetOdometryResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.mocap_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.mocap_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.mocap_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.mocap_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetOdometryResponse {
        SetOdometryResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<MocapResult>>(
                    "mocap_result",
                    |m: &SetOdometryResponse| { &m.mocap_result },
                    |m: &mut SetOdometryResponse| { &mut m.mocap_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetOdometryResponse>(
                    "SetOdometryResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetOdometryResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetOdometryResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetOdometryResponse,
        };
        unsafe {
            instance.get(SetOdometryResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetOdometryResponse {
    fn clear(&mut self) {
        self.mocap_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetOdometryResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetOdometryResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct VisionPositionEstimate {
    // message fields
    pub time_usec: u64,
    pub position_body: ::protobuf::SingularPtrField<PositionBody>,
    pub angle_body: ::protobuf::SingularPtrField<AngleBody>,
    pub pose_covariance: ::protobuf::SingularPtrField<Covariance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a VisionPositionEstimate {
    fn default() -> &'a VisionPositionEstimate {
        <VisionPositionEstimate as ::protobuf::Message>::default_instance()
    }
}

impl VisionPositionEstimate {
    pub fn new() -> VisionPositionEstimate {
        ::std::default::Default::default()
    }

    // uint64 time_usec = 1;


    pub fn get_time_usec(&self) -> u64 {
        self.time_usec
    }
    pub fn clear_time_usec(&mut self) {
        self.time_usec = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_usec(&mut self, v: u64) {
        self.time_usec = v;
    }

    // .mavsdk.rpc.mocap.PositionBody position_body = 2;


    pub fn get_position_body(&self) -> &PositionBody {
        self.position_body.as_ref().unwrap_or_else(|| PositionBody::default_instance())
    }
    pub fn clear_position_body(&mut self) {
        self.position_body.clear();
    }

    pub fn has_position_body(&self) -> bool {
        self.position_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position_body(&mut self, v: PositionBody) {
        self.position_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position_body(&mut self) -> &mut PositionBody {
        if self.position_body.is_none() {
            self.position_body.set_default();
        }
        self.position_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_position_body(&mut self) -> PositionBody {
        self.position_body.take().unwrap_or_else(|| PositionBody::new())
    }

    // .mavsdk.rpc.mocap.AngleBody angle_body = 3;


    pub fn get_angle_body(&self) -> &AngleBody {
        self.angle_body.as_ref().unwrap_or_else(|| AngleBody::default_instance())
    }
    pub fn clear_angle_body(&mut self) {
        self.angle_body.clear();
    }

    pub fn has_angle_body(&self) -> bool {
        self.angle_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_angle_body(&mut self, v: AngleBody) {
        self.angle_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_angle_body(&mut self) -> &mut AngleBody {
        if self.angle_body.is_none() {
            self.angle_body.set_default();
        }
        self.angle_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_angle_body(&mut self) -> AngleBody {
        self.angle_body.take().unwrap_or_else(|| AngleBody::new())
    }

    // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;


    pub fn get_pose_covariance(&self) -> &Covariance {
        self.pose_covariance.as_ref().unwrap_or_else(|| Covariance::default_instance())
    }
    pub fn clear_pose_covariance(&mut self) {
        self.pose_covariance.clear();
    }

    pub fn has_pose_covariance(&self) -> bool {
        self.pose_covariance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose_covariance(&mut self, v: Covariance) {
        self.pose_covariance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose_covariance(&mut self) -> &mut Covariance {
        if self.pose_covariance.is_none() {
            self.pose_covariance.set_default();
        }
        self.pose_covariance.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose_covariance(&mut self) -> Covariance {
        self.pose_covariance.take().unwrap_or_else(|| Covariance::new())
    }
}

impl ::protobuf::Message for VisionPositionEstimate {
    fn is_initialized(&self) -> bool {
        for v in &self.position_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.angle_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pose_covariance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_usec = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position_body)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.angle_body)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose_covariance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_usec != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time_usec, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.position_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.angle_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_usec != 0 {
            os.write_uint64(1, self.time_usec)?;
        }
        if let Some(ref v) = self.position_body.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.angle_body.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> VisionPositionEstimate {
        VisionPositionEstimate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_usec",
                    |m: &VisionPositionEstimate| { &m.time_usec },
                    |m: &mut VisionPositionEstimate| { &mut m.time_usec },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PositionBody>>(
                    "position_body",
                    |m: &VisionPositionEstimate| { &m.position_body },
                    |m: &mut VisionPositionEstimate| { &mut m.position_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AngleBody>>(
                    "angle_body",
                    |m: &VisionPositionEstimate| { &m.angle_body },
                    |m: &mut VisionPositionEstimate| { &mut m.angle_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Covariance>>(
                    "pose_covariance",
                    |m: &VisionPositionEstimate| { &m.pose_covariance },
                    |m: &mut VisionPositionEstimate| { &mut m.pose_covariance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<VisionPositionEstimate>(
                    "VisionPositionEstimate",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static VisionPositionEstimate {
        static mut instance: ::protobuf::lazy::Lazy<VisionPositionEstimate> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const VisionPositionEstimate,
        };
        unsafe {
            instance.get(VisionPositionEstimate::new)
        }
    }
}

impl ::protobuf::Clear for VisionPositionEstimate {
    fn clear(&mut self) {
        self.time_usec = 0;
        self.position_body.clear();
        self.angle_body.clear();
        self.pose_covariance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for VisionPositionEstimate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for VisionPositionEstimate {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AttitudePositionMocap {
    // message fields
    pub time_usec: u64,
    pub q: ::protobuf::SingularPtrField<Quaternion>,
    pub position_body: ::protobuf::SingularPtrField<PositionBody>,
    pub pose_covariance: ::protobuf::SingularPtrField<Covariance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AttitudePositionMocap {
    fn default() -> &'a AttitudePositionMocap {
        <AttitudePositionMocap as ::protobuf::Message>::default_instance()
    }
}

impl AttitudePositionMocap {
    pub fn new() -> AttitudePositionMocap {
        ::std::default::Default::default()
    }

    // uint64 time_usec = 1;


    pub fn get_time_usec(&self) -> u64 {
        self.time_usec
    }
    pub fn clear_time_usec(&mut self) {
        self.time_usec = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_usec(&mut self, v: u64) {
        self.time_usec = v;
    }

    // .mavsdk.rpc.mocap.Quaternion q = 2;


    pub fn get_q(&self) -> &Quaternion {
        self.q.as_ref().unwrap_or_else(|| Quaternion::default_instance())
    }
    pub fn clear_q(&mut self) {
        self.q.clear();
    }

    pub fn has_q(&self) -> bool {
        self.q.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q(&mut self, v: Quaternion) {
        self.q = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_q(&mut self) -> &mut Quaternion {
        if self.q.is_none() {
            self.q.set_default();
        }
        self.q.as_mut().unwrap()
    }

    // Take field
    pub fn take_q(&mut self) -> Quaternion {
        self.q.take().unwrap_or_else(|| Quaternion::new())
    }

    // .mavsdk.rpc.mocap.PositionBody position_body = 3;


    pub fn get_position_body(&self) -> &PositionBody {
        self.position_body.as_ref().unwrap_or_else(|| PositionBody::default_instance())
    }
    pub fn clear_position_body(&mut self) {
        self.position_body.clear();
    }

    pub fn has_position_body(&self) -> bool {
        self.position_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position_body(&mut self, v: PositionBody) {
        self.position_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position_body(&mut self) -> &mut PositionBody {
        if self.position_body.is_none() {
            self.position_body.set_default();
        }
        self.position_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_position_body(&mut self) -> PositionBody {
        self.position_body.take().unwrap_or_else(|| PositionBody::new())
    }

    // .mavsdk.rpc.mocap.Covariance pose_covariance = 4;


    pub fn get_pose_covariance(&self) -> &Covariance {
        self.pose_covariance.as_ref().unwrap_or_else(|| Covariance::default_instance())
    }
    pub fn clear_pose_covariance(&mut self) {
        self.pose_covariance.clear();
    }

    pub fn has_pose_covariance(&self) -> bool {
        self.pose_covariance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose_covariance(&mut self, v: Covariance) {
        self.pose_covariance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose_covariance(&mut self) -> &mut Covariance {
        if self.pose_covariance.is_none() {
            self.pose_covariance.set_default();
        }
        self.pose_covariance.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose_covariance(&mut self) -> Covariance {
        self.pose_covariance.take().unwrap_or_else(|| Covariance::new())
    }
}

impl ::protobuf::Message for AttitudePositionMocap {
    fn is_initialized(&self) -> bool {
        for v in &self.q {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.position_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pose_covariance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_usec = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.q)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position_body)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose_covariance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_usec != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time_usec, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.q.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.position_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_usec != 0 {
            os.write_uint64(1, self.time_usec)?;
        }
        if let Some(ref v) = self.q.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.position_body.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AttitudePositionMocap {
        AttitudePositionMocap::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_usec",
                    |m: &AttitudePositionMocap| { &m.time_usec },
                    |m: &mut AttitudePositionMocap| { &mut m.time_usec },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Quaternion>>(
                    "q",
                    |m: &AttitudePositionMocap| { &m.q },
                    |m: &mut AttitudePositionMocap| { &mut m.q },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PositionBody>>(
                    "position_body",
                    |m: &AttitudePositionMocap| { &m.position_body },
                    |m: &mut AttitudePositionMocap| { &mut m.position_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Covariance>>(
                    "pose_covariance",
                    |m: &AttitudePositionMocap| { &m.pose_covariance },
                    |m: &mut AttitudePositionMocap| { &mut m.pose_covariance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AttitudePositionMocap>(
                    "AttitudePositionMocap",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AttitudePositionMocap {
        static mut instance: ::protobuf::lazy::Lazy<AttitudePositionMocap> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AttitudePositionMocap,
        };
        unsafe {
            instance.get(AttitudePositionMocap::new)
        }
    }
}

impl ::protobuf::Clear for AttitudePositionMocap {
    fn clear(&mut self) {
        self.time_usec = 0;
        self.q.clear();
        self.position_body.clear();
        self.pose_covariance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AttitudePositionMocap {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AttitudePositionMocap {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Odometry {
    // message fields
    pub time_usec: u64,
    pub frame_id: Odometry_MavFrame,
    pub position_body: ::protobuf::SingularPtrField<PositionBody>,
    pub q: ::protobuf::SingularPtrField<Quaternion>,
    pub speed_body: ::protobuf::SingularPtrField<SpeedBody>,
    pub angular_velocity_body: ::protobuf::SingularPtrField<AngularVelocityBody>,
    pub pose_covariance: ::protobuf::SingularPtrField<Covariance>,
    pub velocity_covariance: ::protobuf::SingularPtrField<Covariance>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Odometry {
    fn default() -> &'a Odometry {
        <Odometry as ::protobuf::Message>::default_instance()
    }
}

impl Odometry {
    pub fn new() -> Odometry {
        ::std::default::Default::default()
    }

    // uint64 time_usec = 1;


    pub fn get_time_usec(&self) -> u64 {
        self.time_usec
    }
    pub fn clear_time_usec(&mut self) {
        self.time_usec = 0;
    }

    // Param is passed by value, moved
    pub fn set_time_usec(&mut self, v: u64) {
        self.time_usec = v;
    }

    // .mavsdk.rpc.mocap.Odometry.MavFrame frame_id = 2;


    pub fn get_frame_id(&self) -> Odometry_MavFrame {
        self.frame_id
    }
    pub fn clear_frame_id(&mut self) {
        self.frame_id = Odometry_MavFrame::STUB;
    }

    // Param is passed by value, moved
    pub fn set_frame_id(&mut self, v: Odometry_MavFrame) {
        self.frame_id = v;
    }

    // .mavsdk.rpc.mocap.PositionBody position_body = 3;


    pub fn get_position_body(&self) -> &PositionBody {
        self.position_body.as_ref().unwrap_or_else(|| PositionBody::default_instance())
    }
    pub fn clear_position_body(&mut self) {
        self.position_body.clear();
    }

    pub fn has_position_body(&self) -> bool {
        self.position_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_position_body(&mut self, v: PositionBody) {
        self.position_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_position_body(&mut self) -> &mut PositionBody {
        if self.position_body.is_none() {
            self.position_body.set_default();
        }
        self.position_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_position_body(&mut self) -> PositionBody {
        self.position_body.take().unwrap_or_else(|| PositionBody::new())
    }

    // .mavsdk.rpc.mocap.Quaternion q = 4;


    pub fn get_q(&self) -> &Quaternion {
        self.q.as_ref().unwrap_or_else(|| Quaternion::default_instance())
    }
    pub fn clear_q(&mut self) {
        self.q.clear();
    }

    pub fn has_q(&self) -> bool {
        self.q.is_some()
    }

    // Param is passed by value, moved
    pub fn set_q(&mut self, v: Quaternion) {
        self.q = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_q(&mut self) -> &mut Quaternion {
        if self.q.is_none() {
            self.q.set_default();
        }
        self.q.as_mut().unwrap()
    }

    // Take field
    pub fn take_q(&mut self) -> Quaternion {
        self.q.take().unwrap_or_else(|| Quaternion::new())
    }

    // .mavsdk.rpc.mocap.SpeedBody speed_body = 5;


    pub fn get_speed_body(&self) -> &SpeedBody {
        self.speed_body.as_ref().unwrap_or_else(|| SpeedBody::default_instance())
    }
    pub fn clear_speed_body(&mut self) {
        self.speed_body.clear();
    }

    pub fn has_speed_body(&self) -> bool {
        self.speed_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_speed_body(&mut self, v: SpeedBody) {
        self.speed_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_speed_body(&mut self) -> &mut SpeedBody {
        if self.speed_body.is_none() {
            self.speed_body.set_default();
        }
        self.speed_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_speed_body(&mut self) -> SpeedBody {
        self.speed_body.take().unwrap_or_else(|| SpeedBody::new())
    }

    // .mavsdk.rpc.mocap.AngularVelocityBody angular_velocity_body = 6;


    pub fn get_angular_velocity_body(&self) -> &AngularVelocityBody {
        self.angular_velocity_body.as_ref().unwrap_or_else(|| AngularVelocityBody::default_instance())
    }
    pub fn clear_angular_velocity_body(&mut self) {
        self.angular_velocity_body.clear();
    }

    pub fn has_angular_velocity_body(&self) -> bool {
        self.angular_velocity_body.is_some()
    }

    // Param is passed by value, moved
    pub fn set_angular_velocity_body(&mut self, v: AngularVelocityBody) {
        self.angular_velocity_body = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_angular_velocity_body(&mut self) -> &mut AngularVelocityBody {
        if self.angular_velocity_body.is_none() {
            self.angular_velocity_body.set_default();
        }
        self.angular_velocity_body.as_mut().unwrap()
    }

    // Take field
    pub fn take_angular_velocity_body(&mut self) -> AngularVelocityBody {
        self.angular_velocity_body.take().unwrap_or_else(|| AngularVelocityBody::new())
    }

    // .mavsdk.rpc.mocap.Covariance pose_covariance = 7;


    pub fn get_pose_covariance(&self) -> &Covariance {
        self.pose_covariance.as_ref().unwrap_or_else(|| Covariance::default_instance())
    }
    pub fn clear_pose_covariance(&mut self) {
        self.pose_covariance.clear();
    }

    pub fn has_pose_covariance(&self) -> bool {
        self.pose_covariance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_pose_covariance(&mut self, v: Covariance) {
        self.pose_covariance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_pose_covariance(&mut self) -> &mut Covariance {
        if self.pose_covariance.is_none() {
            self.pose_covariance.set_default();
        }
        self.pose_covariance.as_mut().unwrap()
    }

    // Take field
    pub fn take_pose_covariance(&mut self) -> Covariance {
        self.pose_covariance.take().unwrap_or_else(|| Covariance::new())
    }

    // .mavsdk.rpc.mocap.Covariance velocity_covariance = 8;


    pub fn get_velocity_covariance(&self) -> &Covariance {
        self.velocity_covariance.as_ref().unwrap_or_else(|| Covariance::default_instance())
    }
    pub fn clear_velocity_covariance(&mut self) {
        self.velocity_covariance.clear();
    }

    pub fn has_velocity_covariance(&self) -> bool {
        self.velocity_covariance.is_some()
    }

    // Param is passed by value, moved
    pub fn set_velocity_covariance(&mut self, v: Covariance) {
        self.velocity_covariance = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_velocity_covariance(&mut self) -> &mut Covariance {
        if self.velocity_covariance.is_none() {
            self.velocity_covariance.set_default();
        }
        self.velocity_covariance.as_mut().unwrap()
    }

    // Take field
    pub fn take_velocity_covariance(&mut self) -> Covariance {
        self.velocity_covariance.take().unwrap_or_else(|| Covariance::new())
    }
}

impl ::protobuf::Message for Odometry {
    fn is_initialized(&self) -> bool {
        for v in &self.position_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.q {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.speed_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.angular_velocity_body {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.pose_covariance {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.velocity_covariance {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.time_usec = tmp;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.frame_id, 2, &mut self.unknown_fields)?
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.position_body)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.q)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.speed_body)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.angular_velocity_body)?;
                },
                7 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.pose_covariance)?;
                },
                8 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.velocity_covariance)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time_usec != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time_usec, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.frame_id != Odometry_MavFrame::STUB {
            my_size += ::protobuf::rt::enum_size(2, self.frame_id);
        }
        if let Some(ref v) = self.position_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.q.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.speed_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.angular_velocity_body.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.velocity_covariance.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time_usec != 0 {
            os.write_uint64(1, self.time_usec)?;
        }
        if self.frame_id != Odometry_MavFrame::STUB {
            os.write_enum(2, self.frame_id.value())?;
        }
        if let Some(ref v) = self.position_body.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.q.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.speed_body.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.angular_velocity_body.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.pose_covariance.as_ref() {
            os.write_tag(7, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.velocity_covariance.as_ref() {
            os.write_tag(8, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Odometry {
        Odometry::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "time_usec",
                    |m: &Odometry| { &m.time_usec },
                    |m: &mut Odometry| { &mut m.time_usec },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Odometry_MavFrame>>(
                    "frame_id",
                    |m: &Odometry| { &m.frame_id },
                    |m: &mut Odometry| { &mut m.frame_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PositionBody>>(
                    "position_body",
                    |m: &Odometry| { &m.position_body },
                    |m: &mut Odometry| { &mut m.position_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Quaternion>>(
                    "q",
                    |m: &Odometry| { &m.q },
                    |m: &mut Odometry| { &mut m.q },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SpeedBody>>(
                    "speed_body",
                    |m: &Odometry| { &m.speed_body },
                    |m: &mut Odometry| { &mut m.speed_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<AngularVelocityBody>>(
                    "angular_velocity_body",
                    |m: &Odometry| { &m.angular_velocity_body },
                    |m: &mut Odometry| { &mut m.angular_velocity_body },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Covariance>>(
                    "pose_covariance",
                    |m: &Odometry| { &m.pose_covariance },
                    |m: &mut Odometry| { &mut m.pose_covariance },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Covariance>>(
                    "velocity_covariance",
                    |m: &Odometry| { &m.velocity_covariance },
                    |m: &mut Odometry| { &mut m.velocity_covariance },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Odometry>(
                    "Odometry",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Odometry {
        static mut instance: ::protobuf::lazy::Lazy<Odometry> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Odometry,
        };
        unsafe {
            instance.get(Odometry::new)
        }
    }
}

impl ::protobuf::Clear for Odometry {
    fn clear(&mut self) {
        self.time_usec = 0;
        self.frame_id = Odometry_MavFrame::STUB;
        self.position_body.clear();
        self.q.clear();
        self.speed_body.clear();
        self.angular_velocity_body.clear();
        self.pose_covariance.clear();
        self.velocity_covariance.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Odometry {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Odometry {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Odometry_MavFrame {
    STUB = 0,
    MOCAP_NED = 14,
    LOCAL_FRD = 20,
}

impl ::protobuf::ProtobufEnum for Odometry_MavFrame {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Odometry_MavFrame> {
        match value {
            0 => ::std::option::Option::Some(Odometry_MavFrame::STUB),
            14 => ::std::option::Option::Some(Odometry_MavFrame::MOCAP_NED),
            20 => ::std::option::Option::Some(Odometry_MavFrame::LOCAL_FRD),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Odometry_MavFrame] = &[
            Odometry_MavFrame::STUB,
            Odometry_MavFrame::MOCAP_NED,
            Odometry_MavFrame::LOCAL_FRD,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Odometry_MavFrame", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Odometry_MavFrame {
}

impl ::std::default::Default for Odometry_MavFrame {
    fn default() -> Self {
        Odometry_MavFrame::STUB
    }
}

impl ::protobuf::reflect::ProtobufValue for Odometry_MavFrame {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PositionBody {
    // message fields
    pub x_m: f32,
    pub y_m: f32,
    pub z_m: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PositionBody {
    fn default() -> &'a PositionBody {
        <PositionBody as ::protobuf::Message>::default_instance()
    }
}

impl PositionBody {
    pub fn new() -> PositionBody {
        ::std::default::Default::default()
    }

    // float x_m = 1;


    pub fn get_x_m(&self) -> f32 {
        self.x_m
    }
    pub fn clear_x_m(&mut self) {
        self.x_m = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x_m(&mut self, v: f32) {
        self.x_m = v;
    }

    // float y_m = 2;


    pub fn get_y_m(&self) -> f32 {
        self.y_m
    }
    pub fn clear_y_m(&mut self) {
        self.y_m = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y_m(&mut self, v: f32) {
        self.y_m = v;
    }

    // float z_m = 3;


    pub fn get_z_m(&self) -> f32 {
        self.z_m
    }
    pub fn clear_z_m(&mut self) {
        self.z_m = 0.;
    }

    // Param is passed by value, moved
    pub fn set_z_m(&mut self, v: f32) {
        self.z_m = v;
    }
}

impl ::protobuf::Message for PositionBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x_m = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y_m = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z_m = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x_m != 0. {
            my_size += 5;
        }
        if self.y_m != 0. {
            my_size += 5;
        }
        if self.z_m != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x_m != 0. {
            os.write_float(1, self.x_m)?;
        }
        if self.y_m != 0. {
            os.write_float(2, self.y_m)?;
        }
        if self.z_m != 0. {
            os.write_float(3, self.z_m)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PositionBody {
        PositionBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x_m",
                    |m: &PositionBody| { &m.x_m },
                    |m: &mut PositionBody| { &mut m.x_m },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y_m",
                    |m: &PositionBody| { &m.y_m },
                    |m: &mut PositionBody| { &mut m.y_m },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "z_m",
                    |m: &PositionBody| { &m.z_m },
                    |m: &mut PositionBody| { &mut m.z_m },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PositionBody>(
                    "PositionBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PositionBody {
        static mut instance: ::protobuf::lazy::Lazy<PositionBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PositionBody,
        };
        unsafe {
            instance.get(PositionBody::new)
        }
    }
}

impl ::protobuf::Clear for PositionBody {
    fn clear(&mut self) {
        self.x_m = 0.;
        self.y_m = 0.;
        self.z_m = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PositionBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PositionBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AngleBody {
    // message fields
    pub roll_rad: f32,
    pub pitch_rad: f32,
    pub yaw_rad: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AngleBody {
    fn default() -> &'a AngleBody {
        <AngleBody as ::protobuf::Message>::default_instance()
    }
}

impl AngleBody {
    pub fn new() -> AngleBody {
        ::std::default::Default::default()
    }

    // float roll_rad = 1;


    pub fn get_roll_rad(&self) -> f32 {
        self.roll_rad
    }
    pub fn clear_roll_rad(&mut self) {
        self.roll_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roll_rad(&mut self, v: f32) {
        self.roll_rad = v;
    }

    // float pitch_rad = 2;


    pub fn get_pitch_rad(&self) -> f32 {
        self.pitch_rad
    }
    pub fn clear_pitch_rad(&mut self) {
        self.pitch_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitch_rad(&mut self, v: f32) {
        self.pitch_rad = v;
    }

    // float yaw_rad = 3;


    pub fn get_yaw_rad(&self) -> f32 {
        self.yaw_rad
    }
    pub fn clear_yaw_rad(&mut self) {
        self.yaw_rad = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yaw_rad(&mut self, v: f32) {
        self.yaw_rad = v;
    }
}

impl ::protobuf::Message for AngleBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.roll_rad = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitch_rad = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yaw_rad = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.roll_rad != 0. {
            my_size += 5;
        }
        if self.pitch_rad != 0. {
            my_size += 5;
        }
        if self.yaw_rad != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.roll_rad != 0. {
            os.write_float(1, self.roll_rad)?;
        }
        if self.pitch_rad != 0. {
            os.write_float(2, self.pitch_rad)?;
        }
        if self.yaw_rad != 0. {
            os.write_float(3, self.yaw_rad)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AngleBody {
        AngleBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "roll_rad",
                    |m: &AngleBody| { &m.roll_rad },
                    |m: &mut AngleBody| { &mut m.roll_rad },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pitch_rad",
                    |m: &AngleBody| { &m.pitch_rad },
                    |m: &mut AngleBody| { &mut m.pitch_rad },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "yaw_rad",
                    |m: &AngleBody| { &m.yaw_rad },
                    |m: &mut AngleBody| { &mut m.yaw_rad },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AngleBody>(
                    "AngleBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AngleBody {
        static mut instance: ::protobuf::lazy::Lazy<AngleBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AngleBody,
        };
        unsafe {
            instance.get(AngleBody::new)
        }
    }
}

impl ::protobuf::Clear for AngleBody {
    fn clear(&mut self) {
        self.roll_rad = 0.;
        self.pitch_rad = 0.;
        self.yaw_rad = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AngleBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AngleBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SpeedBody {
    // message fields
    pub x_m_s: f32,
    pub y_m_s: f32,
    pub z_m_s: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SpeedBody {
    fn default() -> &'a SpeedBody {
        <SpeedBody as ::protobuf::Message>::default_instance()
    }
}

impl SpeedBody {
    pub fn new() -> SpeedBody {
        ::std::default::Default::default()
    }

    // float x_m_s = 1;


    pub fn get_x_m_s(&self) -> f32 {
        self.x_m_s
    }
    pub fn clear_x_m_s(&mut self) {
        self.x_m_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x_m_s(&mut self, v: f32) {
        self.x_m_s = v;
    }

    // float y_m_s = 2;


    pub fn get_y_m_s(&self) -> f32 {
        self.y_m_s
    }
    pub fn clear_y_m_s(&mut self) {
        self.y_m_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y_m_s(&mut self, v: f32) {
        self.y_m_s = v;
    }

    // float z_m_s = 3;


    pub fn get_z_m_s(&self) -> f32 {
        self.z_m_s
    }
    pub fn clear_z_m_s(&mut self) {
        self.z_m_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_z_m_s(&mut self, v: f32) {
        self.z_m_s = v;
    }
}

impl ::protobuf::Message for SpeedBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x_m_s = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y_m_s = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z_m_s = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x_m_s != 0. {
            my_size += 5;
        }
        if self.y_m_s != 0. {
            my_size += 5;
        }
        if self.z_m_s != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x_m_s != 0. {
            os.write_float(1, self.x_m_s)?;
        }
        if self.y_m_s != 0. {
            os.write_float(2, self.y_m_s)?;
        }
        if self.z_m_s != 0. {
            os.write_float(3, self.z_m_s)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SpeedBody {
        SpeedBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x_m_s",
                    |m: &SpeedBody| { &m.x_m_s },
                    |m: &mut SpeedBody| { &mut m.x_m_s },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y_m_s",
                    |m: &SpeedBody| { &m.y_m_s },
                    |m: &mut SpeedBody| { &mut m.y_m_s },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "z_m_s",
                    |m: &SpeedBody| { &m.z_m_s },
                    |m: &mut SpeedBody| { &mut m.z_m_s },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SpeedBody>(
                    "SpeedBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SpeedBody {
        static mut instance: ::protobuf::lazy::Lazy<SpeedBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SpeedBody,
        };
        unsafe {
            instance.get(SpeedBody::new)
        }
    }
}

impl ::protobuf::Clear for SpeedBody {
    fn clear(&mut self) {
        self.x_m_s = 0.;
        self.y_m_s = 0.;
        self.z_m_s = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SpeedBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SpeedBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct AngularVelocityBody {
    // message fields
    pub roll_rad_s: f32,
    pub pitch_rad_s: f32,
    pub yaw_rad_s: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a AngularVelocityBody {
    fn default() -> &'a AngularVelocityBody {
        <AngularVelocityBody as ::protobuf::Message>::default_instance()
    }
}

impl AngularVelocityBody {
    pub fn new() -> AngularVelocityBody {
        ::std::default::Default::default()
    }

    // float roll_rad_s = 1;


    pub fn get_roll_rad_s(&self) -> f32 {
        self.roll_rad_s
    }
    pub fn clear_roll_rad_s(&mut self) {
        self.roll_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_roll_rad_s(&mut self, v: f32) {
        self.roll_rad_s = v;
    }

    // float pitch_rad_s = 2;


    pub fn get_pitch_rad_s(&self) -> f32 {
        self.pitch_rad_s
    }
    pub fn clear_pitch_rad_s(&mut self) {
        self.pitch_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitch_rad_s(&mut self, v: f32) {
        self.pitch_rad_s = v;
    }

    // float yaw_rad_s = 3;


    pub fn get_yaw_rad_s(&self) -> f32 {
        self.yaw_rad_s
    }
    pub fn clear_yaw_rad_s(&mut self) {
        self.yaw_rad_s = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yaw_rad_s(&mut self, v: f32) {
        self.yaw_rad_s = v;
    }
}

impl ::protobuf::Message for AngularVelocityBody {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.roll_rad_s = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitch_rad_s = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yaw_rad_s = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.roll_rad_s != 0. {
            my_size += 5;
        }
        if self.pitch_rad_s != 0. {
            my_size += 5;
        }
        if self.yaw_rad_s != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.roll_rad_s != 0. {
            os.write_float(1, self.roll_rad_s)?;
        }
        if self.pitch_rad_s != 0. {
            os.write_float(2, self.pitch_rad_s)?;
        }
        if self.yaw_rad_s != 0. {
            os.write_float(3, self.yaw_rad_s)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> AngularVelocityBody {
        AngularVelocityBody::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "roll_rad_s",
                    |m: &AngularVelocityBody| { &m.roll_rad_s },
                    |m: &mut AngularVelocityBody| { &mut m.roll_rad_s },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pitch_rad_s",
                    |m: &AngularVelocityBody| { &m.pitch_rad_s },
                    |m: &mut AngularVelocityBody| { &mut m.pitch_rad_s },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "yaw_rad_s",
                    |m: &AngularVelocityBody| { &m.yaw_rad_s },
                    |m: &mut AngularVelocityBody| { &mut m.yaw_rad_s },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<AngularVelocityBody>(
                    "AngularVelocityBody",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static AngularVelocityBody {
        static mut instance: ::protobuf::lazy::Lazy<AngularVelocityBody> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const AngularVelocityBody,
        };
        unsafe {
            instance.get(AngularVelocityBody::new)
        }
    }
}

impl ::protobuf::Clear for AngularVelocityBody {
    fn clear(&mut self) {
        self.roll_rad_s = 0.;
        self.pitch_rad_s = 0.;
        self.yaw_rad_s = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for AngularVelocityBody {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for AngularVelocityBody {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Covariance {
    // message fields
    pub covariance_matrix: ::std::vec::Vec<f32>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Covariance {
    fn default() -> &'a Covariance {
        <Covariance as ::protobuf::Message>::default_instance()
    }
}

impl Covariance {
    pub fn new() -> Covariance {
        ::std::default::Default::default()
    }

    // repeated float covariance_matrix = 1;


    pub fn get_covariance_matrix(&self) -> &[f32] {
        &self.covariance_matrix
    }
    pub fn clear_covariance_matrix(&mut self) {
        self.covariance_matrix.clear();
    }

    // Param is passed by value, moved
    pub fn set_covariance_matrix(&mut self, v: ::std::vec::Vec<f32>) {
        self.covariance_matrix = v;
    }

    // Mutable pointer to the field.
    pub fn mut_covariance_matrix(&mut self) -> &mut ::std::vec::Vec<f32> {
        &mut self.covariance_matrix
    }

    // Take field
    pub fn take_covariance_matrix(&mut self) -> ::std::vec::Vec<f32> {
        ::std::mem::replace(&mut self.covariance_matrix, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for Covariance {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_float_into(wire_type, is, &mut self.covariance_matrix)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += 5 * self.covariance_matrix.len() as u32;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.covariance_matrix {
            os.write_float(1, *v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Covariance {
        Covariance::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_vec_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "covariance_matrix",
                    |m: &Covariance| { &m.covariance_matrix },
                    |m: &mut Covariance| { &mut m.covariance_matrix },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Covariance>(
                    "Covariance",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Covariance {
        static mut instance: ::protobuf::lazy::Lazy<Covariance> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Covariance,
        };
        unsafe {
            instance.get(Covariance::new)
        }
    }
}

impl ::protobuf::Clear for Covariance {
    fn clear(&mut self) {
        self.covariance_matrix.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Covariance {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Covariance {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Quaternion {
    // message fields
    pub w: f32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Quaternion {
    fn default() -> &'a Quaternion {
        <Quaternion as ::protobuf::Message>::default_instance()
    }
}

impl Quaternion {
    pub fn new() -> Quaternion {
        ::std::default::Default::default()
    }

    // float w = 1;


    pub fn get_w(&self) -> f32 {
        self.w
    }
    pub fn clear_w(&mut self) {
        self.w = 0.;
    }

    // Param is passed by value, moved
    pub fn set_w(&mut self, v: f32) {
        self.w = v;
    }

    // float x = 2;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 3;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float z = 4;


    pub fn get_z(&self) -> f32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: f32) {
        self.z = v;
    }
}

impl ::protobuf::Message for Quaternion {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.w = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.w != 0. {
            my_size += 5;
        }
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.z != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.w != 0. {
            os.write_float(1, self.w)?;
        }
        if self.x != 0. {
            os.write_float(2, self.x)?;
        }
        if self.y != 0. {
            os.write_float(3, self.y)?;
        }
        if self.z != 0. {
            os.write_float(4, self.z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Quaternion {
        Quaternion::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "w",
                    |m: &Quaternion| { &m.w },
                    |m: &mut Quaternion| { &mut m.w },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "x",
                    |m: &Quaternion| { &m.x },
                    |m: &mut Quaternion| { &mut m.x },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "y",
                    |m: &Quaternion| { &m.y },
                    |m: &mut Quaternion| { &mut m.y },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "z",
                    |m: &Quaternion| { &m.z },
                    |m: &mut Quaternion| { &mut m.z },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Quaternion>(
                    "Quaternion",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Quaternion {
        static mut instance: ::protobuf::lazy::Lazy<Quaternion> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Quaternion,
        };
        unsafe {
            instance.get(Quaternion::new)
        }
    }
}

impl ::protobuf::Clear for Quaternion {
    fn clear(&mut self) {
        self.w = 0.;
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Quaternion {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Quaternion {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MocapResult {
    // message fields
    pub result: MocapResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MocapResult {
    fn default() -> &'a MocapResult {
        <MocapResult as ::protobuf::Message>::default_instance()
    }
}

impl MocapResult {
    pub fn new() -> MocapResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.mocap.MocapResult.Result result = 1;


    pub fn get_result(&self) -> MocapResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = MocapResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: MocapResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for MocapResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != MocapResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != MocapResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MocapResult {
        MocapResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<MocapResult_Result>>(
                    "result",
                    |m: &MocapResult| { &m.result },
                    |m: &mut MocapResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &MocapResult| { &m.result_str },
                    |m: &mut MocapResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<MocapResult>(
                    "MocapResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static MocapResult {
        static mut instance: ::protobuf::lazy::Lazy<MocapResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const MocapResult,
        };
        unsafe {
            instance.get(MocapResult::new)
        }
    }
}

impl ::protobuf::Clear for MocapResult {
    fn clear(&mut self) {
        self.result = MocapResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MocapResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MocapResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum MocapResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    NO_SYSTEM = 2,
    CONNECTION_ERROR = 3,
    INVALID_REQUEST_DATA = 4,
}

impl ::protobuf::ProtobufEnum for MocapResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<MocapResult_Result> {
        match value {
            0 => ::std::option::Option::Some(MocapResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(MocapResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(MocapResult_Result::NO_SYSTEM),
            3 => ::std::option::Option::Some(MocapResult_Result::CONNECTION_ERROR),
            4 => ::std::option::Option::Some(MocapResult_Result::INVALID_REQUEST_DATA),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [MocapResult_Result] = &[
            MocapResult_Result::UNKNOWN,
            MocapResult_Result::SUCCESS,
            MocapResult_Result::NO_SYSTEM,
            MocapResult_Result::CONNECTION_ERROR,
            MocapResult_Result::INVALID_REQUEST_DATA,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("MocapResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for MocapResult_Result {
}

impl ::std::default::Default for MocapResult_Result {
    fn default() -> Self {
        MocapResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for MocapResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11mocap/mocap.proto\x12\x10mavsdk.rpc.mocap\"\x86\x01\n\x20SetVision\
    PositionEstimateRequest\x12b\n\x18vision_position_estimate\x18\x01\x20\
    \x01(\x0b2(.mavsdk.rpc.mocap.VisionPositionEstimateR\x16visionPositionEs\
    timate\"e\n!SetVisionPositionEstimateResponse\x12@\n\x0cmocap_result\x18\
    \x01\x20\x01(\x0b2\x1d.mavsdk.rpc.mocap.MocapResultR\x0bmocapResult\"\
    \x82\x01\n\x1fSetAttitudePositionMocapRequest\x12_\n\x17attitude_positio\
    n_mocap\x18\x01\x20\x01(\x0b2'.mavsdk.rpc.mocap.AttitudePositionMocapR\
    \x15attitudePositionMocap\"d\n\x20SetAttitudePositionMocapResponse\x12@\
    \n\x0cmocap_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.rpc.mocap.MocapResul\
    tR\x0bmocapResult\"L\n\x12SetOdometryRequest\x126\n\x08odometry\x18\x01\
    \x20\x01(\x0b2\x1a.mavsdk.rpc.mocap.OdometryR\x08odometry\"W\n\x13SetOdo\
    metryResponse\x12@\n\x0cmocap_result\x18\x01\x20\x01(\x0b2\x1d.mavsdk.rp\
    c.mocap.MocapResultR\x0bmocapResult\"\xfd\x01\n\x16VisionPositionEstimat\
    e\x12\x1b\n\ttime_usec\x18\x01\x20\x01(\x04R\x08timeUsec\x12C\n\rpositio\
    n_body\x18\x02\x20\x01(\x0b2\x1e.mavsdk.rpc.mocap.PositionBodyR\x0cposit\
    ionBody\x12:\n\nangle_body\x18\x03\x20\x01(\x0b2\x1b.mavsdk.rpc.mocap.An\
    gleBodyR\tangleBody\x12E\n\x0fpose_covariance\x18\x04\x20\x01(\x0b2\x1c.\
    mavsdk.rpc.mocap.CovarianceR\x0eposeCovariance\"\xec\x01\n\x15AttitudePo\
    sitionMocap\x12\x1b\n\ttime_usec\x18\x01\x20\x01(\x04R\x08timeUsec\x12*\
    \n\x01q\x18\x02\x20\x01(\x0b2\x1c.mavsdk.rpc.mocap.QuaternionR\x01q\x12C\
    \n\rposition_body\x18\x03\x20\x01(\x0b2\x1e.mavsdk.rpc.mocap.PositionBod\
    yR\x0cpositionBody\x12E\n\x0fpose_covariance\x18\x04\x20\x01(\x0b2\x1c.m\
    avsdk.rpc.mocap.CovarianceR\x0eposeCovariance\"\xb9\x04\n\x08Odometry\
    \x12\x1b\n\ttime_usec\x18\x01\x20\x01(\x04R\x08timeUsec\x12>\n\x08frame_\
    id\x18\x02\x20\x01(\x0e2#.mavsdk.rpc.mocap.Odometry.MavFrameR\x07frameId\
    \x12C\n\rposition_body\x18\x03\x20\x01(\x0b2\x1e.mavsdk.rpc.mocap.Positi\
    onBodyR\x0cpositionBody\x12*\n\x01q\x18\x04\x20\x01(\x0b2\x1c.mavsdk.rpc\
    .mocap.QuaternionR\x01q\x12:\n\nspeed_body\x18\x05\x20\x01(\x0b2\x1b.mav\
    sdk.rpc.mocap.SpeedBodyR\tspeedBody\x12Y\n\x15angular_velocity_body\x18\
    \x06\x20\x01(\x0b2%.mavsdk.rpc.mocap.AngularVelocityBodyR\x13angularVelo\
    cityBody\x12E\n\x0fpose_covariance\x18\x07\x20\x01(\x0b2\x1c.mavsdk.rpc.\
    mocap.CovarianceR\x0eposeCovariance\x12M\n\x13velocity_covariance\x18\
    \x08\x20\x01(\x0b2\x1c.mavsdk.rpc.mocap.CovarianceR\x12velocityCovarianc\
    e\"2\n\x08MavFrame\x12\x08\n\x04STUB\x10\0\x12\r\n\tMOCAP_NED\x10\x0e\
    \x12\r\n\tLOCAL_FRD\x10\x14\"A\n\x0cPositionBody\x12\x0f\n\x03x_m\x18\
    \x01\x20\x01(\x02R\x02xM\x12\x0f\n\x03y_m\x18\x02\x20\x01(\x02R\x02yM\
    \x12\x0f\n\x03z_m\x18\x03\x20\x01(\x02R\x02zM\"\\\n\tAngleBody\x12\x19\n\
    \x08roll_rad\x18\x01\x20\x01(\x02R\x07rollRad\x12\x1b\n\tpitch_rad\x18\
    \x02\x20\x01(\x02R\x08pitchRad\x12\x17\n\x07yaw_rad\x18\x03\x20\x01(\x02\
    R\x06yawRad\"G\n\tSpeedBody\x12\x12\n\x05x_m_s\x18\x01\x20\x01(\x02R\x03\
    xMS\x12\x12\n\x05y_m_s\x18\x02\x20\x01(\x02R\x03yMS\x12\x12\n\x05z_m_s\
    \x18\x03\x20\x01(\x02R\x03zMS\"o\n\x13AngularVelocityBody\x12\x1c\n\nrol\
    l_rad_s\x18\x01\x20\x01(\x02R\x08rollRadS\x12\x1e\n\x0bpitch_rad_s\x18\
    \x02\x20\x01(\x02R\tpitchRadS\x12\x1a\n\tyaw_rad_s\x18\x03\x20\x01(\x02R\
    \x07yawRadS\"9\n\nCovariance\x12+\n\x11covariance_matrix\x18\x01\x20\x03\
    (\x02R\x10covarianceMatrix\"D\n\nQuaternion\x12\x0c\n\x01w\x18\x01\x20\
    \x01(\x02R\x01w\x12\x0c\n\x01x\x18\x02\x20\x01(\x02R\x01x\x12\x0c\n\x01y\
    \x18\x03\x20\x01(\x02R\x01y\x12\x0c\n\x01z\x18\x04\x20\x01(\x02R\x01z\"\
    \xcd\x01\n\x0bMocapResult\x12<\n\x06result\x18\x01\x20\x01(\x0e2$.mavsdk\
    .rpc.mocap.MocapResult.ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\
    \x20\x01(\tR\tresultStr\"a\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\
    \x0b\n\x07SUCCESS\x10\x01\x12\r\n\tNO_SYSTEM\x10\x02\x12\x14\n\x10CONNEC\
    TION_ERROR\x10\x03\x12\x18\n\x14INVALID_REQUEST_DATA\x10\x042\xfb\x02\n\
    \x0cMocapService\x12\x86\x01\n\x19SetVisionPositionEstimate\x122.mavsdk.\
    rpc.mocap.SetVisionPositionEstimateRequest\x1a3.mavsdk.rpc.mocap.SetVisi\
    onPositionEstimateResponse\"\0\x12\x83\x01\n\x18SetAttitudePositionMocap\
    \x121.mavsdk.rpc.mocap.SetAttitudePositionMocapRequest\x1a2.mavsdk.rpc.m\
    ocap.SetAttitudePositionMocapResponse\"\0\x12\\\n\x0bSetOdometry\x12$.ma\
    vsdk.rpc.mocap.SetOdometryRequest\x1a%.mavsdk.rpc.mocap.SetOdometryRespo\
    nse\"\0B\x1d\n\x0fio.mavsdk.mocapB\nMocapProtoJ\x8c7\n\x07\x12\x05\0\0\
    \x90\x01\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \x08\x18\n\x08\n\x01\x08\x12\x03\x04\0(\n\x0b\n\x04\x08\xe7\x07\0\x12\
    \x03\x04\0(\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x04\x07\x13\n\r\n\x06\
    \x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\x07\x08\xe7\x07\0\x02\0\
    \x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x04\x16'\
    \n\x08\n\x01\x08\x12\x03\x05\0+\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x05\
    \0+\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\x07\x1b\n\r\n\x06\x08\
    \xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\
    \x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\x05\x1e\
    *\n\xac\x01\n\x02\x06\0\x12\x04\x0c\0\x13\x01\x1a\x9f\x01*\n\x20Motion\
    \x20Capture\x20allow\x20vehicles\x20to\x20navigate\x20when\x20a\x20globa\
    l\n\x20position\x20source\x20is\x20unavailable\x20or\x20unreliable\n\x20\
    (e.g.\x20indoors,\x20or\x20when\x20flying\x20under\x20a\x20bridge.\x20et\
    c.).\n\n\n\n\x03\x06\0\x01\x12\x03\x0c\x08\x14\nK\n\x04\x06\0\x02\0\x12\
    \x03\x0e\x04q\x1a>\x20Send\x20Global\x20position/attitude\x20estimate\
    \x20from\x20a\x20vision\x20source.\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\
    \x0e\x08!\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0e\"B\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\x0eLm\n9\n\x04\x06\0\x02\x01\x12\x03\x10\x04n\x1a,\
    \x20Send\x20motion\x20capture\x20attitude\x20and\x20position.\n\n\x0c\n\
    \x05\x06\0\x02\x01\x01\x12\x03\x10\x08\x20\n\x0c\n\x05\x06\0\x02\x01\x02\
    \x12\x03\x10!@\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x10Jj\nD\n\x04\x06\
    \0\x02\x02\x12\x03\x12\x04G\x1a7\x20Send\x20odometry\x20information\x20w\
    ith\x20an\x20external\x20interface.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\
    \x03\x12\x08\x13\n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x12\x14&\n\x0c\n\
    \x05\x06\0\x02\x02\x03\x12\x03\x120C\n\n\n\x02\x04\0\x12\x04\x15\0\x17\
    \x01\n\n\n\x03\x04\0\x01\x12\x03\x15\x08(\n\x0b\n\x04\x04\0\x02\0\x12\
    \x03\x16\x048\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x16\x04\x15*\n\x0c\n\x05\
    \x04\0\x02\0\x06\x12\x03\x16\x04\x1a\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\
    \x16\x1b3\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1667\n\n\n\x02\x04\x01\
    \x12\x04\x18\0\x1a\x01\n\n\n\x03\x04\x01\x01\x12\x03\x18\x08)\n\x0b\n\
    \x04\x04\x01\x02\0\x12\x03\x19\x04!\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\
    \x19\x04\x18+\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x19\x04\x0f\n\x0c\n\
    \x05\x04\x01\x02\0\x01\x12\x03\x19\x10\x1c\n\x0c\n\x05\x04\x01\x02\0\x03\
    \x12\x03\x19\x1f\x20\n\n\n\x02\x04\x02\x12\x04\x1c\0\x1e\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\x1c\x08'\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x1d\x046\
    \n\r\n\x05\x04\x02\x02\0\x04\x12\x04\x1d\x04\x1c)\n\x0c\n\x05\x04\x02\
    \x02\0\x06\x12\x03\x1d\x04\x19\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x1d\
    \x1a1\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x1d45\n\n\n\x02\x04\x03\x12\
    \x04\x1f\0!\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1f\x08(\n\x0b\n\x04\x04\
    \x03\x02\0\x12\x03\x20\x04!\n\r\n\x05\x04\x03\x02\0\x04\x12\x04\x20\x04\
    \x1f*\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x20\x04\x0f\n\x0c\n\x05\x04\
    \x03\x02\0\x01\x12\x03\x20\x10\x1c\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03\
    \x20\x1f\x20\n\n\n\x02\x04\x04\x12\x04#\0%\x01\n\n\n\x03\x04\x04\x01\x12\
    \x03#\x08\x1a\n\x0b\n\x04\x04\x04\x02\0\x12\x03$\x04\x1a\n\r\n\x05\x04\
    \x04\x02\0\x04\x12\x04$\x04#\x1c\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03$\
    \x04\x0c\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x03$\r\x15\n\x0c\n\x05\x04\
    \x04\x02\0\x03\x12\x03$\x18\x19\n\n\n\x02\x04\x05\x12\x04&\0(\x01\n\n\n\
    \x03\x04\x05\x01\x12\x03&\x08\x1b\n\x0b\n\x04\x04\x05\x02\0\x12\x03'\x04\
    !\n\r\n\x05\x04\x05\x02\0\x04\x12\x04'\x04&\x1d\n\x0c\n\x05\x04\x05\x02\
    \0\x06\x12\x03'\x04\x0f\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03'\x10\x1c\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03'\x1f\x20\nE\n\x02\x04\x06\x12\x04+\
    \00\x01\x1a9\x20Global\x20position/attitude\x20estimate\x20from\x20a\x20\
    vision\x20source.\n\n\n\n\x03\x04\x06\x01\x12\x03+\x08\x1e\nX\n\x04\x04\
    \x06\x02\0\x12\x03,\x04\x19\"K\x20PositionBody\x20frame\x20timestamp\x20\
    UNIX\x20Epoch\x20time\x20(0\x20to\x20use\x20Backend\x20timestamp)\n\n\r\
    \n\x05\x04\x06\x02\0\x04\x12\x04,\x04+\x20\n\x0c\n\x05\x04\x06\x02\0\x05\
    \x12\x03,\x04\n\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03,\x0b\x14\n\x0c\n\
    \x05\x04\x06\x02\0\x03\x12\x03,\x17\x18\n\"\n\x04\x04\x06\x02\x01\x12\
    \x03-\x04#\"\x15\x20Global\x20position\x20(m)\n\n\r\n\x05\x04\x06\x02\
    \x01\x04\x12\x04-\x04,\x19\n\x0c\n\x05\x04\x06\x02\x01\x06\x12\x03-\x04\
    \x10\n\x0c\n\x05\x04\x06\x02\x01\x01\x12\x03-\x11\x1e\n\x0c\n\x05\x04\
    \x06\x02\x01\x03\x12\x03-!\"\n\x20\n\x04\x04\x06\x02\x02\x12\x03.\x04\
    \x1d\"\x13\x20Body\x20angle\x20(rad).\n\n\r\n\x05\x04\x06\x02\x02\x04\
    \x12\x04.\x04-#\n\x0c\n\x05\x04\x06\x02\x02\x06\x12\x03.\x04\r\n\x0c\n\
    \x05\x04\x06\x02\x02\x01\x12\x03.\x0e\x18\n\x0c\n\x05\x04\x06\x02\x02\
    \x03\x12\x03.\x1b\x1c\n,\n\x04\x04\x06\x02\x03\x12\x03/\x04#\"\x1f\x20Po\
    se\x20cross-covariance\x20matrix.\n\n\r\n\x05\x04\x06\x02\x03\x04\x12\
    \x04/\x04.\x1d\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03/\x04\x0e\n\x0c\n\
    \x05\x04\x06\x02\x03\x01\x12\x03/\x0f\x1e\n\x0c\n\x05\x04\x06\x02\x03\
    \x03\x12\x03/!\"\n2\n\x02\x04\x07\x12\x043\08\x01\x1a&\x20Motion\x20capt\
    ure\x20attitude\x20and\x20position\n\n\n\n\x03\x04\x07\x01\x12\x033\x08\
    \x1d\nX\n\x04\x04\x07\x02\0\x12\x034\x04\x19\"K\x20PositionBody\x20frame\
    \x20timestamp\x20UNIX\x20Epoch\x20time\x20(0\x20to\x20use\x20Backend\x20\
    timestamp)\n\n\r\n\x05\x04\x07\x02\0\x04\x12\x044\x043\x1f\n\x0c\n\x05\
    \x04\x07\x02\0\x05\x12\x034\x04\n\n\x0c\n\x05\x04\x07\x02\0\x01\x12\x034\
    \x0b\x14\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x034\x17\x18\nR\n\x04\x04\x07\
    \x02\x01\x12\x035\x04\x15\"E\x20Attitude\x20quaternion\x20(w,\x20x,\x20y\
    ,\x20z\x20order,\x20zero-rotation\x20is\x201,\x200,\x200,\x200)\n\n\r\n\
    \x05\x04\x07\x02\x01\x04\x12\x045\x044\x19\n\x0c\n\x05\x04\x07\x02\x01\
    \x06\x12\x035\x04\x0e\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x035\x0f\x10\n\
    \x0c\n\x05\x04\x07\x02\x01\x03\x12\x035\x13\x14\n\"\n\x04\x04\x07\x02\
    \x02\x12\x036\x04#\"\x15\x20Body\x20Position\x20(NED)\n\n\r\n\x05\x04\
    \x07\x02\x02\x04\x12\x046\x045\x15\n\x0c\n\x05\x04\x07\x02\x02\x06\x12\
    \x036\x04\x10\n\x0c\n\x05\x04\x07\x02\x02\x01\x12\x036\x11\x1e\n\x0c\n\
    \x05\x04\x07\x02\x02\x03\x12\x036!\"\n,\n\x04\x04\x07\x02\x03\x12\x037\
    \x04#\"\x1f\x20Pose\x20cross-covariance\x20matrix.\n\n\r\n\x05\x04\x07\
    \x02\x03\x04\x12\x047\x046#\n\x0c\n\x05\x04\x07\x02\x03\x06\x12\x037\x04\
    \x0e\n\x0c\n\x05\x04\x07\x02\x03\x01\x12\x037\x0f\x1e\n\x0c\n\x05\x04\
    \x07\x02\x03\x03\x12\x037!\"\n^\n\x02\x04\x08\x12\x04;\0K\x01\x1aR\x20Od\
    ometry\x20message\x20to\x20communicate\x20odometry\x20information\x20wit\
    h\x20an\x20external\x20interface.\n\n\n\n\x03\x04\x08\x01\x12\x03;\x08\
    \x10\n\x20\n\x04\x04\x08\x04\0\x12\x04=\x04A\x05\x1a\x12\x20Mavlink\x20f\
    rame\x20id\n\n\x0c\n\x05\x04\x08\x04\0\x01\x12\x03=\t\x11\n\"\n\x06\x04\
    \x08\x04\0\x02\0\x12\x03>\x08\x11\"\x13\x20Stub\x20for\x20Protobuf\n\n\
    \x0e\n\x07\x04\x08\x04\0\x02\0\x01\x12\x03>\x08\x0c\n\x0e\n\x07\x04\x08\
    \x04\0\x02\0\x02\x12\x03>\x0f\x10\n\x7f\n\x06\x04\x08\x04\0\x02\x01\x12\
    \x03?\x08\x17\"p\x20Odometry\x20local\x20coordinate\x20frame\x20of\x20da\
    ta\x20given\x20by\x20a\x20motion\x20capture\x20system,\x20Z-down\x20(x:\
    \x20north,\x20y:\x20east,\x20z:\x20down).\n\n\x0e\n\x07\x04\x08\x04\0\
    \x02\x01\x01\x12\x03?\x08\x11\n\x0e\n\x07\x04\x08\x04\0\x02\x01\x02\x12\
    \x03?\x14\x16\n\xef\x01\n\x06\x04\x08\x04\0\x02\x02\x12\x03@\x08\x17\"\
    \xdf\x01\x20Forward,\x20Right,\x20Down\x20coordinate\x20frame.\x20This\
    \x20is\x20a\x20local\x20frame\x20with\x20Z-down\x20and\x20arbitrary\x20F\
    /R\x20alignment\x20(i.e.\x20not\x20aligned\x20with\x20NED/earth\x20frame\
    ).\x20Replacement\x20for\x20MAV_FRAME_MOCAP_NED,\x20MAV_FRAME_VISION_NED\
    ,\x20MAV_FRAME_ESTIM_NED.\n\n\x0e\n\x07\x04\x08\x04\0\x02\x02\x01\x12\
    \x03@\x08\x11\n\x0e\n\x07\x04\x08\x04\0\x02\x02\x02\x12\x03@\x14\x16\n6\
    \n\x04\x04\x08\x02\0\x12\x03C\x04\x19\")\x20Timestamp\x20(0\x20to\x20use\
    \x20Backend\x20timestamp).\n\n\r\n\x05\x04\x08\x02\0\x04\x12\x04C\x04A\
    \x05\n\x0c\n\x05\x04\x08\x02\0\x05\x12\x03C\x04\n\n\x0c\n\x05\x04\x08\
    \x02\0\x01\x12\x03C\x0b\x14\n\x0c\n\x05\x04\x08\x02\0\x03\x12\x03C\x17\
    \x18\n?\n\x04\x04\x08\x02\x01\x12\x03D\x04\x1a\"2\x20Coordinate\x20frame\
    \x20of\x20reference\x20for\x20the\x20pose\x20data.\n\n\r\n\x05\x04\x08\
    \x02\x01\x04\x12\x04D\x04C\x19\n\x0c\n\x05\x04\x08\x02\x01\x06\x12\x03D\
    \x04\x0c\n\x0c\n\x05\x04\x08\x02\x01\x01\x12\x03D\r\x15\n\x0c\n\x05\x04\
    \x08\x02\x01\x03\x12\x03D\x18\x19\n\x1d\n\x04\x04\x08\x02\x02\x12\x03E\
    \x04#\"\x10\x20Body\x20Position.\n\n\r\n\x05\x04\x08\x02\x02\x04\x12\x04\
    E\x04D\x1a\n\x0c\n\x05\x04\x08\x02\x02\x06\x12\x03E\x04\x10\n\x0c\n\x05\
    \x04\x08\x02\x02\x01\x12\x03E\x11\x1e\n\x0c\n\x05\x04\x08\x02\x02\x03\
    \x12\x03E!\"\nP\n\x04\x04\x08\x02\x03\x12\x03F\x04\x15\"C\x20Quaternion\
    \x20components,\x20w,\x20x,\x20y,\x20z\x20(1\x200\x200\x200\x20is\x20the\
    \x20null-rotation).\n\n\r\n\x05\x04\x08\x02\x03\x04\x12\x04F\x04E#\n\x0c\
    \n\x05\x04\x08\x02\x03\x06\x12\x03F\x04\x0e\n\x0c\n\x05\x04\x08\x02\x03\
    \x01\x12\x03F\x0f\x10\n\x0c\n\x05\x04\x08\x02\x03\x03\x12\x03F\x13\x14\n\
    \"\n\x04\x04\x08\x02\x04\x12\x03G\x04\x1d\"\x15\x20Linear\x20speed\x20(m\
    /s).\n\n\r\n\x05\x04\x08\x02\x04\x04\x12\x04G\x04F\x15\n\x0c\n\x05\x04\
    \x08\x02\x04\x06\x12\x03G\x04\r\n\x0c\n\x05\x04\x08\x02\x04\x01\x12\x03G\
    \x0e\x18\n\x0c\n\x05\x04\x08\x02\x04\x03\x12\x03G\x1b\x1c\n%\n\x04\x04\
    \x08\x02\x05\x12\x03H\x042\"\x18\x20Angular\x20speed\x20(rad/s).\n\n\r\n\
    \x05\x04\x08\x02\x05\x04\x12\x04H\x04G\x1d\n\x0c\n\x05\x04\x08\x02\x05\
    \x06\x12\x03H\x04\x17\n\x0c\n\x05\x04\x08\x02\x05\x01\x12\x03H\x18-\n\
    \x0c\n\x05\x04\x08\x02\x05\x03\x12\x03H01\n,\n\x04\x04\x08\x02\x06\x12\
    \x03I\x04#\"\x1f\x20Pose\x20cross-covariance\x20matrix.\n\n\r\n\x05\x04\
    \x08\x02\x06\x04\x12\x04I\x04H2\n\x0c\n\x05\x04\x08\x02\x06\x06\x12\x03I\
    \x04\x0e\n\x0c\n\x05\x04\x08\x02\x06\x01\x12\x03I\x0f\x1e\n\x0c\n\x05\
    \x04\x08\x02\x06\x03\x12\x03I!\"\n0\n\x04\x04\x08\x02\x07\x12\x03J\x04'\
    \"#\x20Velocity\x20cross-covariance\x20matrix.\n\n\r\n\x05\x04\x08\x02\
    \x07\x04\x12\x04J\x04I#\n\x0c\n\x05\x04\x08\x02\x07\x06\x12\x03J\x04\x0e\
    \n\x0c\n\x05\x04\x08\x02\x07\x01\x12\x03J\x0f\"\n\x0c\n\x05\x04\x08\x02\
    \x07\x03\x12\x03J%&\n\x20\n\x02\x04\t\x12\x04N\0R\x01\x1a\x14\x20Body\
    \x20position\x20type\n\n\n\n\x03\x04\t\x01\x12\x03N\x08\x14\n$\n\x04\x04\
    \t\x02\0\x12\x03O\x04\x12\"\x17\x20X\x20position\x20in\x20metres.\n\n\r\
    \n\x05\x04\t\x02\0\x04\x12\x04O\x04N\x16\n\x0c\n\x05\x04\t\x02\0\x05\x12\
    \x03O\x04\t\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03O\n\r\n\x0c\n\x05\x04\t\
    \x02\0\x03\x12\x03O\x10\x11\n$\n\x04\x04\t\x02\x01\x12\x03P\x04\x12\"\
    \x17\x20Y\x20position\x20in\x20metres.\n\n\r\n\x05\x04\t\x02\x01\x04\x12\
    \x04P\x04O\x12\n\x0c\n\x05\x04\t\x02\x01\x05\x12\x03P\x04\t\n\x0c\n\x05\
    \x04\t\x02\x01\x01\x12\x03P\n\r\n\x0c\n\x05\x04\t\x02\x01\x03\x12\x03P\
    \x10\x11\n$\n\x04\x04\t\x02\x02\x12\x03Q\x04\x12\"\x17\x20Z\x20position\
    \x20in\x20metres.\n\n\r\n\x05\x04\t\x02\x02\x04\x12\x04Q\x04P\x12\n\x0c\
    \n\x05\x04\t\x02\x02\x05\x12\x03Q\x04\t\n\x0c\n\x05\x04\t\x02\x02\x01\
    \x12\x03Q\n\r\n\x0c\n\x05\x04\t\x02\x02\x03\x12\x03Q\x10\x11\n\x1d\n\x02\
    \x04\n\x12\x04U\0Y\x01\x1a\x11\x20Body\x20angle\x20type\n\n\n\n\x03\x04\
    \n\x01\x12\x03U\x08\x11\n%\n\x04\x04\n\x02\0\x12\x03V\x04\x17\"\x18\x20R\
    oll\x20angle\x20in\x20radians.\n\n\r\n\x05\x04\n\x02\0\x04\x12\x04V\x04U\
    \x13\n\x0c\n\x05\x04\n\x02\0\x05\x12\x03V\x04\t\n\x0c\n\x05\x04\n\x02\0\
    \x01\x12\x03V\n\x12\n\x0c\n\x05\x04\n\x02\0\x03\x12\x03V\x15\x16\n&\n\
    \x04\x04\n\x02\x01\x12\x03W\x04\x18\"\x19\x20Pitch\x20angle\x20in\x20rad\
    ians.\n\n\r\n\x05\x04\n\x02\x01\x04\x12\x04W\x04V\x17\n\x0c\n\x05\x04\n\
    \x02\x01\x05\x12\x03W\x04\t\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03W\n\x13\
    \n\x0c\n\x05\x04\n\x02\x01\x03\x12\x03W\x16\x17\n$\n\x04\x04\n\x02\x02\
    \x12\x03X\x04\x16\"\x17\x20Yaw\x20angle\x20in\x20radians.\n\n\r\n\x05\
    \x04\n\x02\x02\x04\x12\x04X\x04W\x18\n\x0c\n\x05\x04\n\x02\x02\x05\x12\
    \x03X\x04\t\n\x0c\n\x05\x04\n\x02\x02\x01\x12\x03X\n\x11\n\x0c\n\x05\x04\
    \n\x02\x02\x03\x12\x03X\x14\x15\nU\n\x02\x04\x0b\x12\x04\\\0`\x01\x1aI\
    \x20Speed\x20type,\x20represented\x20in\x20the\x20Body\x20(X\x20Y\x20Z)\
    \x20frame\x20and\x20in\x20metres/second.\n\n\n\n\x03\x04\x0b\x01\x12\x03\
    \\\x08\x11\n.\n\x04\x04\x0b\x02\0\x12\x03]\x04\x14\"!\x20Velocity\x20in\
    \x20X\x20in\x20metres/second.\n\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04]\x04\
    \\\x13\n\x0c\n\x05\x04\x0b\x02\0\x05\x12\x03]\x04\t\n\x0c\n\x05\x04\x0b\
    \x02\0\x01\x12\x03]\n\x0f\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03]\x12\x13\
    \n.\n\x04\x04\x0b\x02\x01\x12\x03^\x04\x14\"!\x20Velocity\x20in\x20Y\x20\
    in\x20metres/second.\n\n\r\n\x05\x04\x0b\x02\x01\x04\x12\x04^\x04]\x14\n\
    \x0c\n\x05\x04\x0b\x02\x01\x05\x12\x03^\x04\t\n\x0c\n\x05\x04\x0b\x02\
    \x01\x01\x12\x03^\n\x0f\n\x0c\n\x05\x04\x0b\x02\x01\x03\x12\x03^\x12\x13\
    \n.\n\x04\x04\x0b\x02\x02\x12\x03_\x04\x14\"!\x20Velocity\x20in\x20Z\x20\
    in\x20metres/second.\n\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04_\x04^\x14\n\
    \x0c\n\x05\x04\x0b\x02\x02\x05\x12\x03_\x04\t\n\x0c\n\x05\x04\x0b\x02\
    \x02\x01\x12\x03_\n\x0f\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03_\x12\x13\
    \n#\n\x02\x04\x0c\x12\x04c\0g\x01\x1a\x17\x20Angular\x20velocity\x20type\
    \n\n\n\n\x03\x04\x0c\x01\x12\x03c\x08\x1b\n7\n\x04\x04\x0c\x02\0\x12\x03\
    d\x04\x19\"*\x20Roll\x20angular\x20velocity\x20in\x20radians/second.\n\n\
    \r\n\x05\x04\x0c\x02\0\x04\x12\x04d\x04c\x1d\n\x0c\n\x05\x04\x0c\x02\0\
    \x05\x12\x03d\x04\t\n\x0c\n\x05\x04\x0c\x02\0\x01\x12\x03d\n\x14\n\x0c\n\
    \x05\x04\x0c\x02\0\x03\x12\x03d\x17\x18\n8\n\x04\x04\x0c\x02\x01\x12\x03\
    e\x04\x1a\"+\x20Pitch\x20angular\x20velocity\x20in\x20radians/second.\n\
    \n\r\n\x05\x04\x0c\x02\x01\x04\x12\x04e\x04d\x19\n\x0c\n\x05\x04\x0c\x02\
    \x01\x05\x12\x03e\x04\t\n\x0c\n\x05\x04\x0c\x02\x01\x01\x12\x03e\n\x15\n\
    \x0c\n\x05\x04\x0c\x02\x01\x03\x12\x03e\x18\x19\n6\n\x04\x04\x0c\x02\x02\
    \x12\x03f\x04\x18\")\x20Yaw\x20angular\x20velocity\x20in\x20radians/seco\
    nd.\n\n\r\n\x05\x04\x0c\x02\x02\x04\x12\x04f\x04e\x1a\n\x0c\n\x05\x04\
    \x0c\x02\x02\x05\x12\x03f\x04\t\n\x0c\n\x05\x04\x0c\x02\x02\x01\x12\x03f\
    \n\x13\n\x0c\n\x05\x04\x0c\x02\x02\x03\x12\x03f\x16\x17\n\x8f\x01\n\x02\
    \x04\r\x12\x04n\0p\x01\x1a\x82\x01\x20Covariance\x20type.\n\x20Row-major\
    \x20representation\x20of\x20a\x206x6\x20cross-covariance\x20matrix\n\x20\
    upper\x20right\x20triangle.\n\x20Set\x20first\x20to\x20NaN\x20if\x20unkn\
    own.\n\n\n\n\x03\x04\r\x01\x12\x03n\x08\x12\n\x0b\n\x04\x04\r\x02\0\x12\
    \x03o\x04)\n\x0c\n\x05\x04\r\x02\0\x04\x12\x03o\x04\x0c\n\x0c\n\x05\x04\
    \r\x02\0\x05\x12\x03o\r\x12\n\x0c\n\x05\x04\r\x02\0\x01\x12\x03o\x13$\n\
    \x0c\n\x05\x04\r\x02\0\x03\x12\x03o'(\n\xc5\x02\n\x02\x04\x0e\x12\x05|\0\
    \x81\x01\x01\x1a\xb7\x02\n\x20Quaternion\x20type.\n\n\x20All\x20rotation\
    s\x20and\x20axis\x20systems\x20follow\x20the\x20right-hand\x20rule.\n\
    \x20The\x20Hamilton\x20quaternion\x20product\x20definition\x20is\x20used\
    .\n\x20A\x20zero-rotation\x20quaternion\x20is\x20represented\x20by\x20(1\
    ,0,0,0).\n\x20The\x20quaternion\x20could\x20also\x20be\x20written\x20as\
    \x20w\x20+\x20xi\x20+\x20yj\x20+\x20zk.\n\n\x20For\x20more\x20info\x20se\
    e:\x20https://en.wikipedia.org/wiki/Quaternion\n\n\n\n\x03\x04\x0e\x01\
    \x12\x03|\x08\x12\n4\n\x04\x04\x0e\x02\0\x12\x03}\x04\x10\"'\x20Quaterni\
    on\x20entry\x200,\x20also\x20denoted\x20as\x20a\n\n\r\n\x05\x04\x0e\x02\
    \0\x04\x12\x04}\x04|\x14\n\x0c\n\x05\x04\x0e\x02\0\x05\x12\x03}\x04\t\n\
    \x0c\n\x05\x04\x0e\x02\0\x01\x12\x03}\n\x0b\n\x0c\n\x05\x04\x0e\x02\0\
    \x03\x12\x03}\x0e\x0f\n4\n\x04\x04\x0e\x02\x01\x12\x03~\x04\x10\"'\x20Qu\
    aternion\x20entry\x201,\x20also\x20denoted\x20as\x20b\n\n\r\n\x05\x04\
    \x0e\x02\x01\x04\x12\x04~\x04}\x10\n\x0c\n\x05\x04\x0e\x02\x01\x05\x12\
    \x03~\x04\t\n\x0c\n\x05\x04\x0e\x02\x01\x01\x12\x03~\n\x0b\n\x0c\n\x05\
    \x04\x0e\x02\x01\x03\x12\x03~\x0e\x0f\n4\n\x04\x04\x0e\x02\x02\x12\x03\
    \x7f\x04\x10\"'\x20Quaternion\x20entry\x202,\x20also\x20denoted\x20as\
    \x20c\n\n\r\n\x05\x04\x0e\x02\x02\x04\x12\x04\x7f\x04~\x10\n\x0c\n\x05\
    \x04\x0e\x02\x02\x05\x12\x03\x7f\x04\t\n\x0c\n\x05\x04\x0e\x02\x02\x01\
    \x12\x03\x7f\n\x0b\n\x0c\n\x05\x04\x0e\x02\x02\x03\x12\x03\x7f\x0e\x0f\n\
    5\n\x04\x04\x0e\x02\x03\x12\x04\x80\x01\x04\x10\"'\x20Quaternion\x20entr\
    y\x203,\x20also\x20denoted\x20as\x20d\n\n\x0e\n\x05\x04\x0e\x02\x03\x04\
    \x12\x05\x80\x01\x04\x7f\x10\n\r\n\x05\x04\x0e\x02\x03\x05\x12\x04\x80\
    \x01\x04\t\n\r\n\x05\x04\x0e\x02\x03\x01\x12\x04\x80\x01\n\x0b\n\r\n\x05\
    \x04\x0e\x02\x03\x03\x12\x04\x80\x01\x0e\x0f\n\x1c\n\x02\x04\x0f\x12\x06\
    \x84\x01\0\x90\x01\x01\x1a\x0e\x20Result\x20type.\n\n\x0b\n\x03\x04\x0f\
    \x01\x12\x04\x84\x01\x08\x13\n>\n\x04\x04\x0f\x04\0\x12\x06\x86\x01\x04\
    \x8c\x01\x05\x1a.\x20Possible\x20results\x20returned\x20for\x20mocap\x20\
    requests\n\n\r\n\x05\x04\x0f\x04\0\x01\x12\x04\x86\x01\t\x0f\n\x1f\n\x06\
    \x04\x0f\x04\0\x02\0\x12\x04\x87\x01\x08\x14\"\x0f\x20Unknown\x20error\n\
    \n\x0f\n\x07\x04\x0f\x04\0\x02\0\x01\x12\x04\x87\x01\x08\x0f\n\x0f\n\x07\
    \x04\x0f\x04\0\x02\0\x02\x12\x04\x87\x01\x12\x13\n#\n\x06\x04\x0f\x04\0\
    \x02\x01\x12\x04\x88\x01\x08\x14\"\x13\x20Request\x20succeeded\n\n\x0f\n\
    \x07\x04\x0f\x04\0\x02\x01\x01\x12\x04\x88\x01\x08\x0f\n\x0f\n\x07\x04\
    \x0f\x04\0\x02\x01\x02\x12\x04\x88\x01\x12\x13\n(\n\x06\x04\x0f\x04\0\
    \x02\x02\x12\x04\x89\x01\x08\x16\"\x18\x20No\x20system\x20is\x20connecte\
    d\n\n\x0f\n\x07\x04\x0f\x04\0\x02\x02\x01\x12\x04\x89\x01\x08\x11\n\x0f\
    \n\x07\x04\x0f\x04\0\x02\x02\x02\x12\x04\x89\x01\x14\x15\n\"\n\x06\x04\
    \x0f\x04\0\x02\x03\x12\x04\x8a\x01\x08\x1d\"\x12\x20Connection\x20error\
    \n\n\x0f\n\x07\x04\x0f\x04\0\x02\x03\x01\x12\x04\x8a\x01\x08\x18\n\x0f\n\
    \x07\x04\x0f\x04\0\x02\x03\x02\x12\x04\x8a\x01\x1b\x1c\n&\n\x06\x04\x0f\
    \x04\0\x02\x04\x12\x04\x8b\x01\x08!\"\x16\x20Invalid\x20request\x20data\
    \n\n\x0f\n\x07\x04\x0f\x04\0\x02\x04\x01\x12\x04\x8b\x01\x08\x1c\n\x0f\n\
    \x07\x04\x0f\x04\0\x02\x04\x02\x12\x04\x8b\x01\x1f\x20\n!\n\x04\x04\x0f\
    \x02\0\x12\x04\x8e\x01\x04\x16\"\x13\x20Result\x20enum\x20value\n\n\x0f\
    \n\x05\x04\x0f\x02\0\x04\x12\x06\x8e\x01\x04\x8c\x01\x05\n\r\n\x05\x04\
    \x0f\x02\0\x06\x12\x04\x8e\x01\x04\n\n\r\n\x05\x04\x0f\x02\0\x01\x12\x04\
    \x8e\x01\x0b\x11\n\r\n\x05\x04\x0f\x02\0\x03\x12\x04\x8e\x01\x14\x15\nC\
    \n\x04\x04\x0f\x02\x01\x12\x04\x8f\x01\x04\x1a\"5\x20Human-readable\x20E\
    nglish\x20string\x20describing\x20the\x20result\n\n\x0f\n\x05\x04\x0f\
    \x02\x01\x04\x12\x06\x8f\x01\x04\x8e\x01\x16\n\r\n\x05\x04\x0f\x02\x01\
    \x05\x12\x04\x8f\x01\x04\n\n\r\n\x05\x04\x0f\x02\x01\x01\x12\x04\x8f\x01\
    \x0b\x15\n\r\n\x05\x04\x0f\x02\x01\x03\x12\x04\x8f\x01\x18\x19b\x06proto\
    3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
