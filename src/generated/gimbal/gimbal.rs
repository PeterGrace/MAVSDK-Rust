// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `gimbal/gimbal.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SetPitchAndYawRequest {
    // message fields
    pub pitch_deg: f32,
    pub yaw_deg: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetPitchAndYawRequest {
    fn default() -> &'a SetPitchAndYawRequest {
        <SetPitchAndYawRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetPitchAndYawRequest {
    pub fn new() -> SetPitchAndYawRequest {
        ::std::default::Default::default()
    }

    // float pitch_deg = 1;


    pub fn get_pitch_deg(&self) -> f32 {
        self.pitch_deg
    }
    pub fn clear_pitch_deg(&mut self) {
        self.pitch_deg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_pitch_deg(&mut self, v: f32) {
        self.pitch_deg = v;
    }

    // float yaw_deg = 2;


    pub fn get_yaw_deg(&self) -> f32 {
        self.yaw_deg
    }
    pub fn clear_yaw_deg(&mut self) {
        self.yaw_deg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_yaw_deg(&mut self, v: f32) {
        self.yaw_deg = v;
    }
}

impl ::protobuf::Message for SetPitchAndYawRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.pitch_deg = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.yaw_deg = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.pitch_deg != 0. {
            my_size += 5;
        }
        if self.yaw_deg != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.pitch_deg != 0. {
            os.write_float(1, self.pitch_deg)?;
        }
        if self.yaw_deg != 0. {
            os.write_float(2, self.yaw_deg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetPitchAndYawRequest {
        SetPitchAndYawRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "pitch_deg",
                    |m: &SetPitchAndYawRequest| { &m.pitch_deg },
                    |m: &mut SetPitchAndYawRequest| { &mut m.pitch_deg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "yaw_deg",
                    |m: &SetPitchAndYawRequest| { &m.yaw_deg },
                    |m: &mut SetPitchAndYawRequest| { &mut m.yaw_deg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetPitchAndYawRequest>(
                    "SetPitchAndYawRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetPitchAndYawRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetPitchAndYawRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetPitchAndYawRequest,
        };
        unsafe {
            instance.get(SetPitchAndYawRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetPitchAndYawRequest {
    fn clear(&mut self) {
        self.pitch_deg = 0.;
        self.yaw_deg = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetPitchAndYawRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPitchAndYawRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetPitchAndYawResponse {
    // message fields
    pub gimbal_result: ::protobuf::SingularPtrField<GimbalResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetPitchAndYawResponse {
    fn default() -> &'a SetPitchAndYawResponse {
        <SetPitchAndYawResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetPitchAndYawResponse {
    pub fn new() -> SetPitchAndYawResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;


    pub fn get_gimbal_result(&self) -> &GimbalResult {
        self.gimbal_result.as_ref().unwrap_or_else(|| GimbalResult::default_instance())
    }
    pub fn clear_gimbal_result(&mut self) {
        self.gimbal_result.clear();
    }

    pub fn has_gimbal_result(&self) -> bool {
        self.gimbal_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gimbal_result(&mut self, v: GimbalResult) {
        self.gimbal_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gimbal_result(&mut self) -> &mut GimbalResult {
        if self.gimbal_result.is_none() {
            self.gimbal_result.set_default();
        }
        self.gimbal_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_gimbal_result(&mut self) -> GimbalResult {
        self.gimbal_result.take().unwrap_or_else(|| GimbalResult::new())
    }
}

impl ::protobuf::Message for SetPitchAndYawResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gimbal_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gimbal_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gimbal_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gimbal_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetPitchAndYawResponse {
        SetPitchAndYawResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GimbalResult>>(
                    "gimbal_result",
                    |m: &SetPitchAndYawResponse| { &m.gimbal_result },
                    |m: &mut SetPitchAndYawResponse| { &mut m.gimbal_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetPitchAndYawResponse>(
                    "SetPitchAndYawResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetPitchAndYawResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetPitchAndYawResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetPitchAndYawResponse,
        };
        unsafe {
            instance.get(SetPitchAndYawResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetPitchAndYawResponse {
    fn clear(&mut self) {
        self.gimbal_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetPitchAndYawResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetPitchAndYawResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetModeRequest {
    // message fields
    pub gimbal_mode: GimbalMode,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetModeRequest {
    fn default() -> &'a SetModeRequest {
        <SetModeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetModeRequest {
    pub fn new() -> SetModeRequest {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.gimbal.GimbalMode gimbal_mode = 1;


    pub fn get_gimbal_mode(&self) -> GimbalMode {
        self.gimbal_mode
    }
    pub fn clear_gimbal_mode(&mut self) {
        self.gimbal_mode = GimbalMode::YAW_FOLLOW;
    }

    // Param is passed by value, moved
    pub fn set_gimbal_mode(&mut self, v: GimbalMode) {
        self.gimbal_mode = v;
    }
}

impl ::protobuf::Message for SetModeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.gimbal_mode, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.gimbal_mode != GimbalMode::YAW_FOLLOW {
            my_size += ::protobuf::rt::enum_size(1, self.gimbal_mode);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.gimbal_mode != GimbalMode::YAW_FOLLOW {
            os.write_enum(1, self.gimbal_mode.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetModeRequest {
        SetModeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GimbalMode>>(
                    "gimbal_mode",
                    |m: &SetModeRequest| { &m.gimbal_mode },
                    |m: &mut SetModeRequest| { &mut m.gimbal_mode },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetModeRequest>(
                    "SetModeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetModeRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetModeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetModeRequest,
        };
        unsafe {
            instance.get(SetModeRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetModeRequest {
    fn clear(&mut self) {
        self.gimbal_mode = GimbalMode::YAW_FOLLOW;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetModeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetModeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetModeResponse {
    // message fields
    pub gimbal_result: ::protobuf::SingularPtrField<GimbalResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetModeResponse {
    fn default() -> &'a SetModeResponse {
        <SetModeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetModeResponse {
    pub fn new() -> SetModeResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.gimbal.GimbalResult gimbal_result = 1;


    pub fn get_gimbal_result(&self) -> &GimbalResult {
        self.gimbal_result.as_ref().unwrap_or_else(|| GimbalResult::default_instance())
    }
    pub fn clear_gimbal_result(&mut self) {
        self.gimbal_result.clear();
    }

    pub fn has_gimbal_result(&self) -> bool {
        self.gimbal_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_gimbal_result(&mut self, v: GimbalResult) {
        self.gimbal_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_gimbal_result(&mut self) -> &mut GimbalResult {
        if self.gimbal_result.is_none() {
            self.gimbal_result.set_default();
        }
        self.gimbal_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_gimbal_result(&mut self) -> GimbalResult {
        self.gimbal_result.take().unwrap_or_else(|| GimbalResult::new())
    }
}

impl ::protobuf::Message for SetModeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.gimbal_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.gimbal_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.gimbal_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.gimbal_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetModeResponse {
        SetModeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GimbalResult>>(
                    "gimbal_result",
                    |m: &SetModeResponse| { &m.gimbal_result },
                    |m: &mut SetModeResponse| { &mut m.gimbal_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetModeResponse>(
                    "SetModeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetModeResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetModeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetModeResponse,
        };
        unsafe {
            instance.get(SetModeResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetModeResponse {
    fn clear(&mut self) {
        self.gimbal_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetModeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetModeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GimbalResult {
    // message fields
    pub result: GimbalResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GimbalResult {
    fn default() -> &'a GimbalResult {
        <GimbalResult as ::protobuf::Message>::default_instance()
    }
}

impl GimbalResult {
    pub fn new() -> GimbalResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.gimbal.GimbalResult.Result result = 1;


    pub fn get_result(&self) -> GimbalResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = GimbalResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: GimbalResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GimbalResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != GimbalResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != GimbalResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GimbalResult {
        GimbalResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GimbalResult_Result>>(
                    "result",
                    |m: &GimbalResult| { &m.result },
                    |m: &mut GimbalResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &GimbalResult| { &m.result_str },
                    |m: &mut GimbalResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GimbalResult>(
                    "GimbalResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GimbalResult {
        static mut instance: ::protobuf::lazy::Lazy<GimbalResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GimbalResult,
        };
        unsafe {
            instance.get(GimbalResult::new)
        }
    }
}

impl ::protobuf::Clear for GimbalResult {
    fn clear(&mut self) {
        self.result = GimbalResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GimbalResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GimbalResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GimbalResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    ERROR = 2,
    TIMEOUT = 3,
}

impl ::protobuf::ProtobufEnum for GimbalResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GimbalResult_Result> {
        match value {
            0 => ::std::option::Option::Some(GimbalResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(GimbalResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(GimbalResult_Result::ERROR),
            3 => ::std::option::Option::Some(GimbalResult_Result::TIMEOUT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GimbalResult_Result] = &[
            GimbalResult_Result::UNKNOWN,
            GimbalResult_Result::SUCCESS,
            GimbalResult_Result::ERROR,
            GimbalResult_Result::TIMEOUT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("GimbalResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for GimbalResult_Result {
}

impl ::std::default::Default for GimbalResult_Result {
    fn default() -> Self {
        GimbalResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for GimbalResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GimbalMode {
    YAW_FOLLOW = 0,
    YAW_LOCK = 1,
}

impl ::protobuf::ProtobufEnum for GimbalMode {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GimbalMode> {
        match value {
            0 => ::std::option::Option::Some(GimbalMode::YAW_FOLLOW),
            1 => ::std::option::Option::Some(GimbalMode::YAW_LOCK),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GimbalMode] = &[
            GimbalMode::YAW_FOLLOW,
            GimbalMode::YAW_LOCK,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("GimbalMode", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for GimbalMode {
}

impl ::std::default::Default for GimbalMode {
    fn default() -> Self {
        GimbalMode::YAW_FOLLOW
    }
}

impl ::protobuf::reflect::ProtobufValue for GimbalMode {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13gimbal/gimbal.proto\x12\x11mavsdk.rpc.gimbal\"M\n\x15SetPitchAndYa\
    wRequest\x12\x1b\n\tpitch_deg\x18\x01\x20\x01(\x02R\x08pitchDeg\x12\x17\
    \n\x07yaw_deg\x18\x02\x20\x01(\x02R\x06yawDeg\"^\n\x16SetPitchAndYawResp\
    onse\x12D\n\rgimbal_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rpc.gimbal.G\
    imbalResultR\x0cgimbalResult\"P\n\x0eSetModeRequest\x12>\n\x0bgimbal_mod\
    e\x18\x01\x20\x01(\x0e2\x1d.mavsdk.rpc.gimbal.GimbalModeR\ngimbalMode\"W\
    \n\x0fSetModeResponse\x12D\n\rgimbal_result\x18\x01\x20\x01(\x0b2\x1f.ma\
    vsdk.rpc.gimbal.GimbalResultR\x0cgimbalResult\"\xa9\x01\n\x0cGimbalResul\
    t\x12>\n\x06result\x18\x01\x20\x01(\x0e2&.mavsdk.rpc.gimbal.GimbalResult\
    .ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\x20\x01(\tR\tresultStr\
    \":\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SUCCESS\x10\x01\
    \x12\t\n\x05ERROR\x10\x02\x12\x0b\n\x07TIMEOUT\x10\x03**\n\nGimbalMode\
    \x12\x0e\n\nYAW_FOLLOW\x10\0\x12\x0c\n\x08YAW_LOCK\x10\x012\xcc\x01\n\rG\
    imbalService\x12g\n\x0eSetPitchAndYaw\x12(.mavsdk.rpc.gimbal.SetPitchAnd\
    YawRequest\x1a).mavsdk.rpc.gimbal.SetPitchAndYawResponse\"\0\x12R\n\x07S\
    etMode\x12!.mavsdk.rpc.gimbal.SetModeRequest\x1a\".mavsdk.rpc.gimbal.Set\
    ModeResponse\"\0B\x1f\n\x10io.mavsdk.gimbalB\x0bGimbalProtoJ\xc5\x11\n\
    \x06\x12\x04\0\0=\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\
    \x12\x03\x02\x08\x19\n\x08\n\x01\x08\x12\x03\x04\0)\n\x0b\n\x04\x08\xe7\
    \x07\0\x12\x03\x04\0)\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\x04\x07\x13\
    \n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\x07\x08\xe7\
    \x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\0\x07\x12\
    \x03\x04\x16(\n\x08\n\x01\x08\x12\x03\x05\0,\n\x0b\n\x04\x08\xe7\x07\x01\
    \x12\x03\x05\0,\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\x07\x1b\n\r\
    \n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\x08\xe7\x07\
    \x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\x01\x07\x12\
    \x03\x05\x1e+\n,\n\x02\x06\0\x12\x04\x08\0\x1a\x01\x1a\x20\x20Provide\
    \x20control\x20over\x20a\x20gimbal.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\
    \x08\x15\n\xe7\x01\n\x04\x06\0\x02\0\x12\x03\x11\x04P\x1a\xd9\x01\n\n\
    \x20Set\x20gimbal\x20pitch\x20and\x20yaw\x20angles.\n\n\x20This\x20sets\
    \x20the\x20desired\x20pitch\x20and\x20yaw\x20angles\x20of\x20a\x20gimbal\
    .\n\x20Will\x20return\x20when\x20the\x20command\x20is\x20accepted,\x20ho\
    wever,\x20it\x20might\n\x20take\x20the\x20gimbal\x20longer\x20to\x20actu\
    ally\x20be\x20set\x20to\x20the\x20new\x20angles.\n\n\x0c\n\x05\x06\0\x02\
    \0\x01\x12\x03\x11\x08\x16\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\x11\x17,\
    \n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x116L\n\xca\x01\n\x04\x06\0\x02\x01\
    \x12\x03\x19\x04;\x1a\xbc\x01\n\x20Set\x20gimbal\x20mode.\n\n\x20This\
    \x20sets\x20the\x20desired\x20yaw\x20mode\x20of\x20a\x20gimbal.\n\x20Wil\
    l\x20return\x20when\x20the\x20command\x20is\x20accepted.\x20However,\x20\
    it\x20might\n\x20take\x20the\x20gimbal\x20longer\x20to\x20actually\x20be\
    \x20set\x20to\x20the\x20new\x20angles.\n\n\x0c\n\x05\x06\0\x02\x01\x01\
    \x12\x03\x19\x08\x0f\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x19\x10\x1e\n\
    \x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x19(7\n\n\n\x02\x04\0\x12\x04\x1c\0\
    \x1f\x01\n\n\n\x03\x04\0\x01\x12\x03\x1c\x08\x1d\n<\n\x04\x04\0\x02\0\
    \x12\x03\x1d\x04\x18\"/\x20Pitch\x20angle\x20in\x20degrees\x20(negative\
    \x20points\x20down)\n\n\r\n\x05\x04\0\x02\0\x04\x12\x04\x1d\x04\x1c\x1f\
    \n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x1d\x04\t\n\x0c\n\x05\x04\0\x02\0\
    \x01\x12\x03\x1d\n\x13\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x1d\x16\x17\n\
    \\\n\x04\x04\0\x02\x01\x12\x03\x1e\x04\x16\"O\x20Yaw\x20angle\x20in\x20d\
    egrees\x20(positive\x20is\x20clock-wise,\x20range:\x20-180\x20to\x20180\
    \x20or\x200\x20to\x20360)\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x1e\x04\
    \x1d\x18\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x1e\x04\t\n\x0c\n\x05\x04\
    \0\x02\x01\x01\x12\x03\x1e\n\x11\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\
    \x1e\x14\x15\n\n\n\x02\x04\x01\x12\x04\x20\0\"\x01\n\n\n\x03\x04\x01\x01\
    \x12\x03\x20\x08\x1e\n\x0b\n\x04\x04\x01\x02\0\x12\x03!\x04#\n\r\n\x05\
    \x04\x01\x02\0\x04\x12\x04!\x04\x20\x20\n\x0c\n\x05\x04\x01\x02\0\x06\
    \x12\x03!\x04\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03!\x11\x1e\n\x0c\n\
    \x05\x04\x01\x02\0\x03\x12\x03!!\"\n\n\n\x02\x04\x02\x12\x04$\0&\x01\n\n\
    \n\x03\x04\x02\x01\x12\x03$\x08\x16\n\"\n\x04\x04\x02\x02\0\x12\x03%\x04\
    \x1f\"\x15\x20The\x20mode\x20to\x20be\x20set.\n\n\r\n\x05\x04\x02\x02\0\
    \x04\x12\x04%\x04$\x18\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03%\x04\x0e\n\
    \x0c\n\x05\x04\x02\x02\0\x01\x12\x03%\x0f\x1a\n\x0c\n\x05\x04\x02\x02\0\
    \x03\x12\x03%\x1d\x1e\n\n\n\x02\x04\x03\x12\x04'\0)\x01\n\n\n\x03\x04\
    \x03\x01\x12\x03'\x08\x17\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x04#\n\r\n\
    \x05\x04\x03\x02\0\x04\x12\x04(\x04'\x19\n\x0c\n\x05\x04\x03\x02\0\x06\
    \x12\x03(\x04\x10\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\x11\x1e\n\x0c\n\
    \x05\x04\x03\x02\0\x03\x12\x03(!\"\n\x1f\n\x02\x05\0\x12\x04,\0/\x01\x1a\
    \x13\x20Gimbal\x20mode\x20type.\n\n\n\n\x03\x05\0\x01\x12\x03,\x05\x0f\n\
    F\n\x04\x05\0\x02\0\x12\x03-\x04\x13\"9\x20Yaw\x20follow\x20will\x20poin\
    t\x20the\x20gimbal\x20to\x20the\x20vehicle\x20heading\n\n\x0c\n\x05\x05\
    \0\x02\0\x01\x12\x03-\x04\x0e\n\x0c\n\x05\x05\0\x02\0\x02\x12\x03-\x11\
    \x12\nL\n\x04\x05\0\x02\x01\x12\x03.\x04\x11\"?\x20Yaw\x20lock\x20will\
    \x20fix\x20the\x20gimbal\x20poiting\x20to\x20an\x20absolute\x20direction\
    \n\n\x0c\n\x05\x05\0\x02\x01\x01\x12\x03.\x04\x0c\n\x0c\n\x05\x05\0\x02\
    \x01\x02\x12\x03.\x0f\x10\n\x1a\n\x02\x04\x04\x12\x042\0=\x01\x1a\x0e\
    \x20Result\x20type.\n\n\n\n\x03\x04\x04\x01\x12\x032\x08\x14\n>\n\x04\
    \x04\x04\x04\0\x12\x044\x049\x05\x1a0\x20Possible\x20results\x20returned\
    \x20for\x20gimbal\x20commands.\n\n\x0c\n\x05\x04\x04\x04\0\x01\x12\x034\
    \t\x0f\n\x1e\n\x06\x04\x04\x04\0\x02\0\x12\x035\x08\x14\"\x0f\x20Unknown\
    \x20error\n\n\x0e\n\x07\x04\x04\x04\0\x02\0\x01\x12\x035\x08\x0f\n\x0e\n\
    \x07\x04\x04\x04\0\x02\0\x02\x12\x035\x12\x13\n%\n\x06\x04\x04\x04\0\x02\
    \x01\x12\x036\x08\x14\"\x16\x20Command\x20was\x20accepted\n\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x01\x01\x12\x036\x08\x0f\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x01\x02\x12\x036\x12\x13\n3\n\x06\x04\x04\x04\0\x02\x02\x12\x037\
    \x08\x12\"$\x20Error\x20occurred\x20sending\x20the\x20command\n\n\x0e\n\
    \x07\x04\x04\x04\0\x02\x02\x01\x12\x037\x08\r\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x02\x02\x12\x037\x10\x11\n\"\n\x06\x04\x04\x04\0\x02\x03\x12\x038\
    \x08\x14\"\x13\x20Command\x20timed\x20out\n\n\x0e\n\x07\x04\x04\x04\0\
    \x02\x03\x01\x12\x038\x08\x0f\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\x12\
    \x038\x12\x13\n\x20\n\x04\x04\x04\x02\0\x12\x03;\x04\x16\"\x13\x20Result\
    \x20enum\x20value\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04;\x049\x05\n\x0c\
    \n\x05\x04\x04\x02\0\x06\x12\x03;\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\
    \x12\x03;\x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03;\x14\x15\nB\n\
    \x04\x04\x04\x02\x01\x12\x03<\x04\x1a\"5\x20Human-readable\x20English\
    \x20string\x20describing\x20the\x20result\n\n\r\n\x05\x04\x04\x02\x01\
    \x04\x12\x04<\x04;\x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x03<\x04\n\n\
    \x0c\n\x05\x04\x04\x02\x01\x01\x12\x03<\x0b\x15\n\x0c\n\x05\x04\x04\x02\
    \x01\x03\x12\x03<\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
