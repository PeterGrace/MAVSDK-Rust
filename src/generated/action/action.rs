// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `action/action.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct ArmRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ArmRequest {
    fn default() -> &'a ArmRequest {
        <ArmRequest as ::protobuf::Message>::default_instance()
    }
}

impl ArmRequest {
    pub fn new() -> ArmRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ArmRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArmRequest {
        ArmRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ArmRequest>(
                    "ArmRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ArmRequest {
        static mut instance: ::protobuf::lazy::Lazy<ArmRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArmRequest,
        };
        unsafe {
            instance.get(ArmRequest::new)
        }
    }
}

impl ::protobuf::Clear for ArmRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArmRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ArmResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ArmResponse {
    fn default() -> &'a ArmResponse {
        <ArmResponse as ::protobuf::Message>::default_instance()
    }
}

impl ArmResponse {
    pub fn new() -> ArmResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for ArmResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ArmResponse {
        ArmResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &ArmResponse| { &m.action_result },
                    |m: &mut ArmResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ArmResponse>(
                    "ArmResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ArmResponse {
        static mut instance: ::protobuf::lazy::Lazy<ArmResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ArmResponse,
        };
        unsafe {
            instance.get(ArmResponse::new)
        }
    }
}

impl ::protobuf::Clear for ArmResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ArmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ArmResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisarmRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisarmRequest {
    fn default() -> &'a DisarmRequest {
        <DisarmRequest as ::protobuf::Message>::default_instance()
    }
}

impl DisarmRequest {
    pub fn new() -> DisarmRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for DisarmRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisarmRequest {
        DisarmRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<DisarmRequest>(
                    "DisarmRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisarmRequest {
        static mut instance: ::protobuf::lazy::Lazy<DisarmRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisarmRequest,
        };
        unsafe {
            instance.get(DisarmRequest::new)
        }
    }
}

impl ::protobuf::Clear for DisarmRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisarmRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisarmRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct DisarmResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a DisarmResponse {
    fn default() -> &'a DisarmResponse {
        <DisarmResponse as ::protobuf::Message>::default_instance()
    }
}

impl DisarmResponse {
    pub fn new() -> DisarmResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for DisarmResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> DisarmResponse {
        DisarmResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &DisarmResponse| { &m.action_result },
                    |m: &mut DisarmResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<DisarmResponse>(
                    "DisarmResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static DisarmResponse {
        static mut instance: ::protobuf::lazy::Lazy<DisarmResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const DisarmResponse,
        };
        unsafe {
            instance.get(DisarmResponse::new)
        }
    }
}

impl ::protobuf::Clear for DisarmResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for DisarmResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for DisarmResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TakeoffRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TakeoffRequest {
    fn default() -> &'a TakeoffRequest {
        <TakeoffRequest as ::protobuf::Message>::default_instance()
    }
}

impl TakeoffRequest {
    pub fn new() -> TakeoffRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TakeoffRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TakeoffRequest {
        TakeoffRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TakeoffRequest>(
                    "TakeoffRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TakeoffRequest {
        static mut instance: ::protobuf::lazy::Lazy<TakeoffRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TakeoffRequest,
        };
        unsafe {
            instance.get(TakeoffRequest::new)
        }
    }
}

impl ::protobuf::Clear for TakeoffRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TakeoffRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TakeoffRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TakeoffResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TakeoffResponse {
    fn default() -> &'a TakeoffResponse {
        <TakeoffResponse as ::protobuf::Message>::default_instance()
    }
}

impl TakeoffResponse {
    pub fn new() -> TakeoffResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for TakeoffResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TakeoffResponse {
        TakeoffResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &TakeoffResponse| { &m.action_result },
                    |m: &mut TakeoffResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TakeoffResponse>(
                    "TakeoffResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TakeoffResponse {
        static mut instance: ::protobuf::lazy::Lazy<TakeoffResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TakeoffResponse,
        };
        unsafe {
            instance.get(TakeoffResponse::new)
        }
    }
}

impl ::protobuf::Clear for TakeoffResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TakeoffResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TakeoffResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LandRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LandRequest {
    fn default() -> &'a LandRequest {
        <LandRequest as ::protobuf::Message>::default_instance()
    }
}

impl LandRequest {
    pub fn new() -> LandRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for LandRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LandRequest {
        LandRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<LandRequest>(
                    "LandRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LandRequest {
        static mut instance: ::protobuf::lazy::Lazy<LandRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LandRequest,
        };
        unsafe {
            instance.get(LandRequest::new)
        }
    }
}

impl ::protobuf::Clear for LandRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LandRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LandRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LandResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a LandResponse {
    fn default() -> &'a LandResponse {
        <LandResponse as ::protobuf::Message>::default_instance()
    }
}

impl LandResponse {
    pub fn new() -> LandResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for LandResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LandResponse {
        LandResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &LandResponse| { &m.action_result },
                    |m: &mut LandResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LandResponse>(
                    "LandResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LandResponse {
        static mut instance: ::protobuf::lazy::Lazy<LandResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LandResponse,
        };
        unsafe {
            instance.get(LandResponse::new)
        }
    }
}

impl ::protobuf::Clear for LandResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LandResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LandResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RebootRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RebootRequest {
    fn default() -> &'a RebootRequest {
        <RebootRequest as ::protobuf::Message>::default_instance()
    }
}

impl RebootRequest {
    pub fn new() -> RebootRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for RebootRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RebootRequest {
        RebootRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<RebootRequest>(
                    "RebootRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RebootRequest {
        static mut instance: ::protobuf::lazy::Lazy<RebootRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RebootRequest,
        };
        unsafe {
            instance.get(RebootRequest::new)
        }
    }
}

impl ::protobuf::Clear for RebootRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RebootRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RebootRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct RebootResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a RebootResponse {
    fn default() -> &'a RebootResponse {
        <RebootResponse as ::protobuf::Message>::default_instance()
    }
}

impl RebootResponse {
    pub fn new() -> RebootResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for RebootResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> RebootResponse {
        RebootResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &RebootResponse| { &m.action_result },
                    |m: &mut RebootResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<RebootResponse>(
                    "RebootResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static RebootResponse {
        static mut instance: ::protobuf::lazy::Lazy<RebootResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const RebootResponse,
        };
        unsafe {
            instance.get(RebootResponse::new)
        }
    }
}

impl ::protobuf::Clear for RebootResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for RebootResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for RebootResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KillRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KillRequest {
    fn default() -> &'a KillRequest {
        <KillRequest as ::protobuf::Message>::default_instance()
    }
}

impl KillRequest {
    pub fn new() -> KillRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KillRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KillRequest {
        KillRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<KillRequest>(
                    "KillRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KillRequest {
        static mut instance: ::protobuf::lazy::Lazy<KillRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KillRequest,
        };
        unsafe {
            instance.get(KillRequest::new)
        }
    }
}

impl ::protobuf::Clear for KillRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KillRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KillResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KillResponse {
    fn default() -> &'a KillResponse {
        <KillResponse as ::protobuf::Message>::default_instance()
    }
}

impl KillResponse {
    pub fn new() -> KillResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for KillResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KillResponse {
        KillResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &KillResponse| { &m.action_result },
                    |m: &mut KillResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<KillResponse>(
                    "KillResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static KillResponse {
        static mut instance: ::protobuf::lazy::Lazy<KillResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const KillResponse,
        };
        unsafe {
            instance.get(KillResponse::new)
        }
    }
}

impl ::protobuf::Clear for KillResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KillResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReturnToLaunchRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReturnToLaunchRequest {
    fn default() -> &'a ReturnToLaunchRequest {
        <ReturnToLaunchRequest as ::protobuf::Message>::default_instance()
    }
}

impl ReturnToLaunchRequest {
    pub fn new() -> ReturnToLaunchRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ReturnToLaunchRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReturnToLaunchRequest {
        ReturnToLaunchRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ReturnToLaunchRequest>(
                    "ReturnToLaunchRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReturnToLaunchRequest {
        static mut instance: ::protobuf::lazy::Lazy<ReturnToLaunchRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReturnToLaunchRequest,
        };
        unsafe {
            instance.get(ReturnToLaunchRequest::new)
        }
    }
}

impl ::protobuf::Clear for ReturnToLaunchRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReturnToLaunchRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReturnToLaunchRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ReturnToLaunchResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ReturnToLaunchResponse {
    fn default() -> &'a ReturnToLaunchResponse {
        <ReturnToLaunchResponse as ::protobuf::Message>::default_instance()
    }
}

impl ReturnToLaunchResponse {
    pub fn new() -> ReturnToLaunchResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for ReturnToLaunchResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ReturnToLaunchResponse {
        ReturnToLaunchResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &ReturnToLaunchResponse| { &m.action_result },
                    |m: &mut ReturnToLaunchResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ReturnToLaunchResponse>(
                    "ReturnToLaunchResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ReturnToLaunchResponse {
        static mut instance: ::protobuf::lazy::Lazy<ReturnToLaunchResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ReturnToLaunchResponse,
        };
        unsafe {
            instance.get(ReturnToLaunchResponse::new)
        }
    }
}

impl ::protobuf::Clear for ReturnToLaunchResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ReturnToLaunchResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ReturnToLaunchResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToFixedWingRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToFixedWingRequest {
    fn default() -> &'a TransitionToFixedWingRequest {
        <TransitionToFixedWingRequest as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToFixedWingRequest {
    pub fn new() -> TransitionToFixedWingRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TransitionToFixedWingRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToFixedWingRequest {
        TransitionToFixedWingRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TransitionToFixedWingRequest>(
                    "TransitionToFixedWingRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransitionToFixedWingRequest {
        static mut instance: ::protobuf::lazy::Lazy<TransitionToFixedWingRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransitionToFixedWingRequest,
        };
        unsafe {
            instance.get(TransitionToFixedWingRequest::new)
        }
    }
}

impl ::protobuf::Clear for TransitionToFixedWingRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToFixedWingRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToFixedWingRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToFixedWingResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToFixedWingResponse {
    fn default() -> &'a TransitionToFixedWingResponse {
        <TransitionToFixedWingResponse as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToFixedWingResponse {
    pub fn new() -> TransitionToFixedWingResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for TransitionToFixedWingResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToFixedWingResponse {
        TransitionToFixedWingResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &TransitionToFixedWingResponse| { &m.action_result },
                    |m: &mut TransitionToFixedWingResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransitionToFixedWingResponse>(
                    "TransitionToFixedWingResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransitionToFixedWingResponse {
        static mut instance: ::protobuf::lazy::Lazy<TransitionToFixedWingResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransitionToFixedWingResponse,
        };
        unsafe {
            instance.get(TransitionToFixedWingResponse::new)
        }
    }
}

impl ::protobuf::Clear for TransitionToFixedWingResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToFixedWingResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToFixedWingResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToMulticopterRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToMulticopterRequest {
    fn default() -> &'a TransitionToMulticopterRequest {
        <TransitionToMulticopterRequest as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToMulticopterRequest {
    pub fn new() -> TransitionToMulticopterRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for TransitionToMulticopterRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToMulticopterRequest {
        TransitionToMulticopterRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<TransitionToMulticopterRequest>(
                    "TransitionToMulticopterRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransitionToMulticopterRequest {
        static mut instance: ::protobuf::lazy::Lazy<TransitionToMulticopterRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransitionToMulticopterRequest,
        };
        unsafe {
            instance.get(TransitionToMulticopterRequest::new)
        }
    }
}

impl ::protobuf::Clear for TransitionToMulticopterRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToMulticopterRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToMulticopterRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct TransitionToMulticopterResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a TransitionToMulticopterResponse {
    fn default() -> &'a TransitionToMulticopterResponse {
        <TransitionToMulticopterResponse as ::protobuf::Message>::default_instance()
    }
}

impl TransitionToMulticopterResponse {
    pub fn new() -> TransitionToMulticopterResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for TransitionToMulticopterResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> TransitionToMulticopterResponse {
        TransitionToMulticopterResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &TransitionToMulticopterResponse| { &m.action_result },
                    |m: &mut TransitionToMulticopterResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<TransitionToMulticopterResponse>(
                    "TransitionToMulticopterResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static TransitionToMulticopterResponse {
        static mut instance: ::protobuf::lazy::Lazy<TransitionToMulticopterResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const TransitionToMulticopterResponse,
        };
        unsafe {
            instance.get(TransitionToMulticopterResponse::new)
        }
    }
}

impl ::protobuf::Clear for TransitionToMulticopterResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for TransitionToMulticopterResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for TransitionToMulticopterResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTakeoffAltitudeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTakeoffAltitudeRequest {
    fn default() -> &'a GetTakeoffAltitudeRequest {
        <GetTakeoffAltitudeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetTakeoffAltitudeRequest {
    pub fn new() -> GetTakeoffAltitudeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetTakeoffAltitudeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTakeoffAltitudeRequest {
        GetTakeoffAltitudeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetTakeoffAltitudeRequest>(
                    "GetTakeoffAltitudeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTakeoffAltitudeRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetTakeoffAltitudeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTakeoffAltitudeRequest,
        };
        unsafe {
            instance.get(GetTakeoffAltitudeRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetTakeoffAltitudeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTakeoffAltitudeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTakeoffAltitudeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetTakeoffAltitudeResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    pub altitude: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetTakeoffAltitudeResponse {
    fn default() -> &'a GetTakeoffAltitudeResponse {
        <GetTakeoffAltitudeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetTakeoffAltitudeResponse {
    pub fn new() -> GetTakeoffAltitudeResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }

    // float altitude = 2;


    pub fn get_altitude(&self) -> f32 {
        self.altitude
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f32) {
        self.altitude = v;
    }
}

impl ::protobuf::Message for GetTakeoffAltitudeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.altitude != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.altitude != 0. {
            os.write_float(2, self.altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetTakeoffAltitudeResponse {
        GetTakeoffAltitudeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &GetTakeoffAltitudeResponse| { &m.action_result },
                    |m: &mut GetTakeoffAltitudeResponse| { &mut m.action_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "altitude",
                    |m: &GetTakeoffAltitudeResponse| { &m.altitude },
                    |m: &mut GetTakeoffAltitudeResponse| { &mut m.altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetTakeoffAltitudeResponse>(
                    "GetTakeoffAltitudeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetTakeoffAltitudeResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetTakeoffAltitudeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetTakeoffAltitudeResponse,
        };
        unsafe {
            instance.get(GetTakeoffAltitudeResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetTakeoffAltitudeResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetTakeoffAltitudeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetTakeoffAltitudeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetTakeoffAltitudeRequest {
    // message fields
    pub altitude: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetTakeoffAltitudeRequest {
    fn default() -> &'a SetTakeoffAltitudeRequest {
        <SetTakeoffAltitudeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetTakeoffAltitudeRequest {
    pub fn new() -> SetTakeoffAltitudeRequest {
        ::std::default::Default::default()
    }

    // float altitude = 1;


    pub fn get_altitude(&self) -> f32 {
        self.altitude
    }
    pub fn clear_altitude(&mut self) {
        self.altitude = 0.;
    }

    // Param is passed by value, moved
    pub fn set_altitude(&mut self, v: f32) {
        self.altitude = v;
    }
}

impl ::protobuf::Message for SetTakeoffAltitudeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.altitude = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.altitude != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.altitude != 0. {
            os.write_float(1, self.altitude)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetTakeoffAltitudeRequest {
        SetTakeoffAltitudeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "altitude",
                    |m: &SetTakeoffAltitudeRequest| { &m.altitude },
                    |m: &mut SetTakeoffAltitudeRequest| { &mut m.altitude },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetTakeoffAltitudeRequest>(
                    "SetTakeoffAltitudeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetTakeoffAltitudeRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetTakeoffAltitudeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetTakeoffAltitudeRequest,
        };
        unsafe {
            instance.get(SetTakeoffAltitudeRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetTakeoffAltitudeRequest {
    fn clear(&mut self) {
        self.altitude = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetTakeoffAltitudeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetTakeoffAltitudeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetTakeoffAltitudeResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetTakeoffAltitudeResponse {
    fn default() -> &'a SetTakeoffAltitudeResponse {
        <SetTakeoffAltitudeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetTakeoffAltitudeResponse {
    pub fn new() -> SetTakeoffAltitudeResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for SetTakeoffAltitudeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetTakeoffAltitudeResponse {
        SetTakeoffAltitudeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &SetTakeoffAltitudeResponse| { &m.action_result },
                    |m: &mut SetTakeoffAltitudeResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetTakeoffAltitudeResponse>(
                    "SetTakeoffAltitudeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetTakeoffAltitudeResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetTakeoffAltitudeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetTakeoffAltitudeResponse,
        };
        unsafe {
            instance.get(SetTakeoffAltitudeResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetTakeoffAltitudeResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetTakeoffAltitudeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetTakeoffAltitudeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMaximumSpeedRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMaximumSpeedRequest {
    fn default() -> &'a GetMaximumSpeedRequest {
        <GetMaximumSpeedRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetMaximumSpeedRequest {
    pub fn new() -> GetMaximumSpeedRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetMaximumSpeedRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMaximumSpeedRequest {
        GetMaximumSpeedRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetMaximumSpeedRequest>(
                    "GetMaximumSpeedRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMaximumSpeedRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetMaximumSpeedRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMaximumSpeedRequest,
        };
        unsafe {
            instance.get(GetMaximumSpeedRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetMaximumSpeedRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMaximumSpeedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMaximumSpeedRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetMaximumSpeedResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    pub speed: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetMaximumSpeedResponse {
    fn default() -> &'a GetMaximumSpeedResponse {
        <GetMaximumSpeedResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetMaximumSpeedResponse {
    pub fn new() -> GetMaximumSpeedResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }

    // float speed = 2;


    pub fn get_speed(&self) -> f32 {
        self.speed
    }
    pub fn clear_speed(&mut self) {
        self.speed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = v;
    }
}

impl ::protobuf::Message for GetMaximumSpeedResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.speed != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.speed != 0. {
            os.write_float(2, self.speed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetMaximumSpeedResponse {
        GetMaximumSpeedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &GetMaximumSpeedResponse| { &m.action_result },
                    |m: &mut GetMaximumSpeedResponse| { &mut m.action_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "speed",
                    |m: &GetMaximumSpeedResponse| { &m.speed },
                    |m: &mut GetMaximumSpeedResponse| { &mut m.speed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetMaximumSpeedResponse>(
                    "GetMaximumSpeedResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetMaximumSpeedResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetMaximumSpeedResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetMaximumSpeedResponse,
        };
        unsafe {
            instance.get(GetMaximumSpeedResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetMaximumSpeedResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.speed = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetMaximumSpeedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetMaximumSpeedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetMaximumSpeedRequest {
    // message fields
    pub speed: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetMaximumSpeedRequest {
    fn default() -> &'a SetMaximumSpeedRequest {
        <SetMaximumSpeedRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetMaximumSpeedRequest {
    pub fn new() -> SetMaximumSpeedRequest {
        ::std::default::Default::default()
    }

    // float speed = 1;


    pub fn get_speed(&self) -> f32 {
        self.speed
    }
    pub fn clear_speed(&mut self) {
        self.speed = 0.;
    }

    // Param is passed by value, moved
    pub fn set_speed(&mut self, v: f32) {
        self.speed = v;
    }
}

impl ::protobuf::Message for SetMaximumSpeedRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.speed = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.speed != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.speed != 0. {
            os.write_float(1, self.speed)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetMaximumSpeedRequest {
        SetMaximumSpeedRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "speed",
                    |m: &SetMaximumSpeedRequest| { &m.speed },
                    |m: &mut SetMaximumSpeedRequest| { &mut m.speed },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetMaximumSpeedRequest>(
                    "SetMaximumSpeedRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetMaximumSpeedRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetMaximumSpeedRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetMaximumSpeedRequest,
        };
        unsafe {
            instance.get(SetMaximumSpeedRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetMaximumSpeedRequest {
    fn clear(&mut self) {
        self.speed = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetMaximumSpeedRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetMaximumSpeedRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetMaximumSpeedResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetMaximumSpeedResponse {
    fn default() -> &'a SetMaximumSpeedResponse {
        <SetMaximumSpeedResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetMaximumSpeedResponse {
    pub fn new() -> SetMaximumSpeedResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for SetMaximumSpeedResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetMaximumSpeedResponse {
        SetMaximumSpeedResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &SetMaximumSpeedResponse| { &m.action_result },
                    |m: &mut SetMaximumSpeedResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetMaximumSpeedResponse>(
                    "SetMaximumSpeedResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetMaximumSpeedResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetMaximumSpeedResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetMaximumSpeedResponse,
        };
        unsafe {
            instance.get(SetMaximumSpeedResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetMaximumSpeedResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetMaximumSpeedResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetMaximumSpeedResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReturnToLaunchAltitudeRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReturnToLaunchAltitudeRequest {
    fn default() -> &'a GetReturnToLaunchAltitudeRequest {
        <GetReturnToLaunchAltitudeRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetReturnToLaunchAltitudeRequest {
    pub fn new() -> GetReturnToLaunchAltitudeRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for GetReturnToLaunchAltitudeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReturnToLaunchAltitudeRequest {
        GetReturnToLaunchAltitudeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<GetReturnToLaunchAltitudeRequest>(
                    "GetReturnToLaunchAltitudeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetReturnToLaunchAltitudeRequest {
        static mut instance: ::protobuf::lazy::Lazy<GetReturnToLaunchAltitudeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetReturnToLaunchAltitudeRequest,
        };
        unsafe {
            instance.get(GetReturnToLaunchAltitudeRequest::new)
        }
    }
}

impl ::protobuf::Clear for GetReturnToLaunchAltitudeRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReturnToLaunchAltitudeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReturnToLaunchAltitudeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetReturnToLaunchAltitudeResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    pub relative_altitude_m: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetReturnToLaunchAltitudeResponse {
    fn default() -> &'a GetReturnToLaunchAltitudeResponse {
        <GetReturnToLaunchAltitudeResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetReturnToLaunchAltitudeResponse {
    pub fn new() -> GetReturnToLaunchAltitudeResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }

    // float relative_altitude_m = 2;


    pub fn get_relative_altitude_m(&self) -> f32 {
        self.relative_altitude_m
    }
    pub fn clear_relative_altitude_m(&mut self) {
        self.relative_altitude_m = 0.;
    }

    // Param is passed by value, moved
    pub fn set_relative_altitude_m(&mut self, v: f32) {
        self.relative_altitude_m = v;
    }
}

impl ::protobuf::Message for GetReturnToLaunchAltitudeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.relative_altitude_m = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if self.relative_altitude_m != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if self.relative_altitude_m != 0. {
            os.write_float(2, self.relative_altitude_m)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetReturnToLaunchAltitudeResponse {
        GetReturnToLaunchAltitudeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &GetReturnToLaunchAltitudeResponse| { &m.action_result },
                    |m: &mut GetReturnToLaunchAltitudeResponse| { &mut m.action_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "relative_altitude_m",
                    |m: &GetReturnToLaunchAltitudeResponse| { &m.relative_altitude_m },
                    |m: &mut GetReturnToLaunchAltitudeResponse| { &mut m.relative_altitude_m },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GetReturnToLaunchAltitudeResponse>(
                    "GetReturnToLaunchAltitudeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GetReturnToLaunchAltitudeResponse {
        static mut instance: ::protobuf::lazy::Lazy<GetReturnToLaunchAltitudeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GetReturnToLaunchAltitudeResponse,
        };
        unsafe {
            instance.get(GetReturnToLaunchAltitudeResponse::new)
        }
    }
}

impl ::protobuf::Clear for GetReturnToLaunchAltitudeResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.relative_altitude_m = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetReturnToLaunchAltitudeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetReturnToLaunchAltitudeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetReturnToLaunchAltitudeRequest {
    // message fields
    pub relative_altitude_m: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetReturnToLaunchAltitudeRequest {
    fn default() -> &'a SetReturnToLaunchAltitudeRequest {
        <SetReturnToLaunchAltitudeRequest as ::protobuf::Message>::default_instance()
    }
}

impl SetReturnToLaunchAltitudeRequest {
    pub fn new() -> SetReturnToLaunchAltitudeRequest {
        ::std::default::Default::default()
    }

    // float relative_altitude_m = 1;


    pub fn get_relative_altitude_m(&self) -> f32 {
        self.relative_altitude_m
    }
    pub fn clear_relative_altitude_m(&mut self) {
        self.relative_altitude_m = 0.;
    }

    // Param is passed by value, moved
    pub fn set_relative_altitude_m(&mut self, v: f32) {
        self.relative_altitude_m = v;
    }
}

impl ::protobuf::Message for SetReturnToLaunchAltitudeRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.relative_altitude_m = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.relative_altitude_m != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.relative_altitude_m != 0. {
            os.write_float(1, self.relative_altitude_m)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetReturnToLaunchAltitudeRequest {
        SetReturnToLaunchAltitudeRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "relative_altitude_m",
                    |m: &SetReturnToLaunchAltitudeRequest| { &m.relative_altitude_m },
                    |m: &mut SetReturnToLaunchAltitudeRequest| { &mut m.relative_altitude_m },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetReturnToLaunchAltitudeRequest>(
                    "SetReturnToLaunchAltitudeRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetReturnToLaunchAltitudeRequest {
        static mut instance: ::protobuf::lazy::Lazy<SetReturnToLaunchAltitudeRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetReturnToLaunchAltitudeRequest,
        };
        unsafe {
            instance.get(SetReturnToLaunchAltitudeRequest::new)
        }
    }
}

impl ::protobuf::Clear for SetReturnToLaunchAltitudeRequest {
    fn clear(&mut self) {
        self.relative_altitude_m = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetReturnToLaunchAltitudeRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetReturnToLaunchAltitudeRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SetReturnToLaunchAltitudeResponse {
    // message fields
    pub action_result: ::protobuf::SingularPtrField<ActionResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SetReturnToLaunchAltitudeResponse {
    fn default() -> &'a SetReturnToLaunchAltitudeResponse {
        <SetReturnToLaunchAltitudeResponse as ::protobuf::Message>::default_instance()
    }
}

impl SetReturnToLaunchAltitudeResponse {
    pub fn new() -> SetReturnToLaunchAltitudeResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult action_result = 1;


    pub fn get_action_result(&self) -> &ActionResult {
        self.action_result.as_ref().unwrap_or_else(|| ActionResult::default_instance())
    }
    pub fn clear_action_result(&mut self) {
        self.action_result.clear();
    }

    pub fn has_action_result(&self) -> bool {
        self.action_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_action_result(&mut self, v: ActionResult) {
        self.action_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_action_result(&mut self) -> &mut ActionResult {
        if self.action_result.is_none() {
            self.action_result.set_default();
        }
        self.action_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_action_result(&mut self) -> ActionResult {
        self.action_result.take().unwrap_or_else(|| ActionResult::new())
    }
}

impl ::protobuf::Message for SetReturnToLaunchAltitudeResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.action_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.action_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.action_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.action_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SetReturnToLaunchAltitudeResponse {
        SetReturnToLaunchAltitudeResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ActionResult>>(
                    "action_result",
                    |m: &SetReturnToLaunchAltitudeResponse| { &m.action_result },
                    |m: &mut SetReturnToLaunchAltitudeResponse| { &mut m.action_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SetReturnToLaunchAltitudeResponse>(
                    "SetReturnToLaunchAltitudeResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SetReturnToLaunchAltitudeResponse {
        static mut instance: ::protobuf::lazy::Lazy<SetReturnToLaunchAltitudeResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SetReturnToLaunchAltitudeResponse,
        };
        unsafe {
            instance.get(SetReturnToLaunchAltitudeResponse::new)
        }
    }
}

impl ::protobuf::Clear for SetReturnToLaunchAltitudeResponse {
    fn clear(&mut self) {
        self.action_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SetReturnToLaunchAltitudeResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SetReturnToLaunchAltitudeResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ActionResult {
    // message fields
    pub result: ActionResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ActionResult {
    fn default() -> &'a ActionResult {
        <ActionResult as ::protobuf::Message>::default_instance()
    }
}

impl ActionResult {
    pub fn new() -> ActionResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.action.ActionResult.Result result = 1;


    pub fn get_result(&self) -> ActionResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = ActionResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: ActionResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ActionResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != ActionResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != ActionResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ActionResult {
        ActionResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ActionResult_Result>>(
                    "result",
                    |m: &ActionResult| { &m.result },
                    |m: &mut ActionResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &ActionResult| { &m.result_str },
                    |m: &mut ActionResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ActionResult>(
                    "ActionResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ActionResult {
        static mut instance: ::protobuf::lazy::Lazy<ActionResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ActionResult,
        };
        unsafe {
            instance.get(ActionResult::new)
        }
    }
}

impl ::protobuf::Clear for ActionResult {
    fn clear(&mut self) {
        self.result = ActionResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ActionResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ActionResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    NO_SYSTEM = 2,
    CONNECTION_ERROR = 3,
    BUSY = 4,
    COMMAND_DENIED = 5,
    COMMAND_DENIED_LANDED_STATE_UNKNOWN = 6,
    COMMAND_DENIED_NOT_LANDED = 7,
    TIMEOUT = 8,
    VTOL_TRANSITION_SUPPORT_UNKNOWN = 9,
    NO_VTOL_TRANSITION_SUPPORT = 10,
    PARAMETER_ERROR = 11,
}

impl ::protobuf::ProtobufEnum for ActionResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ActionResult_Result> {
        match value {
            0 => ::std::option::Option::Some(ActionResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(ActionResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(ActionResult_Result::NO_SYSTEM),
            3 => ::std::option::Option::Some(ActionResult_Result::CONNECTION_ERROR),
            4 => ::std::option::Option::Some(ActionResult_Result::BUSY),
            5 => ::std::option::Option::Some(ActionResult_Result::COMMAND_DENIED),
            6 => ::std::option::Option::Some(ActionResult_Result::COMMAND_DENIED_LANDED_STATE_UNKNOWN),
            7 => ::std::option::Option::Some(ActionResult_Result::COMMAND_DENIED_NOT_LANDED),
            8 => ::std::option::Option::Some(ActionResult_Result::TIMEOUT),
            9 => ::std::option::Option::Some(ActionResult_Result::VTOL_TRANSITION_SUPPORT_UNKNOWN),
            10 => ::std::option::Option::Some(ActionResult_Result::NO_VTOL_TRANSITION_SUPPORT),
            11 => ::std::option::Option::Some(ActionResult_Result::PARAMETER_ERROR),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ActionResult_Result] = &[
            ActionResult_Result::UNKNOWN,
            ActionResult_Result::SUCCESS,
            ActionResult_Result::NO_SYSTEM,
            ActionResult_Result::CONNECTION_ERROR,
            ActionResult_Result::BUSY,
            ActionResult_Result::COMMAND_DENIED,
            ActionResult_Result::COMMAND_DENIED_LANDED_STATE_UNKNOWN,
            ActionResult_Result::COMMAND_DENIED_NOT_LANDED,
            ActionResult_Result::TIMEOUT,
            ActionResult_Result::VTOL_TRANSITION_SUPPORT_UNKNOWN,
            ActionResult_Result::NO_VTOL_TRANSITION_SUPPORT,
            ActionResult_Result::PARAMETER_ERROR,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("ActionResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for ActionResult_Result {
}

impl ::std::default::Default for ActionResult_Result {
    fn default() -> Self {
        ActionResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for ActionResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x13action/action.proto\x12\x11mavsdk.rpc.action\"\x0c\n\nArmRequest\"\
    S\n\x0bArmResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsd\
    k.rpc.action.ActionResultR\x0cactionResult\"\x0f\n\rDisarmRequest\"V\n\
    \x0eDisarmResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsd\
    k.rpc.action.ActionResultR\x0cactionResult\"\x10\n\x0eTakeoffRequest\"W\
    \n\x0fTakeoffResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.ma\
    vsdk.rpc.action.ActionResultR\x0cactionResult\"\r\n\x0bLandRequest\"T\n\
    \x0cLandResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.\
    rpc.action.ActionResultR\x0cactionResult\"\x0f\n\rRebootRequest\"V\n\x0e\
    RebootResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rp\
    c.action.ActionResultR\x0cactionResult\"\r\n\x0bKillRequest\"T\n\x0cKill\
    Response\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rpc.acti\
    on.ActionResultR\x0cactionResult\"\x17\n\x15ReturnToLaunchRequest\"^\n\
    \x16ReturnToLaunchResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\
    \x1f.mavsdk.rpc.action.ActionResultR\x0cactionResult\"\x1e\n\x1cTransiti\
    onToFixedWingRequest\"e\n\x1dTransitionToFixedWingResponse\x12D\n\ractio\
    n_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rpc.action.ActionResultR\x0cac\
    tionResult\"\x20\n\x1eTransitionToMulticopterRequest\"g\n\x1fTransitionT\
    oMulticopterResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mav\
    sdk.rpc.action.ActionResultR\x0cactionResult\"\x1b\n\x19GetTakeoffAltitu\
    deRequest\"~\n\x1aGetTakeoffAltitudeResponse\x12D\n\raction_result\x18\
    \x01\x20\x01(\x0b2\x1f.mavsdk.rpc.action.ActionResultR\x0cactionResult\
    \x12\x1a\n\x08altitude\x18\x02\x20\x01(\x02R\x08altitude\"7\n\x19SetTake\
    offAltitudeRequest\x12\x1a\n\x08altitude\x18\x01\x20\x01(\x02R\x08altitu\
    de\"b\n\x1aSetTakeoffAltitudeResponse\x12D\n\raction_result\x18\x01\x20\
    \x01(\x0b2\x1f.mavsdk.rpc.action.ActionResultR\x0cactionResult\"\x18\n\
    \x16GetMaximumSpeedRequest\"u\n\x17GetMaximumSpeedResponse\x12D\n\ractio\
    n_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rpc.action.ActionResultR\x0cac\
    tionResult\x12\x14\n\x05speed\x18\x02\x20\x01(\x02R\x05speed\".\n\x16Set\
    MaximumSpeedRequest\x12\x14\n\x05speed\x18\x01\x20\x01(\x02R\x05speed\"_\
    \n\x17SetMaximumSpeedResponse\x12D\n\raction_result\x18\x01\x20\x01(\x0b\
    2\x1f.mavsdk.rpc.action.ActionResultR\x0cactionResult\"\"\n\x20GetReturn\
    ToLaunchAltitudeRequest\"\x99\x01\n!GetReturnToLaunchAltitudeResponse\
    \x12D\n\raction_result\x18\x01\x20\x01(\x0b2\x1f.mavsdk.rpc.action.Actio\
    nResultR\x0cactionResult\x12.\n\x13relative_altitude_m\x18\x02\x20\x01(\
    \x02R\x11relativeAltitudeM\"R\n\x20SetReturnToLaunchAltitudeRequest\x12.\
    \n\x13relative_altitude_m\x18\x01\x20\x01(\x02R\x11relativeAltitudeM\"i\
    \n!SetReturnToLaunchAltitudeResponse\x12D\n\raction_result\x18\x01\x20\
    \x01(\x0b2\x1f.mavsdk.rpc.action.ActionResultR\x0cactionResult\"\x84\x03\
    \n\x0cActionResult\x12>\n\x06result\x18\x01\x20\x01(\x0e2&.mavsdk.rpc.ac\
    tion.ActionResult.ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\x20\
    \x01(\tR\tresultStr\"\x94\x02\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\
    \x0b\n\x07SUCCESS\x10\x01\x12\r\n\tNO_SYSTEM\x10\x02\x12\x14\n\x10CONNEC\
    TION_ERROR\x10\x03\x12\x08\n\x04BUSY\x10\x04\x12\x12\n\x0eCOMMAND_DENIED\
    \x10\x05\x12'\n#COMMAND_DENIED_LANDED_STATE_UNKNOWN\x10\x06\x12\x1d\n\
    \x19COMMAND_DENIED_NOT_LANDED\x10\x07\x12\x0b\n\x07TIMEOUT\x10\x08\x12#\
    \n\x1fVTOL_TRANSITION_SUPPORT_UNKNOWN\x10\t\x12\x1e\n\x1aNO_VTOL_TRANSIT\
    ION_SUPPORT\x10\n\x12\x13\n\x0fPARAMETER_ERROR\x10\x0b2\xa7\x0c\n\rActio\
    nService\x12F\n\x03Arm\x12\x1d.mavsdk.rpc.action.ArmRequest\x1a\x1e.mavs\
    dk.rpc.action.ArmResponse\"\0\x12O\n\x06Disarm\x12\x20.mavsdk.rpc.action\
    .DisarmRequest\x1a!.mavsdk.rpc.action.DisarmResponse\"\0\x12R\n\x07Takeo\
    ff\x12!.mavsdk.rpc.action.TakeoffRequest\x1a\".mavsdk.rpc.action.Takeoff\
    Response\"\0\x12I\n\x04Land\x12\x1e.mavsdk.rpc.action.LandRequest\x1a\
    \x1f.mavsdk.rpc.action.LandResponse\"\0\x12O\n\x06Reboot\x12\x20.mavsdk.\
    rpc.action.RebootRequest\x1a!.mavsdk.rpc.action.RebootResponse\"\0\x12I\
    \n\x04Kill\x12\x1e.mavsdk.rpc.action.KillRequest\x1a\x1f.mavsdk.rpc.acti\
    on.KillResponse\"\0\x12g\n\x0eReturnToLaunch\x12(.mavsdk.rpc.action.Retu\
    rnToLaunchRequest\x1a).mavsdk.rpc.action.ReturnToLaunchResponse\"\0\x12|\
    \n\x15TransitionToFixedWing\x12/.mavsdk.rpc.action.TransitionToFixedWing\
    Request\x1a0.mavsdk.rpc.action.TransitionToFixedWingResponse\"\0\x12\x82\
    \x01\n\x17TransitionToMulticopter\x121.mavsdk.rpc.action.TransitionToMul\
    ticopterRequest\x1a2.mavsdk.rpc.action.TransitionToMulticopterResponse\"\
    \0\x12s\n\x12GetTakeoffAltitude\x12,.mavsdk.rpc.action.GetTakeoffAltitud\
    eRequest\x1a-.mavsdk.rpc.action.GetTakeoffAltitudeResponse\"\0\x12s\n\
    \x12SetTakeoffAltitude\x12,.mavsdk.rpc.action.SetTakeoffAltitudeRequest\
    \x1a-.mavsdk.rpc.action.SetTakeoffAltitudeResponse\"\0\x12j\n\x0fGetMaxi\
    mumSpeed\x12).mavsdk.rpc.action.GetMaximumSpeedRequest\x1a*.mavsdk.rpc.a\
    ction.GetMaximumSpeedResponse\"\0\x12j\n\x0fSetMaximumSpeed\x12).mavsdk.\
    rpc.action.SetMaximumSpeedRequest\x1a*.mavsdk.rpc.action.SetMaximumSpeed\
    Response\"\0\x12\x88\x01\n\x19GetReturnToLaunchAltitude\x123.mavsdk.rpc.\
    action.GetReturnToLaunchAltitudeRequest\x1a4.mavsdk.rpc.action.GetReturn\
    ToLaunchAltitudeResponse\"\0\x12\x88\x01\n\x19SetReturnToLaunchAltitude\
    \x123.mavsdk.rpc.action.SetReturnToLaunchAltitudeRequest\x1a4.mavsdk.rpc\
    .action.SetReturnToLaunchAltitudeResponse\"\0B\x1f\n\x10io.mavsdk.action\
    B\x0bActionProtoJ\x9e9\n\x07\x12\x05\0\0\xcd\x01\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x19\n\x08\n\x01\x08\x12\x03\
    \x04\0)\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x04\0)\n\x0c\n\x05\x08\xe7\x07\
    \0\x02\x12\x03\x04\x07\x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\
    \x13\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\
    \x08\xe7\x07\0\x07\x12\x03\x04\x16(\n\x08\n\x01\x08\x12\x03\x05\0,\n\x0b\
    \n\x04\x08\xe7\x07\x01\x12\x03\x05\0,\n\x0c\n\x05\x08\xe7\x07\x01\x02\
    \x12\x03\x05\x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\
    \n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\
    \x08\xe7\x07\x01\x07\x12\x03\x05\x1e+\nL\n\x02\x06\0\x12\x04\x08\0c\x01\
    \x1a@\x20Enable\x20simple\x20actions\x20such\x20as\x20arming,\x20taking\
    \x20off,\x20and\x20landing.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x15\n\
    \xb1\x01\n\x04\x06\0\x02\0\x12\x03\x0f\x04/\x1a\xa3\x01\n\x20Send\x20com\
    mand\x20to\x20arm\x20the\x20drone.\n\n\x20Arming\x20a\x20drone\x20normal\
    ly\x20causes\x20motors\x20to\x20spin\x20at\x20idle.\n\x20Before\x20armin\
    g\x20take\x20all\x20safety\x20precautions\x20and\x20stand\x20clear\x20of\
    \x20the\x20drone!\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x08\x0b\n\
    \x0c\n\x05\x06\0\x02\0\x02\x12\x03\x0f\x0c\x16\n\x0c\n\x05\x06\0\x02\0\
    \x03\x12\x03\x0f\x20+\n\xce\x01\n\x04\x06\0\x02\x01\x12\x03\x16\x048\x1a\
    \xc0\x01\n\x20Send\x20command\x20to\x20disarm\x20the\x20drone.\n\n\x20Th\
    is\x20will\x20disarm\x20a\x20drone\x20that\x20considers\x20itself\x20lan\
    ded.\x20If\x20flying,\x20the\x20drone\x20should\n\x20reject\x20the\x20di\
    sarm\x20command.\x20Disarming\x20means\x20that\x20all\x20motors\x20will\
    \x20stop.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\x03\x16\x08\x0e\n\x0c\n\
    \x05\x06\0\x02\x01\x02\x12\x03\x16\x0f\x1c\n\x0c\n\x05\x06\0\x02\x01\x03\
    \x12\x03\x16&4\n\xe8\x01\n\x04\x06\0\x02\x02\x12\x03\x1f\x04;\x1a\xda\
    \x01\n\x20Send\x20command\x20to\x20take\x20off\x20and\x20hover.\n\n\x20T\
    his\x20switches\x20the\x20drone\x20into\x20position\x20control\x20mode\
    \x20and\x20commands\x20\n\x20it\x20to\x20take\x20off\x20and\x20hover\x20\
    at\x20the\x20takeoff\x20altitude.\n\n\x20Note\x20that\x20the\x20vehicle\
    \x20must\x20be\x20armed\x20before\x20it\x20can\x20take\x20off.\n\n\x0c\n\
    \x05\x06\0\x02\x02\x01\x12\x03\x1f\x08\x0f\n\x0c\n\x05\x06\0\x02\x02\x02\
    \x12\x03\x1f\x10\x1e\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x1f(7\nn\n\
    \x04\x06\0\x02\x03\x12\x03%\x042\x1aa\n\x20Send\x20command\x20to\x20land\
    \x20at\x20the\x20current\x20position.\n\n\x20This\x20switches\x20the\x20\
    drone\x20to\x20'Land'\x20flight\x20mode.\n\n\x0c\n\x05\x06\0\x02\x03\x01\
    \x12\x03%\x08\x0c\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03%\r\x18\n\x0c\n\
    \x05\x06\0\x02\x03\x03\x12\x03%\".\n\x85\x01\n\x04\x06\0\x02\x04\x12\x03\
    +\x048\x1ax\n\x20Send\x20command\x20to\x20reboot\x20the\x20drone\x20comp\
    onents.\n\n\x20This\x20will\x20reboot\x20the\x20autopilot,\x20companion\
    \x20computer,\x20camera\x20and\x20gimbal.\n\n\x0c\n\x05\x06\0\x02\x04\
    \x01\x12\x03+\x08\x0e\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03+\x0f\x1c\n\
    \x0c\n\x05\x06\0\x02\x04\x03\x12\x03+&4\n\xd0\x01\n\x04\x06\0\x02\x05\
    \x12\x032\x042\x1a\xc2\x01\n\x20Send\x20command\x20to\x20kill\x20the\x20\
    drone.\x20\n\n\x20This\x20will\x20disarm\x20a\x20drone\x20irrespective\
    \x20of\x20whether\x20it\x20is\x20landed\x20or\x20flying.\n\x20Note\x20th\
    at\x20the\x20drone\x20will\x20fall\x20out\x20of\x20the\x20sky\x20if\x20t\
    his\x20command\x20is\x20used\x20while\x20flying.\n\n\x0c\n\x05\x06\0\x02\
    \x05\x01\x12\x032\x08\x0c\n\x0c\n\x05\x06\0\x02\x05\x02\x12\x032\r\x18\n\
    \x0c\n\x05\x06\0\x02\x05\x03\x12\x032\".\n\xc4\x02\n\x04\x06\0\x02\x06\
    \x12\x03:\x04P\x1a\xb6\x02\n\x20Send\x20command\x20to\x20return\x20to\
    \x20the\x20launch\x20(takeoff)\x20position\x20and\x20land.\n\n\x20This\
    \x20switches\x20the\x20drone\x20into\x20[RTL\x20mode](https://docs.px4.i\
    o/en/flight_modes/rtl.html)\x20which\n\x20generally\x20means\x20it\x20wi\
    ll\x20rise\x20up\x20to\x20a\x20certain\x20altitude\x20to\x20clear\x20any\
    \x20obstacles\x20before\x20heading\n\x20back\x20to\x20the\x20launch\x20(\
    takeoff)\x20position\x20and\x20land\x20there.\n\n\x0c\n\x05\x06\0\x02\
    \x06\x01\x12\x03:\x08\x16\n\x0c\n\x05\x06\0\x02\x06\x02\x12\x03:\x17,\n\
    \x0c\n\x05\x06\0\x02\x06\x03\x12\x03:6L\n\x87\x02\n\x04\x06\0\x02\x07\
    \x12\x03B\x04e\x1a\xf9\x01\n\x20Send\x20command\x20to\x20transition\x20t\
    he\x20drone\x20to\x20fixedwing.\n\n\x20The\x20associated\x20action\x20wi\
    ll\x20only\x20be\x20executed\x20for\x20VTOL\x20vehicles\x20(on\x20other\
    \x20vehicle\x20types\x20the\n\x20command\x20will\x20fail).\x20The\x20com\
    mand\x20will\x20succeed\x20if\x20called\x20when\x20the\x20vehicle\n\x20i\
    s\x20already\x20in\x20fixedwing\x20mode.\n\n\x0c\n\x05\x06\0\x02\x07\x01\
    \x12\x03B\x08\x1d\n\x0c\n\x05\x06\0\x02\x07\x02\x12\x03B\x1e:\n\x0c\n\
    \x05\x06\0\x02\x07\x03\x12\x03BDa\n\x8b\x02\n\x04\x06\0\x02\x08\x12\x03J\
    \x04k\x1a\xfd\x01\n\x20Send\x20command\x20to\x20transition\x20the\x20dro\
    ne\x20to\x20multicopter.\n\n\x20The\x20associated\x20action\x20will\x20o\
    nly\x20be\x20executed\x20for\x20VTOL\x20vehicles\x20(on\x20other\x20vehi\
    cle\x20types\x20the\n\x20command\x20will\x20fail).\x20The\x20command\x20\
    will\x20succeed\x20if\x20called\x20when\x20the\x20vehicle\n\x20is\x20alr\
    eady\x20in\x20multicopter\x20mode.\n\n\x0c\n\x05\x06\0\x02\x08\x01\x12\
    \x03J\x08\x1f\n\x0c\n\x05\x06\0\x02\x08\x02\x12\x03J\x20>\n\x0c\n\x05\
    \x06\0\x02\x08\x03\x12\x03JHg\nB\n\x04\x06\0\x02\t\x12\x03N\x04\\\x1a5\n\
    \x20Get\x20the\x20takeoff\x20altitude\x20(in\x20meters\x20above\x20groun\
    d).\n\n\x0c\n\x05\x06\0\x02\t\x01\x12\x03N\x08\x1a\n\x0c\n\x05\x06\0\x02\
    \t\x02\x12\x03N\x1b4\n\x0c\n\x05\x06\0\x02\t\x03\x12\x03N>X\n>\n\x04\x06\
    \0\x02\n\x12\x03R\x04\\\x1a1\n\x20Set\x20takeoff\x20altitude\x20(in\x20m\
    eters\x20above\x20ground).\n\n\x0c\n\x05\x06\0\x02\n\x01\x12\x03R\x08\
    \x1a\n\x0c\n\x05\x06\0\x02\n\x02\x12\x03R\x1b4\n\x0c\n\x05\x06\0\x02\n\
    \x03\x12\x03R>X\nA\n\x04\x06\0\x02\x0b\x12\x03V\x04S\x1a4\n\x20Get\x20th\
    e\x20vehicle\x20maximum\x20speed\x20(in\x20metres/second).\n\n\x0c\n\x05\
    \x06\0\x02\x0b\x01\x12\x03V\x08\x17\n\x0c\n\x05\x06\0\x02\x0b\x02\x12\
    \x03V\x18.\n\x0c\n\x05\x06\0\x02\x0b\x03\x12\x03V8O\n=\n\x04\x06\0\x02\
    \x0c\x12\x03Z\x04S\x1a0\n\x20Set\x20vehicle\x20maximum\x20speed\x20(in\
    \x20metres/second).\n\n\x0c\n\x05\x06\0\x02\x0c\x01\x12\x03Z\x08\x17\n\
    \x0c\n\x05\x06\0\x02\x0c\x02\x12\x03Z\x18.\n\x0c\n\x05\x06\0\x02\x0c\x03\
    \x12\x03Z8O\nM\n\x04\x06\0\x02\r\x12\x03^\x04q\x1a@\n\x20Get\x20the\x20r\
    eturn\x20to\x20launch\x20minimum\x20return\x20altitude\x20(in\x20meters)\
    .\n\n\x0c\n\x05\x06\0\x02\r\x01\x12\x03^\x08!\n\x0c\n\x05\x06\0\x02\r\
    \x02\x12\x03^\"B\n\x0c\n\x05\x06\0\x02\r\x03\x12\x03^Lm\nM\n\x04\x06\0\
    \x02\x0e\x12\x03b\x04q\x1a@\n\x20Set\x20the\x20return\x20to\x20launch\
    \x20minimum\x20return\x20altitude\x20(in\x20meters).\n\n\x0c\n\x05\x06\0\
    \x02\x0e\x01\x12\x03b\x08!\n\x0c\n\x05\x06\0\x02\x0e\x02\x12\x03b\"B\n\
    \x0c\n\x05\x06\0\x02\x0e\x03\x12\x03bLm\n\t\n\x02\x04\0\x12\x03e\0\x15\n\
    \n\n\x03\x04\0\x01\x12\x03e\x08\x12\n\n\n\x02\x04\x01\x12\x04f\0h\x01\n\
    \n\n\x03\x04\x01\x01\x12\x03f\x08\x13\n\x0b\n\x04\x04\x01\x02\0\x12\x03g\
    \x04#\n\r\n\x05\x04\x01\x02\0\x04\x12\x04g\x04f\x15\n\x0c\n\x05\x04\x01\
    \x02\0\x06\x12\x03g\x04\x10\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03g\x11\
    \x1e\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03g!\"\n\t\n\x02\x04\x02\x12\x03\
    j\0\x18\n\n\n\x03\x04\x02\x01\x12\x03j\x08\x15\n\n\n\x02\x04\x03\x12\x04\
    k\0m\x01\n\n\n\x03\x04\x03\x01\x12\x03k\x08\x16\n\x0b\n\x04\x04\x03\x02\
    \0\x12\x03l\x04#\n\r\n\x05\x04\x03\x02\0\x04\x12\x04l\x04k\x18\n\x0c\n\
    \x05\x04\x03\x02\0\x06\x12\x03l\x04\x10\n\x0c\n\x05\x04\x03\x02\0\x01\
    \x12\x03l\x11\x1e\n\x0c\n\x05\x04\x03\x02\0\x03\x12\x03l!\"\n\t\n\x02\
    \x04\x04\x12\x03o\0\x19\n\n\n\x03\x04\x04\x01\x12\x03o\x08\x16\n\n\n\x02\
    \x04\x05\x12\x04p\0r\x01\n\n\n\x03\x04\x05\x01\x12\x03p\x08\x17\n\x0b\n\
    \x04\x04\x05\x02\0\x12\x03q\x04#\n\r\n\x05\x04\x05\x02\0\x04\x12\x04q\
    \x04p\x19\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03q\x04\x10\n\x0c\n\x05\x04\
    \x05\x02\0\x01\x12\x03q\x11\x1e\n\x0c\n\x05\x04\x05\x02\0\x03\x12\x03q!\
    \"\n\t\n\x02\x04\x06\x12\x03t\0\x16\n\n\n\x03\x04\x06\x01\x12\x03t\x08\
    \x13\n\n\n\x02\x04\x07\x12\x04u\0w\x01\n\n\n\x03\x04\x07\x01\x12\x03u\
    \x08\x14\n\x0b\n\x04\x04\x07\x02\0\x12\x03v\x04#\n\r\n\x05\x04\x07\x02\0\
    \x04\x12\x04v\x04u\x16\n\x0c\n\x05\x04\x07\x02\0\x06\x12\x03v\x04\x10\n\
    \x0c\n\x05\x04\x07\x02\0\x01\x12\x03v\x11\x1e\n\x0c\n\x05\x04\x07\x02\0\
    \x03\x12\x03v!\"\n\t\n\x02\x04\x08\x12\x03y\0\x18\n\n\n\x03\x04\x08\x01\
    \x12\x03y\x08\x15\n\n\n\x02\x04\t\x12\x04z\0|\x01\n\n\n\x03\x04\t\x01\
    \x12\x03z\x08\x16\n\x0b\n\x04\x04\t\x02\0\x12\x03{\x04#\n\r\n\x05\x04\t\
    \x02\0\x04\x12\x04{\x04z\x18\n\x0c\n\x05\x04\t\x02\0\x06\x12\x03{\x04\
    \x10\n\x0c\n\x05\x04\t\x02\0\x01\x12\x03{\x11\x1e\n\x0c\n\x05\x04\t\x02\
    \0\x03\x12\x03{!\"\n\t\n\x02\x04\n\x12\x03~\0\x16\n\n\n\x03\x04\n\x01\
    \x12\x03~\x08\x13\n\x0b\n\x02\x04\x0b\x12\x05\x7f\0\x81\x01\x01\n\n\n\
    \x03\x04\x0b\x01\x12\x03\x7f\x08\x14\n\x0c\n\x04\x04\x0b\x02\0\x12\x04\
    \x80\x01\x04#\n\x0e\n\x05\x04\x0b\x02\0\x04\x12\x05\x80\x01\x04\x7f\x16\
    \n\r\n\x05\x04\x0b\x02\0\x06\x12\x04\x80\x01\x04\x10\n\r\n\x05\x04\x0b\
    \x02\0\x01\x12\x04\x80\x01\x11\x1e\n\r\n\x05\x04\x0b\x02\0\x03\x12\x04\
    \x80\x01!\"\n\n\n\x02\x04\x0c\x12\x04\x83\x01\0\x20\n\x0b\n\x03\x04\x0c\
    \x01\x12\x04\x83\x01\x08\x1d\n\x0c\n\x02\x04\r\x12\x06\x84\x01\0\x86\x01\
    \x01\n\x0b\n\x03\x04\r\x01\x12\x04\x84\x01\x08\x1e\n\x0c\n\x04\x04\r\x02\
    \0\x12\x04\x85\x01\x04#\n\x0f\n\x05\x04\r\x02\0\x04\x12\x06\x85\x01\x04\
    \x84\x01\x20\n\r\n\x05\x04\r\x02\0\x06\x12\x04\x85\x01\x04\x10\n\r\n\x05\
    \x04\r\x02\0\x01\x12\x04\x85\x01\x11\x1e\n\r\n\x05\x04\r\x02\0\x03\x12\
    \x04\x85\x01!\"\n\n\n\x02\x04\x0e\x12\x04\x88\x01\0'\n\x0b\n\x03\x04\x0e\
    \x01\x12\x04\x88\x01\x08$\n\x0c\n\x02\x04\x0f\x12\x06\x89\x01\0\x8b\x01\
    \x01\n\x0b\n\x03\x04\x0f\x01\x12\x04\x89\x01\x08%\n\x0c\n\x04\x04\x0f\
    \x02\0\x12\x04\x8a\x01\x04#\n\x0f\n\x05\x04\x0f\x02\0\x04\x12\x06\x8a\
    \x01\x04\x89\x01'\n\r\n\x05\x04\x0f\x02\0\x06\x12\x04\x8a\x01\x04\x10\n\
    \r\n\x05\x04\x0f\x02\0\x01\x12\x04\x8a\x01\x11\x1e\n\r\n\x05\x04\x0f\x02\
    \0\x03\x12\x04\x8a\x01!\"\n\n\n\x02\x04\x10\x12\x04\x8d\x01\0)\n\x0b\n\
    \x03\x04\x10\x01\x12\x04\x8d\x01\x08&\n\x0c\n\x02\x04\x11\x12\x06\x8e\
    \x01\0\x90\x01\x01\n\x0b\n\x03\x04\x11\x01\x12\x04\x8e\x01\x08'\n\x0c\n\
    \x04\x04\x11\x02\0\x12\x04\x8f\x01\x04#\n\x0f\n\x05\x04\x11\x02\0\x04\
    \x12\x06\x8f\x01\x04\x8e\x01)\n\r\n\x05\x04\x11\x02\0\x06\x12\x04\x8f\
    \x01\x04\x10\n\r\n\x05\x04\x11\x02\0\x01\x12\x04\x8f\x01\x11\x1e\n\r\n\
    \x05\x04\x11\x02\0\x03\x12\x04\x8f\x01!\"\n\n\n\x02\x04\x12\x12\x04\x92\
    \x01\0$\n\x0b\n\x03\x04\x12\x01\x12\x04\x92\x01\x08!\n\x0c\n\x02\x04\x13\
    \x12\x06\x93\x01\0\x96\x01\x01\n\x0b\n\x03\x04\x13\x01\x12\x04\x93\x01\
    \x08\"\n\x0c\n\x04\x04\x13\x02\0\x12\x04\x94\x01\x04#\n\x0f\n\x05\x04\
    \x13\x02\0\x04\x12\x06\x94\x01\x04\x93\x01$\n\r\n\x05\x04\x13\x02\0\x06\
    \x12\x04\x94\x01\x04\x10\n\r\n\x05\x04\x13\x02\0\x01\x12\x04\x94\x01\x11\
    \x1e\n\r\n\x05\x04\x13\x02\0\x03\x12\x04\x94\x01!\"\nP\n\x04\x04\x13\x02\
    \x01\x12\x04\x95\x01\x04\x17\"B\x20Takeoff\x20altitude\x20relative\x20to\
    \x20ground/takeoff\x20location\x20(in\x20meters)\n\n\x0f\n\x05\x04\x13\
    \x02\x01\x04\x12\x06\x95\x01\x04\x94\x01#\n\r\n\x05\x04\x13\x02\x01\x05\
    \x12\x04\x95\x01\x04\t\n\r\n\x05\x04\x13\x02\x01\x01\x12\x04\x95\x01\n\
    \x12\n\r\n\x05\x04\x13\x02\x01\x03\x12\x04\x95\x01\x15\x16\n\x0c\n\x02\
    \x04\x14\x12\x06\x98\x01\0\x9a\x01\x01\n\x0b\n\x03\x04\x14\x01\x12\x04\
    \x98\x01\x08!\nP\n\x04\x04\x14\x02\0\x12\x04\x99\x01\x04\x17\"B\x20Takeo\
    ff\x20altitude\x20relative\x20to\x20ground/takeoff\x20location\x20(in\
    \x20meters)\n\n\x0f\n\x05\x04\x14\x02\0\x04\x12\x06\x99\x01\x04\x98\x01#\
    \n\r\n\x05\x04\x14\x02\0\x05\x12\x04\x99\x01\x04\t\n\r\n\x05\x04\x14\x02\
    \0\x01\x12\x04\x99\x01\n\x12\n\r\n\x05\x04\x14\x02\0\x03\x12\x04\x99\x01\
    \x15\x16\n\x0c\n\x02\x04\x15\x12\x06\x9b\x01\0\x9d\x01\x01\n\x0b\n\x03\
    \x04\x15\x01\x12\x04\x9b\x01\x08\"\n\x0c\n\x04\x04\x15\x02\0\x12\x04\x9c\
    \x01\x04#\n\x0f\n\x05\x04\x15\x02\0\x04\x12\x06\x9c\x01\x04\x9b\x01$\n\r\
    \n\x05\x04\x15\x02\0\x06\x12\x04\x9c\x01\x04\x10\n\r\n\x05\x04\x15\x02\0\
    \x01\x12\x04\x9c\x01\x11\x1e\n\r\n\x05\x04\x15\x02\0\x03\x12\x04\x9c\x01\
    !\"\n\n\n\x02\x04\x16\x12\x04\x9f\x01\0!\n\x0b\n\x03\x04\x16\x01\x12\x04\
    \x9f\x01\x08\x1e\n\x0c\n\x02\x04\x17\x12\x06\xa0\x01\0\xa3\x01\x01\n\x0b\
    \n\x03\x04\x17\x01\x12\x04\xa0\x01\x08\x1f\n\x0c\n\x04\x04\x17\x02\0\x12\
    \x04\xa1\x01\x04#\n\x0f\n\x05\x04\x17\x02\0\x04\x12\x06\xa1\x01\x04\xa0\
    \x01!\n\r\n\x05\x04\x17\x02\0\x06\x12\x04\xa1\x01\x04\x10\n\r\n\x05\x04\
    \x17\x02\0\x01\x12\x04\xa1\x01\x11\x1e\n\r\n\x05\x04\x17\x02\0\x03\x12\
    \x04\xa1\x01!\"\n0\n\x04\x04\x17\x02\x01\x12\x04\xa2\x01\x04\x14\"\"\x20\
    Maximum\x20speed\x20(in\x20metres/second)\n\n\x0f\n\x05\x04\x17\x02\x01\
    \x04\x12\x06\xa2\x01\x04\xa1\x01#\n\r\n\x05\x04\x17\x02\x01\x05\x12\x04\
    \xa2\x01\x04\t\n\r\n\x05\x04\x17\x02\x01\x01\x12\x04\xa2\x01\n\x0f\n\r\n\
    \x05\x04\x17\x02\x01\x03\x12\x04\xa2\x01\x12\x13\n\x0c\n\x02\x04\x18\x12\
    \x06\xa5\x01\0\xa7\x01\x01\n\x0b\n\x03\x04\x18\x01\x12\x04\xa5\x01\x08\
    \x1e\n0\n\x04\x04\x18\x02\0\x12\x04\xa6\x01\x04\x14\"\"\x20Maximum\x20sp\
    eed\x20(in\x20metres/second)\n\n\x0f\n\x05\x04\x18\x02\0\x04\x12\x06\xa6\
    \x01\x04\xa5\x01\x20\n\r\n\x05\x04\x18\x02\0\x05\x12\x04\xa6\x01\x04\t\n\
    \r\n\x05\x04\x18\x02\0\x01\x12\x04\xa6\x01\n\x0f\n\r\n\x05\x04\x18\x02\0\
    \x03\x12\x04\xa6\x01\x12\x13\n\x0c\n\x02\x04\x19\x12\x06\xa8\x01\0\xaa\
    \x01\x01\n\x0b\n\x03\x04\x19\x01\x12\x04\xa8\x01\x08\x1f\n\x0c\n\x04\x04\
    \x19\x02\0\x12\x04\xa9\x01\x04#\n\x0f\n\x05\x04\x19\x02\0\x04\x12\x06\
    \xa9\x01\x04\xa8\x01!\n\r\n\x05\x04\x19\x02\0\x06\x12\x04\xa9\x01\x04\
    \x10\n\r\n\x05\x04\x19\x02\0\x01\x12\x04\xa9\x01\x11\x1e\n\r\n\x05\x04\
    \x19\x02\0\x03\x12\x04\xa9\x01!\"\n\n\n\x02\x04\x1a\x12\x04\xac\x01\0+\n\
    \x0b\n\x03\x04\x1a\x01\x12\x04\xac\x01\x08(\n\x0c\n\x02\x04\x1b\x12\x06\
    \xad\x01\0\xb0\x01\x01\n\x0b\n\x03\x04\x1b\x01\x12\x04\xad\x01\x08)\n\
    \x0c\n\x04\x04\x1b\x02\0\x12\x04\xae\x01\x04#\n\x0f\n\x05\x04\x1b\x02\0\
    \x04\x12\x06\xae\x01\x04\xad\x01+\n\r\n\x05\x04\x1b\x02\0\x06\x12\x04\
    \xae\x01\x04\x10\n\r\n\x05\x04\x1b\x02\0\x01\x12\x04\xae\x01\x11\x1e\n\r\
    \n\x05\x04\x1b\x02\0\x03\x12\x04\xae\x01!\"\nH\n\x04\x04\x1b\x02\x01\x12\
    \x04\xaf\x01\x04\"\":\x20Return\x20altitude\x20relative\x20to\x20takeoff\
    \x20location\x20(in\x20meters)\n\n\x0f\n\x05\x04\x1b\x02\x01\x04\x12\x06\
    \xaf\x01\x04\xae\x01#\n\r\n\x05\x04\x1b\x02\x01\x05\x12\x04\xaf\x01\x04\
    \t\n\r\n\x05\x04\x1b\x02\x01\x01\x12\x04\xaf\x01\n\x1d\n\r\n\x05\x04\x1b\
    \x02\x01\x03\x12\x04\xaf\x01\x20!\n\x0c\n\x02\x04\x1c\x12\x06\xb2\x01\0\
    \xb4\x01\x01\n\x0b\n\x03\x04\x1c\x01\x12\x04\xb2\x01\x08(\nH\n\x04\x04\
    \x1c\x02\0\x12\x04\xb3\x01\x04\"\":\x20Return\x20altitude\x20relative\
    \x20to\x20takeoff\x20location\x20(in\x20meters)\n\n\x0f\n\x05\x04\x1c\
    \x02\0\x04\x12\x06\xb3\x01\x04\xb2\x01*\n\r\n\x05\x04\x1c\x02\0\x05\x12\
    \x04\xb3\x01\x04\t\n\r\n\x05\x04\x1c\x02\0\x01\x12\x04\xb3\x01\n\x1d\n\r\
    \n\x05\x04\x1c\x02\0\x03\x12\x04\xb3\x01\x20!\n\x0c\n\x02\x04\x1d\x12\
    \x06\xb5\x01\0\xb7\x01\x01\n\x0b\n\x03\x04\x1d\x01\x12\x04\xb5\x01\x08)\
    \n\x0c\n\x04\x04\x1d\x02\0\x12\x04\xb6\x01\x04#\n\x0f\n\x05\x04\x1d\x02\
    \0\x04\x12\x06\xb6\x01\x04\xb5\x01+\n\r\n\x05\x04\x1d\x02\0\x06\x12\x04\
    \xb6\x01\x04\x10\n\r\n\x05\x04\x1d\x02\0\x01\x12\x04\xb6\x01\x11\x1e\n\r\
    \n\x05\x04\x1d\x02\0\x03\x12\x04\xb6\x01!\"\n\x1c\n\x02\x04\x1e\x12\x06\
    \xba\x01\0\xcd\x01\x01\x1a\x0e\x20Result\x20type.\n\n\x0b\n\x03\x04\x1e\
    \x01\x12\x04\xba\x01\x08\x14\n@\n\x04\x04\x1e\x04\0\x12\x06\xbc\x01\x04\
    \xc9\x01\x05\x1a0\x20Possible\x20results\x20returned\x20for\x20action\
    \x20requests.\n\n\r\n\x05\x04\x1e\x04\0\x01\x12\x04\xbc\x01\t\x0f\n\x1f\
    \n\x06\x04\x1e\x04\0\x02\0\x12\x04\xbd\x01\x08\x14\"\x0f\x20Unknown\x20e\
    rror\n\n\x0f\n\x07\x04\x1e\x04\0\x02\0\x01\x12\x04\xbd\x01\x08\x0f\n\x0f\
    \n\x07\x04\x1e\x04\0\x02\0\x02\x12\x04\xbd\x01\x12\x13\nI\n\x06\x04\x1e\
    \x04\0\x02\x01\x12\x04\xbe\x01\x08\x14\"9\x20Success:\x20the\x20action\
    \x20command\x20was\x20accepted\x20by\x20the\x20vehicle\n\n\x0f\n\x07\x04\
    \x1e\x04\0\x02\x01\x01\x12\x04\xbe\x01\x08\x0f\n\x0f\n\x07\x04\x1e\x04\0\
    \x02\x01\x02\x12\x04\xbe\x01\x12\x13\n(\n\x06\x04\x1e\x04\0\x02\x02\x12\
    \x04\xbf\x01\x08\x16\"\x18\x20No\x20system\x20is\x20connected\n\n\x0f\n\
    \x07\x04\x1e\x04\0\x02\x02\x01\x12\x04\xbf\x01\x08\x11\n\x0f\n\x07\x04\
    \x1e\x04\0\x02\x02\x02\x12\x04\xbf\x01\x14\x15\n\"\n\x06\x04\x1e\x04\0\
    \x02\x03\x12\x04\xc0\x01\x08\x1d\"\x12\x20Connection\x20error\n\n\x0f\n\
    \x07\x04\x1e\x04\0\x02\x03\x01\x12\x04\xc0\x01\x08\x18\n\x0f\n\x07\x04\
    \x1e\x04\0\x02\x03\x02\x12\x04\xc0\x01\x1b\x1c\n!\n\x06\x04\x1e\x04\0\
    \x02\x04\x12\x04\xc1\x01\x08\x11\"\x11\x20Vehicle\x20is\x20busy\n\n\x0f\
    \n\x07\x04\x1e\x04\0\x02\x04\x01\x12\x04\xc1\x01\x08\x0c\n\x0f\n\x07\x04\
    \x1e\x04\0\x02\x04\x02\x12\x04\xc1\x01\x0f\x10\n,\n\x06\x04\x1e\x04\0\
    \x02\x05\x12\x04\xc2\x01\x08\x1b\"\x1c\x20Command\x20refused\x20by\x20ve\
    hicle\n\n\x0f\n\x07\x04\x1e\x04\0\x02\x05\x01\x12\x04\xc2\x01\x08\x16\n\
    \x0f\n\x07\x04\x1e\x04\0\x02\x05\x02\x12\x04\xc2\x01\x19\x1a\nA\n\x06\
    \x04\x1e\x04\0\x02\x06\x12\x04\xc3\x01\x080\"1\x20Command\x20refused\x20\
    because\x20landed\x20state\x20is\x20unknown\n\n\x0f\n\x07\x04\x1e\x04\0\
    \x02\x06\x01\x12\x04\xc3\x01\x08+\n\x0f\n\x07\x04\x1e\x04\0\x02\x06\x02\
    \x12\x04\xc3\x01./\n<\n\x06\x04\x1e\x04\0\x02\x07\x12\x04\xc4\x01\x08&\"\
    ,\x20Command\x20refused\x20because\x20vehicle\x20not\x20landed\n\n\x0f\n\
    \x07\x04\x1e\x04\0\x02\x07\x01\x12\x04\xc4\x01\x08!\n\x0f\n\x07\x04\x1e\
    \x04\0\x02\x07\x02\x12\x04\xc4\x01$%\n#\n\x06\x04\x1e\x04\0\x02\x08\x12\
    \x04\xc5\x01\x08\x14\"\x13\x20Request\x20timed\x20out\n\n\x0f\n\x07\x04\
    \x1e\x04\0\x02\x08\x01\x12\x04\xc5\x01\x08\x0f\n\x0f\n\x07\x04\x1e\x04\0\
    \x02\x08\x02\x12\x04\xc5\x01\x12\x13\nP\n\x06\x04\x1e\x04\0\x02\t\x12\
    \x04\xc6\x01\x08,\"@\x20Hybrid/VTOL\x20transition\x20refused\x20because\
    \x20VTOL\x20support\x20is\x20unknown\n\n\x0f\n\x07\x04\x1e\x04\0\x02\t\
    \x01\x12\x04\xc6\x01\x08'\n\x0f\n\x07\x04\x1e\x04\0\x02\t\x02\x12\x04\
    \xc6\x01*+\nB\n\x06\x04\x1e\x04\0\x02\n\x12\x04\xc7\x01\x08(\"2\x20Vehic\
    le\x20does\x20not\x20support\x20hybrid/VTOL\x20transitions\n\n\x0f\n\x07\
    \x04\x1e\x04\0\x02\n\x01\x12\x04\xc7\x01\x08\"\n\x0f\n\x07\x04\x1e\x04\0\
    \x02\n\x02\x12\x04\xc7\x01%'\n4\n\x06\x04\x1e\x04\0\x02\x0b\x12\x04\xc8\
    \x01\x08\x1d\"$\x20Error\x20getting\x20or\x20setting\x20parameter\n\n\
    \x0f\n\x07\x04\x1e\x04\0\x02\x0b\x01\x12\x04\xc8\x01\x08\x17\n\x0f\n\x07\
    \x04\x1e\x04\0\x02\x0b\x02\x12\x04\xc8\x01\x1a\x1c\n!\n\x04\x04\x1e\x02\
    \0\x12\x04\xcb\x01\x04\x16\"\x13\x20Result\x20enum\x20value\n\n\x0f\n\
    \x05\x04\x1e\x02\0\x04\x12\x06\xcb\x01\x04\xc9\x01\x05\n\r\n\x05\x04\x1e\
    \x02\0\x06\x12\x04\xcb\x01\x04\n\n\r\n\x05\x04\x1e\x02\0\x01\x12\x04\xcb\
    \x01\x0b\x11\n\r\n\x05\x04\x1e\x02\0\x03\x12\x04\xcb\x01\x14\x15\nC\n\
    \x04\x04\x1e\x02\x01\x12\x04\xcc\x01\x04\x1a\"5\x20Human-readable\x20Eng\
    lish\x20string\x20describing\x20the\x20result\n\n\x0f\n\x05\x04\x1e\x02\
    \x01\x04\x12\x06\xcc\x01\x04\xcb\x01\x16\n\r\n\x05\x04\x1e\x02\x01\x05\
    \x12\x04\xcc\x01\x04\n\n\r\n\x05\x04\x1e\x02\x01\x01\x12\x04\xcc\x01\x0b\
    \x15\n\r\n\x05\x04\x1e\x02\x01\x03\x12\x04\xcc\x01\x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
