// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `core/core.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeConnectionStateRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeConnectionStateRequest {
    fn default() -> &'a SubscribeConnectionStateRequest {
        <SubscribeConnectionStateRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeConnectionStateRequest {
    pub fn new() -> SubscribeConnectionStateRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeConnectionStateRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeConnectionStateRequest {
        SubscribeConnectionStateRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeConnectionStateRequest>(
                    "SubscribeConnectionStateRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeConnectionStateRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeConnectionStateRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeConnectionStateRequest,
        };
        unsafe {
            instance.get(SubscribeConnectionStateRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeConnectionStateRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeConnectionStateRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeConnectionStateRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionStateResponse {
    // message fields
    pub connection_state: ::protobuf::SingularPtrField<ConnectionState>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionStateResponse {
    fn default() -> &'a ConnectionStateResponse {
        <ConnectionStateResponse as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionStateResponse {
    pub fn new() -> ConnectionStateResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.core.ConnectionState connection_state = 1;


    pub fn get_connection_state(&self) -> &ConnectionState {
        self.connection_state.as_ref().unwrap_or_else(|| ConnectionState::default_instance())
    }
    pub fn clear_connection_state(&mut self) {
        self.connection_state.clear();
    }

    pub fn has_connection_state(&self) -> bool {
        self.connection_state.is_some()
    }

    // Param is passed by value, moved
    pub fn set_connection_state(&mut self, v: ConnectionState) {
        self.connection_state = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_connection_state(&mut self) -> &mut ConnectionState {
        if self.connection_state.is_none() {
            self.connection_state.set_default();
        }
        self.connection_state.as_mut().unwrap()
    }

    // Take field
    pub fn take_connection_state(&mut self) -> ConnectionState {
        self.connection_state.take().unwrap_or_else(|| ConnectionState::new())
    }
}

impl ::protobuf::Message for ConnectionStateResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.connection_state {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.connection_state)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.connection_state.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.connection_state.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionStateResponse {
        ConnectionStateResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ConnectionState>>(
                    "connection_state",
                    |m: &ConnectionStateResponse| { &m.connection_state },
                    |m: &mut ConnectionStateResponse| { &mut m.connection_state },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectionStateResponse>(
                    "ConnectionStateResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectionStateResponse {
        static mut instance: ::protobuf::lazy::Lazy<ConnectionStateResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectionStateResponse,
        };
        unsafe {
            instance.get(ConnectionStateResponse::new)
        }
    }
}

impl ::protobuf::Clear for ConnectionStateResponse {
    fn clear(&mut self) {
        self.connection_state.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionStateResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionStateResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListRunningPluginsRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListRunningPluginsRequest {
    fn default() -> &'a ListRunningPluginsRequest {
        <ListRunningPluginsRequest as ::protobuf::Message>::default_instance()
    }
}

impl ListRunningPluginsRequest {
    pub fn new() -> ListRunningPluginsRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ListRunningPluginsRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListRunningPluginsRequest {
        ListRunningPluginsRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ListRunningPluginsRequest>(
                    "ListRunningPluginsRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListRunningPluginsRequest {
        static mut instance: ::protobuf::lazy::Lazy<ListRunningPluginsRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListRunningPluginsRequest,
        };
        unsafe {
            instance.get(ListRunningPluginsRequest::new)
        }
    }
}

impl ::protobuf::Clear for ListRunningPluginsRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListRunningPluginsRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRunningPluginsRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ListRunningPluginsResponse {
    // message fields
    pub plugin_info: ::protobuf::RepeatedField<PluginInfo>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ListRunningPluginsResponse {
    fn default() -> &'a ListRunningPluginsResponse {
        <ListRunningPluginsResponse as ::protobuf::Message>::default_instance()
    }
}

impl ListRunningPluginsResponse {
    pub fn new() -> ListRunningPluginsResponse {
        ::std::default::Default::default()
    }

    // repeated .mavsdk.rpc.core.PluginInfo plugin_info = 1;


    pub fn get_plugin_info(&self) -> &[PluginInfo] {
        &self.plugin_info
    }
    pub fn clear_plugin_info(&mut self) {
        self.plugin_info.clear();
    }

    // Param is passed by value, moved
    pub fn set_plugin_info(&mut self, v: ::protobuf::RepeatedField<PluginInfo>) {
        self.plugin_info = v;
    }

    // Mutable pointer to the field.
    pub fn mut_plugin_info(&mut self) -> &mut ::protobuf::RepeatedField<PluginInfo> {
        &mut self.plugin_info
    }

    // Take field
    pub fn take_plugin_info(&mut self) -> ::protobuf::RepeatedField<PluginInfo> {
        ::std::mem::replace(&mut self.plugin_info, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ListRunningPluginsResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.plugin_info {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.plugin_info)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.plugin_info {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.plugin_info {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ListRunningPluginsResponse {
        ListRunningPluginsResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PluginInfo>>(
                    "plugin_info",
                    |m: &ListRunningPluginsResponse| { &m.plugin_info },
                    |m: &mut ListRunningPluginsResponse| { &mut m.plugin_info },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ListRunningPluginsResponse>(
                    "ListRunningPluginsResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ListRunningPluginsResponse {
        static mut instance: ::protobuf::lazy::Lazy<ListRunningPluginsResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ListRunningPluginsResponse,
        };
        unsafe {
            instance.get(ListRunningPluginsResponse::new)
        }
    }
}

impl ::protobuf::Clear for ListRunningPluginsResponse {
    fn clear(&mut self) {
        self.plugin_info.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ListRunningPluginsResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ListRunningPluginsResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConnectionState {
    // message fields
    pub uuid: u64,
    pub is_connected: bool,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ConnectionState {
    fn default() -> &'a ConnectionState {
        <ConnectionState as ::protobuf::Message>::default_instance()
    }
}

impl ConnectionState {
    pub fn new() -> ConnectionState {
        ::std::default::Default::default()
    }

    // uint64 uuid = 1;


    pub fn get_uuid(&self) -> u64 {
        self.uuid
    }
    pub fn clear_uuid(&mut self) {
        self.uuid = 0;
    }

    // Param is passed by value, moved
    pub fn set_uuid(&mut self, v: u64) {
        self.uuid = v;
    }

    // bool is_connected = 2;


    pub fn get_is_connected(&self) -> bool {
        self.is_connected
    }
    pub fn clear_is_connected(&mut self) {
        self.is_connected = false;
    }

    // Param is passed by value, moved
    pub fn set_is_connected(&mut self, v: bool) {
        self.is_connected = v;
    }
}

impl ::protobuf::Message for ConnectionState {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.uuid = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.is_connected = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.uuid != 0 {
            my_size += ::protobuf::rt::value_size(1, self.uuid, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.is_connected != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.uuid != 0 {
            os.write_uint64(1, self.uuid)?;
        }
        if self.is_connected != false {
            os.write_bool(2, self.is_connected)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConnectionState {
        ConnectionState::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "uuid",
                    |m: &ConnectionState| { &m.uuid },
                    |m: &mut ConnectionState| { &mut m.uuid },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "is_connected",
                    |m: &ConnectionState| { &m.is_connected },
                    |m: &mut ConnectionState| { &mut m.is_connected },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConnectionState>(
                    "ConnectionState",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConnectionState {
        static mut instance: ::protobuf::lazy::Lazy<ConnectionState> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConnectionState,
        };
        unsafe {
            instance.get(ConnectionState::new)
        }
    }
}

impl ::protobuf::Clear for ConnectionState {
    fn clear(&mut self) {
        self.uuid = 0;
        self.is_connected = false;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConnectionState {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConnectionState {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PluginInfo {
    // message fields
    pub name: ::std::string::String,
    pub address: ::std::string::String,
    pub port: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PluginInfo {
    fn default() -> &'a PluginInfo {
        <PluginInfo as ::protobuf::Message>::default_instance()
    }
}

impl PluginInfo {
    pub fn new() -> PluginInfo {
        ::std::default::Default::default()
    }

    // string name = 1;


    pub fn get_name(&self) -> &str {
        &self.name
    }
    pub fn clear_name(&mut self) {
        self.name.clear();
    }

    // Param is passed by value, moved
    pub fn set_name(&mut self, v: ::std::string::String) {
        self.name = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_name(&mut self) -> &mut ::std::string::String {
        &mut self.name
    }

    // Take field
    pub fn take_name(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.name, ::std::string::String::new())
    }

    // string address = 2;


    pub fn get_address(&self) -> &str {
        &self.address
    }
    pub fn clear_address(&mut self) {
        self.address.clear();
    }

    // Param is passed by value, moved
    pub fn set_address(&mut self, v: ::std::string::String) {
        self.address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_address(&mut self) -> &mut ::std::string::String {
        &mut self.address
    }

    // Take field
    pub fn take_address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.address, ::std::string::String::new())
    }

    // int32 port = 3;


    pub fn get_port(&self) -> i32 {
        self.port
    }
    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }
}

impl ::protobuf::Message for PluginInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.name)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.address)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.address.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.address);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.address.is_empty() {
            os.write_string(2, &self.address)?;
        }
        if self.port != 0 {
            os.write_int32(3, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PluginInfo {
        PluginInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "name",
                    |m: &PluginInfo| { &m.name },
                    |m: &mut PluginInfo| { &mut m.name },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "address",
                    |m: &PluginInfo| { &m.address },
                    |m: &mut PluginInfo| { &mut m.address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &PluginInfo| { &m.port },
                    |m: &mut PluginInfo| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<PluginInfo>(
                    "PluginInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static PluginInfo {
        static mut instance: ::protobuf::lazy::Lazy<PluginInfo> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const PluginInfo,
        };
        unsafe {
            instance.get(PluginInfo::new)
        }
    }
}

impl ::protobuf::Clear for PluginInfo {
    fn clear(&mut self) {
        self.name.clear();
        self.address.clear();
        self.port = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PluginInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PluginInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fcore/core.proto\x12\x0fmavsdk.rpc.core\"!\n\x1fSubscribeConnection\
    StateRequest\"f\n\x17ConnectionStateResponse\x12K\n\x10connection_state\
    \x18\x01\x20\x01(\x0b2\x20.mavsdk.rpc.core.ConnectionStateR\x0fconnectio\
    nState\"\x1b\n\x19ListRunningPluginsRequest\"Z\n\x1aListRunningPluginsRe\
    sponse\x12<\n\x0bplugin_info\x18\x01\x20\x03(\x0b2\x1b.mavsdk.rpc.core.P\
    luginInfoR\npluginInfo\"H\n\x0fConnectionState\x12\x12\n\x04uuid\x18\x01\
    \x20\x01(\x04R\x04uuid\x12!\n\x0cis_connected\x18\x02\x20\x01(\x08R\x0bi\
    sConnected\"N\n\nPluginInfo\x12\x12\n\x04name\x18\x01\x20\x01(\tR\x04nam\
    e\x12\x18\n\x07address\x18\x02\x20\x01(\tR\x07address\x12\x12\n\x04port\
    \x18\x03\x20\x01(\x05R\x04port2\xfa\x01\n\x0bCoreService\x12z\n\x18Subsc\
    ribeConnectionState\x120.mavsdk.rpc.core.SubscribeConnectionStateRequest\
    \x1a(.mavsdk.rpc.core.ConnectionStateResponse\"\00\x01\x12o\n\x12ListRun\
    ningPlugins\x12*.mavsdk.rpc.core.ListRunningPluginsRequest\x1a+.mavsdk.r\
    pc.core.ListRunningPluginsResponse\"\0B\x1b\n\x0eio.mavsdk.coreB\tCorePr\
    otoJ\xd9\n\n\x06\x12\x04\0\0$\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\x08\x17\n\x08\n\x01\x08\x12\x03\x04\0'\n\x0b\n\
    \x04\x08\xe7\x07\0\x12\x03\x04\0'\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\
    \x04\x07\x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\
    \x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\
    \0\x07\x12\x03\x04\x16&\n\x08\n\x01\x08\x12\x03\x05\0*\n\x0b\n\x04\x08\
    \xe7\x07\x01\x12\x03\x05\0*\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\
    \x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\
    \x08\xe7\x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\
    \x01\x07\x12\x03\x05\x1e)\nA\n\x02\x06\0\x12\x04\x08\0\r\x01\x1a5\x20Acc\
    ess\x20to\x20the\x20connection\x20state\x20and\x20running\x20plugins.\n\
    \n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x13\n7\n\x04\x06\0\x02\0\x12\x03\n\
    \x04l\x1a*\x20Subscribe\x20to\x20'connection\x20state'\x20updates.\n\n\
    \x0c\n\x05\x06\0\x02\0\x01\x12\x03\n\x08\x20\n\x0c\n\x05\x06\0\x02\0\x02\
    \x12\x03\n!@\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\nJP\n\x0c\n\x05\x06\0\
    \x02\0\x03\x12\x03\nQh\n7\n\x04\x06\0\x02\x01\x12\x03\x0c\x04\\\x1a*\x20\
    Get\x20a\x20list\x20of\x20currently\x20running\x20plugins.\n\n\x0c\n\x05\
    \x06\0\x02\x01\x01\x12\x03\x0c\x08\x1a\n\x0c\n\x05\x06\0\x02\x01\x02\x12\
    \x03\x0c\x1b4\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\x0c>X\n\t\n\x02\x04\
    \0\x12\x03\x0f\0*\n\n\n\x03\x04\0\x01\x12\x03\x0f\x08'\n\n\n\x02\x04\x01\
    \x12\x04\x10\0\x12\x01\n\n\n\x03\x04\x01\x01\x12\x03\x10\x08\x1f\n\x1f\n\
    \x04\x04\x01\x02\0\x12\x03\x11\x04)\"\x12\x20Connection\x20state\n\n\r\n\
    \x05\x04\x01\x02\0\x04\x12\x04\x11\x04\x10!\n\x0c\n\x05\x04\x01\x02\0\
    \x06\x12\x03\x11\x04\x13\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\x11\x14$\
    \n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x11'(\n\t\n\x02\x04\x02\x12\x03\
    \x14\0$\n\n\n\x03\x04\x02\x01\x12\x03\x14\x08!\n\n\n\x02\x04\x03\x12\x04\
    \x15\0\x17\x01\n\n\n\x03\x04\x03\x01\x12\x03\x15\x08\"\n\x1a\n\x04\x04\
    \x03\x02\0\x12\x03\x16\x04(\"\r\x20Plugin\x20info\n\n\x0c\n\x05\x04\x03\
    \x02\0\x04\x12\x03\x16\x04\x0c\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x16\
    \r\x17\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x16\x18#\n\x0c\n\x05\x04\
    \x03\x02\0\x03\x12\x03\x16&'\n$\n\x02\x04\x04\x12\x04\x1a\0\x1d\x01\x1a\
    \x18\x20Connection\x20state\x20type.\n\n\n\n\x03\x04\x04\x01\x12\x03\x1a\
    \x08\x17\n\"\n\x04\x04\x04\x02\0\x12\x03\x1b\x04\x14\"\x15\x20UUID\x20of\
    \x20the\x20vehicle\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x04\x1b\x04\x1a\x19\
    \n\x0c\n\x05\x04\x04\x02\0\x05\x12\x03\x1b\x04\n\n\x0c\n\x05\x04\x04\x02\
    \0\x01\x12\x03\x1b\x0b\x0f\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\x1b\x12\
    \x13\n@\n\x04\x04\x04\x02\x01\x12\x03\x1c\x04\x1a\"3\x20Whether\x20the\
    \x20vehicle\x20got\x20connected\x20or\x20disconnected\n\n\r\n\x05\x04\
    \x04\x02\x01\x04\x12\x04\x1c\x04\x1b\x14\n\x0c\n\x05\x04\x04\x02\x01\x05\
    \x12\x03\x1c\x04\x08\n\x0c\n\x05\x04\x04\x02\x01\x01\x12\x03\x1c\t\x15\n\
    \x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1c\x18\x19\n\x1f\n\x02\x04\x05\
    \x12\x04\x20\0$\x01\x1a\x13\x20Plugin\x20info\x20type.\n\n\n\n\x03\x04\
    \x05\x01\x12\x03\x20\x08\x12\n!\n\x04\x04\x05\x02\0\x12\x03!\x04\x14\"\
    \x14\x20Name\x20of\x20the\x20plugin\n\n\r\n\x05\x04\x05\x02\0\x04\x12\
    \x04!\x04\x20\x14\n\x0c\n\x05\x04\x05\x02\0\x05\x12\x03!\x04\n\n\x0c\n\
    \x05\x04\x05\x02\0\x01\x12\x03!\x0b\x0f\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03!\x12\x13\n2\n\x04\x04\x05\x02\x01\x12\x03\"\x04\x17\"%\x20Addre\
    ss\x20where\x20the\x20plugin\x20is\x20running\n\n\r\n\x05\x04\x05\x02\
    \x01\x04\x12\x04\"\x04!\x14\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03\"\
    \x04\n\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\x03\"\x0b\x12\n\x0c\n\x05\x04\
    \x05\x02\x01\x03\x12\x03\"\x15\x16\n/\n\x04\x04\x05\x02\x02\x12\x03#\x04\
    \x13\"\"\x20Port\x20where\x20the\x20plugin\x20is\x20running\n\n\r\n\x05\
    \x04\x05\x02\x02\x04\x12\x04#\x04\"\x17\n\x0c\n\x05\x04\x05\x02\x02\x05\
    \x12\x03#\x04\t\n\x0c\n\x05\x04\x05\x02\x02\x01\x12\x03#\n\x0e\n\x0c\n\
    \x05\x04\x05\x02\x02\x03\x12\x03#\x11\x12b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
