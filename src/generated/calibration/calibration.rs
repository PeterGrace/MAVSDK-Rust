// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `calibration/calibration.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeCalibrateGyroRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeCalibrateGyroRequest {
    fn default() -> &'a SubscribeCalibrateGyroRequest {
        <SubscribeCalibrateGyroRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeCalibrateGyroRequest {
    pub fn new() -> SubscribeCalibrateGyroRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeCalibrateGyroRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeCalibrateGyroRequest {
        SubscribeCalibrateGyroRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeCalibrateGyroRequest>(
                    "SubscribeCalibrateGyroRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeCalibrateGyroRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeCalibrateGyroRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeCalibrateGyroRequest,
        };
        unsafe {
            instance.get(SubscribeCalibrateGyroRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeCalibrateGyroRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeCalibrateGyroRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeCalibrateGyroRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CalibrateGyroResponse {
    // message fields
    pub calibration_result: ::protobuf::SingularPtrField<CalibrationResult>,
    pub progress_data: ::protobuf::SingularPtrField<ProgressData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalibrateGyroResponse {
    fn default() -> &'a CalibrateGyroResponse {
        <CalibrateGyroResponse as ::protobuf::Message>::default_instance()
    }
}

impl CalibrateGyroResponse {
    pub fn new() -> CalibrateGyroResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;


    pub fn get_calibration_result(&self) -> &CalibrationResult {
        self.calibration_result.as_ref().unwrap_or_else(|| CalibrationResult::default_instance())
    }
    pub fn clear_calibration_result(&mut self) {
        self.calibration_result.clear();
    }

    pub fn has_calibration_result(&self) -> bool {
        self.calibration_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_calibration_result(&mut self, v: CalibrationResult) {
        self.calibration_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_calibration_result(&mut self) -> &mut CalibrationResult {
        if self.calibration_result.is_none() {
            self.calibration_result.set_default();
        }
        self.calibration_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_calibration_result(&mut self) -> CalibrationResult {
        self.calibration_result.take().unwrap_or_else(|| CalibrationResult::new())
    }

    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;


    pub fn get_progress_data(&self) -> &ProgressData {
        self.progress_data.as_ref().unwrap_or_else(|| ProgressData::default_instance())
    }
    pub fn clear_progress_data(&mut self) {
        self.progress_data.clear();
    }

    pub fn has_progress_data(&self) -> bool {
        self.progress_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress_data(&mut self, v: ProgressData) {
        self.progress_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress_data(&mut self) -> &mut ProgressData {
        if self.progress_data.is_none() {
            self.progress_data.set_default();
        }
        self.progress_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress_data(&mut self) -> ProgressData {
        self.progress_data.take().unwrap_or_else(|| ProgressData::new())
    }
}

impl ::protobuf::Message for CalibrateGyroResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.calibration_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.calibration_result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.calibration_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.calibration_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalibrateGyroResponse {
        CalibrateGyroResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CalibrationResult>>(
                    "calibration_result",
                    |m: &CalibrateGyroResponse| { &m.calibration_result },
                    |m: &mut CalibrateGyroResponse| { &mut m.calibration_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProgressData>>(
                    "progress_data",
                    |m: &CalibrateGyroResponse| { &m.progress_data },
                    |m: &mut CalibrateGyroResponse| { &mut m.progress_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CalibrateGyroResponse>(
                    "CalibrateGyroResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CalibrateGyroResponse {
        static mut instance: ::protobuf::lazy::Lazy<CalibrateGyroResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CalibrateGyroResponse,
        };
        unsafe {
            instance.get(CalibrateGyroResponse::new)
        }
    }
}

impl ::protobuf::Clear for CalibrateGyroResponse {
    fn clear(&mut self) {
        self.calibration_result.clear();
        self.progress_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CalibrateGyroResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrateGyroResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeCalibrateAccelerometerRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeCalibrateAccelerometerRequest {
    fn default() -> &'a SubscribeCalibrateAccelerometerRequest {
        <SubscribeCalibrateAccelerometerRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeCalibrateAccelerometerRequest {
    pub fn new() -> SubscribeCalibrateAccelerometerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeCalibrateAccelerometerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeCalibrateAccelerometerRequest {
        SubscribeCalibrateAccelerometerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeCalibrateAccelerometerRequest>(
                    "SubscribeCalibrateAccelerometerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeCalibrateAccelerometerRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeCalibrateAccelerometerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeCalibrateAccelerometerRequest,
        };
        unsafe {
            instance.get(SubscribeCalibrateAccelerometerRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeCalibrateAccelerometerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeCalibrateAccelerometerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeCalibrateAccelerometerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CalibrateAccelerometerResponse {
    // message fields
    pub calibration_result: ::protobuf::SingularPtrField<CalibrationResult>,
    pub progress_data: ::protobuf::SingularPtrField<ProgressData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalibrateAccelerometerResponse {
    fn default() -> &'a CalibrateAccelerometerResponse {
        <CalibrateAccelerometerResponse as ::protobuf::Message>::default_instance()
    }
}

impl CalibrateAccelerometerResponse {
    pub fn new() -> CalibrateAccelerometerResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;


    pub fn get_calibration_result(&self) -> &CalibrationResult {
        self.calibration_result.as_ref().unwrap_or_else(|| CalibrationResult::default_instance())
    }
    pub fn clear_calibration_result(&mut self) {
        self.calibration_result.clear();
    }

    pub fn has_calibration_result(&self) -> bool {
        self.calibration_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_calibration_result(&mut self, v: CalibrationResult) {
        self.calibration_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_calibration_result(&mut self) -> &mut CalibrationResult {
        if self.calibration_result.is_none() {
            self.calibration_result.set_default();
        }
        self.calibration_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_calibration_result(&mut self) -> CalibrationResult {
        self.calibration_result.take().unwrap_or_else(|| CalibrationResult::new())
    }

    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;


    pub fn get_progress_data(&self) -> &ProgressData {
        self.progress_data.as_ref().unwrap_or_else(|| ProgressData::default_instance())
    }
    pub fn clear_progress_data(&mut self) {
        self.progress_data.clear();
    }

    pub fn has_progress_data(&self) -> bool {
        self.progress_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress_data(&mut self, v: ProgressData) {
        self.progress_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress_data(&mut self) -> &mut ProgressData {
        if self.progress_data.is_none() {
            self.progress_data.set_default();
        }
        self.progress_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress_data(&mut self) -> ProgressData {
        self.progress_data.take().unwrap_or_else(|| ProgressData::new())
    }
}

impl ::protobuf::Message for CalibrateAccelerometerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.calibration_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.calibration_result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.calibration_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.calibration_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalibrateAccelerometerResponse {
        CalibrateAccelerometerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CalibrationResult>>(
                    "calibration_result",
                    |m: &CalibrateAccelerometerResponse| { &m.calibration_result },
                    |m: &mut CalibrateAccelerometerResponse| { &mut m.calibration_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProgressData>>(
                    "progress_data",
                    |m: &CalibrateAccelerometerResponse| { &m.progress_data },
                    |m: &mut CalibrateAccelerometerResponse| { &mut m.progress_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CalibrateAccelerometerResponse>(
                    "CalibrateAccelerometerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CalibrateAccelerometerResponse {
        static mut instance: ::protobuf::lazy::Lazy<CalibrateAccelerometerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CalibrateAccelerometerResponse,
        };
        unsafe {
            instance.get(CalibrateAccelerometerResponse::new)
        }
    }
}

impl ::protobuf::Clear for CalibrateAccelerometerResponse {
    fn clear(&mut self) {
        self.calibration_result.clear();
        self.progress_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CalibrateAccelerometerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrateAccelerometerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeCalibrateMagnetometerRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeCalibrateMagnetometerRequest {
    fn default() -> &'a SubscribeCalibrateMagnetometerRequest {
        <SubscribeCalibrateMagnetometerRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeCalibrateMagnetometerRequest {
    pub fn new() -> SubscribeCalibrateMagnetometerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeCalibrateMagnetometerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeCalibrateMagnetometerRequest {
        SubscribeCalibrateMagnetometerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeCalibrateMagnetometerRequest>(
                    "SubscribeCalibrateMagnetometerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeCalibrateMagnetometerRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeCalibrateMagnetometerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeCalibrateMagnetometerRequest,
        };
        unsafe {
            instance.get(SubscribeCalibrateMagnetometerRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeCalibrateMagnetometerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeCalibrateMagnetometerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeCalibrateMagnetometerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CalibrateMagnetometerResponse {
    // message fields
    pub calibration_result: ::protobuf::SingularPtrField<CalibrationResult>,
    pub progress_data: ::protobuf::SingularPtrField<ProgressData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalibrateMagnetometerResponse {
    fn default() -> &'a CalibrateMagnetometerResponse {
        <CalibrateMagnetometerResponse as ::protobuf::Message>::default_instance()
    }
}

impl CalibrateMagnetometerResponse {
    pub fn new() -> CalibrateMagnetometerResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;


    pub fn get_calibration_result(&self) -> &CalibrationResult {
        self.calibration_result.as_ref().unwrap_or_else(|| CalibrationResult::default_instance())
    }
    pub fn clear_calibration_result(&mut self) {
        self.calibration_result.clear();
    }

    pub fn has_calibration_result(&self) -> bool {
        self.calibration_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_calibration_result(&mut self, v: CalibrationResult) {
        self.calibration_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_calibration_result(&mut self) -> &mut CalibrationResult {
        if self.calibration_result.is_none() {
            self.calibration_result.set_default();
        }
        self.calibration_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_calibration_result(&mut self) -> CalibrationResult {
        self.calibration_result.take().unwrap_or_else(|| CalibrationResult::new())
    }

    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;


    pub fn get_progress_data(&self) -> &ProgressData {
        self.progress_data.as_ref().unwrap_or_else(|| ProgressData::default_instance())
    }
    pub fn clear_progress_data(&mut self) {
        self.progress_data.clear();
    }

    pub fn has_progress_data(&self) -> bool {
        self.progress_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress_data(&mut self, v: ProgressData) {
        self.progress_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress_data(&mut self) -> &mut ProgressData {
        if self.progress_data.is_none() {
            self.progress_data.set_default();
        }
        self.progress_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress_data(&mut self) -> ProgressData {
        self.progress_data.take().unwrap_or_else(|| ProgressData::new())
    }
}

impl ::protobuf::Message for CalibrateMagnetometerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.calibration_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.calibration_result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.calibration_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.calibration_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalibrateMagnetometerResponse {
        CalibrateMagnetometerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CalibrationResult>>(
                    "calibration_result",
                    |m: &CalibrateMagnetometerResponse| { &m.calibration_result },
                    |m: &mut CalibrateMagnetometerResponse| { &mut m.calibration_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProgressData>>(
                    "progress_data",
                    |m: &CalibrateMagnetometerResponse| { &m.progress_data },
                    |m: &mut CalibrateMagnetometerResponse| { &mut m.progress_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CalibrateMagnetometerResponse>(
                    "CalibrateMagnetometerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CalibrateMagnetometerResponse {
        static mut instance: ::protobuf::lazy::Lazy<CalibrateMagnetometerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CalibrateMagnetometerResponse,
        };
        unsafe {
            instance.get(CalibrateMagnetometerResponse::new)
        }
    }
}

impl ::protobuf::Clear for CalibrateMagnetometerResponse {
    fn clear(&mut self) {
        self.calibration_result.clear();
        self.progress_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CalibrateMagnetometerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrateMagnetometerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SubscribeCalibrateGimbalAccelerometerRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SubscribeCalibrateGimbalAccelerometerRequest {
    fn default() -> &'a SubscribeCalibrateGimbalAccelerometerRequest {
        <SubscribeCalibrateGimbalAccelerometerRequest as ::protobuf::Message>::default_instance()
    }
}

impl SubscribeCalibrateGimbalAccelerometerRequest {
    pub fn new() -> SubscribeCalibrateGimbalAccelerometerRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for SubscribeCalibrateGimbalAccelerometerRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SubscribeCalibrateGimbalAccelerometerRequest {
        SubscribeCalibrateGimbalAccelerometerRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<SubscribeCalibrateGimbalAccelerometerRequest>(
                    "SubscribeCalibrateGimbalAccelerometerRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SubscribeCalibrateGimbalAccelerometerRequest {
        static mut instance: ::protobuf::lazy::Lazy<SubscribeCalibrateGimbalAccelerometerRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SubscribeCalibrateGimbalAccelerometerRequest,
        };
        unsafe {
            instance.get(SubscribeCalibrateGimbalAccelerometerRequest::new)
        }
    }
}

impl ::protobuf::Clear for SubscribeCalibrateGimbalAccelerometerRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SubscribeCalibrateGimbalAccelerometerRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SubscribeCalibrateGimbalAccelerometerRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CalibrateGimbalAccelerometerResponse {
    // message fields
    pub calibration_result: ::protobuf::SingularPtrField<CalibrationResult>,
    pub progress_data: ::protobuf::SingularPtrField<ProgressData>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalibrateGimbalAccelerometerResponse {
    fn default() -> &'a CalibrateGimbalAccelerometerResponse {
        <CalibrateGimbalAccelerometerResponse as ::protobuf::Message>::default_instance()
    }
}

impl CalibrateGimbalAccelerometerResponse {
    pub fn new() -> CalibrateGimbalAccelerometerResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.calibration.CalibrationResult calibration_result = 1;


    pub fn get_calibration_result(&self) -> &CalibrationResult {
        self.calibration_result.as_ref().unwrap_or_else(|| CalibrationResult::default_instance())
    }
    pub fn clear_calibration_result(&mut self) {
        self.calibration_result.clear();
    }

    pub fn has_calibration_result(&self) -> bool {
        self.calibration_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_calibration_result(&mut self, v: CalibrationResult) {
        self.calibration_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_calibration_result(&mut self) -> &mut CalibrationResult {
        if self.calibration_result.is_none() {
            self.calibration_result.set_default();
        }
        self.calibration_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_calibration_result(&mut self) -> CalibrationResult {
        self.calibration_result.take().unwrap_or_else(|| CalibrationResult::new())
    }

    // .mavsdk.rpc.calibration.ProgressData progress_data = 2;


    pub fn get_progress_data(&self) -> &ProgressData {
        self.progress_data.as_ref().unwrap_or_else(|| ProgressData::default_instance())
    }
    pub fn clear_progress_data(&mut self) {
        self.progress_data.clear();
    }

    pub fn has_progress_data(&self) -> bool {
        self.progress_data.is_some()
    }

    // Param is passed by value, moved
    pub fn set_progress_data(&mut self, v: ProgressData) {
        self.progress_data = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_progress_data(&mut self) -> &mut ProgressData {
        if self.progress_data.is_none() {
            self.progress_data.set_default();
        }
        self.progress_data.as_mut().unwrap()
    }

    // Take field
    pub fn take_progress_data(&mut self) -> ProgressData {
        self.progress_data.take().unwrap_or_else(|| ProgressData::new())
    }
}

impl ::protobuf::Message for CalibrateGimbalAccelerometerResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.calibration_result {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.progress_data {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.calibration_result)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.progress_data)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.calibration_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.calibration_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.progress_data.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalibrateGimbalAccelerometerResponse {
        CalibrateGimbalAccelerometerResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<CalibrationResult>>(
                    "calibration_result",
                    |m: &CalibrateGimbalAccelerometerResponse| { &m.calibration_result },
                    |m: &mut CalibrateGimbalAccelerometerResponse| { &mut m.calibration_result },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<ProgressData>>(
                    "progress_data",
                    |m: &CalibrateGimbalAccelerometerResponse| { &m.progress_data },
                    |m: &mut CalibrateGimbalAccelerometerResponse| { &mut m.progress_data },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CalibrateGimbalAccelerometerResponse>(
                    "CalibrateGimbalAccelerometerResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CalibrateGimbalAccelerometerResponse {
        static mut instance: ::protobuf::lazy::Lazy<CalibrateGimbalAccelerometerResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CalibrateGimbalAccelerometerResponse,
        };
        unsafe {
            instance.get(CalibrateGimbalAccelerometerResponse::new)
        }
    }
}

impl ::protobuf::Clear for CalibrateGimbalAccelerometerResponse {
    fn clear(&mut self) {
        self.calibration_result.clear();
        self.progress_data.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CalibrateGimbalAccelerometerResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrateGimbalAccelerometerResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelRequest {
    fn default() -> &'a CancelRequest {
        <CancelRequest as ::protobuf::Message>::default_instance()
    }
}

impl CancelRequest {
    pub fn new() -> CancelRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CancelRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelRequest {
        CancelRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CancelRequest>(
                    "CancelRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelRequest {
        static mut instance: ::protobuf::lazy::Lazy<CancelRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelRequest,
        };
        unsafe {
            instance.get(CancelRequest::new)
        }
    }
}

impl ::protobuf::Clear for CancelRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CancelResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CancelResponse {
    fn default() -> &'a CancelResponse {
        <CancelResponse as ::protobuf::Message>::default_instance()
    }
}

impl CancelResponse {
    pub fn new() -> CancelResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for CancelResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CancelResponse {
        CancelResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<CancelResponse>(
                    "CancelResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CancelResponse {
        static mut instance: ::protobuf::lazy::Lazy<CancelResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CancelResponse,
        };
        unsafe {
            instance.get(CancelResponse::new)
        }
    }
}

impl ::protobuf::Clear for CancelResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CancelResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CancelResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct CalibrationResult {
    // message fields
    pub result: CalibrationResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a CalibrationResult {
    fn default() -> &'a CalibrationResult {
        <CalibrationResult as ::protobuf::Message>::default_instance()
    }
}

impl CalibrationResult {
    pub fn new() -> CalibrationResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.calibration.CalibrationResult.Result result = 1;


    pub fn get_result(&self) -> CalibrationResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = CalibrationResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: CalibrationResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for CalibrationResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != CalibrationResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != CalibrationResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> CalibrationResult {
        CalibrationResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<CalibrationResult_Result>>(
                    "result",
                    |m: &CalibrationResult| { &m.result },
                    |m: &mut CalibrationResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &CalibrationResult| { &m.result_str },
                    |m: &mut CalibrationResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<CalibrationResult>(
                    "CalibrationResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static CalibrationResult {
        static mut instance: ::protobuf::lazy::Lazy<CalibrationResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const CalibrationResult,
        };
        unsafe {
            instance.get(CalibrationResult::new)
        }
    }
}

impl ::protobuf::Clear for CalibrationResult {
    fn clear(&mut self) {
        self.result = CalibrationResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for CalibrationResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrationResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum CalibrationResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    IN_PROGRESS = 2,
    INSTRUCTION = 3,
    FAILED = 4,
    NO_SYSTEM = 5,
    CONNECTION_ERROR = 6,
    BUSY = 7,
    COMMAND_DENIED = 8,
    TIMEOUT = 9,
    CANCELLED = 10,
}

impl ::protobuf::ProtobufEnum for CalibrationResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<CalibrationResult_Result> {
        match value {
            0 => ::std::option::Option::Some(CalibrationResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(CalibrationResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(CalibrationResult_Result::IN_PROGRESS),
            3 => ::std::option::Option::Some(CalibrationResult_Result::INSTRUCTION),
            4 => ::std::option::Option::Some(CalibrationResult_Result::FAILED),
            5 => ::std::option::Option::Some(CalibrationResult_Result::NO_SYSTEM),
            6 => ::std::option::Option::Some(CalibrationResult_Result::CONNECTION_ERROR),
            7 => ::std::option::Option::Some(CalibrationResult_Result::BUSY),
            8 => ::std::option::Option::Some(CalibrationResult_Result::COMMAND_DENIED),
            9 => ::std::option::Option::Some(CalibrationResult_Result::TIMEOUT),
            10 => ::std::option::Option::Some(CalibrationResult_Result::CANCELLED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [CalibrationResult_Result] = &[
            CalibrationResult_Result::UNKNOWN,
            CalibrationResult_Result::SUCCESS,
            CalibrationResult_Result::IN_PROGRESS,
            CalibrationResult_Result::INSTRUCTION,
            CalibrationResult_Result::FAILED,
            CalibrationResult_Result::NO_SYSTEM,
            CalibrationResult_Result::CONNECTION_ERROR,
            CalibrationResult_Result::BUSY,
            CalibrationResult_Result::COMMAND_DENIED,
            CalibrationResult_Result::TIMEOUT,
            CalibrationResult_Result::CANCELLED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("CalibrationResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for CalibrationResult_Result {
}

impl ::std::default::Default for CalibrationResult_Result {
    fn default() -> Self {
        CalibrationResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for CalibrationResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ProgressData {
    // message fields
    pub has_progress: bool,
    pub progress: f32,
    pub has_status_text: bool,
    pub status_text: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ProgressData {
    fn default() -> &'a ProgressData {
        <ProgressData as ::protobuf::Message>::default_instance()
    }
}

impl ProgressData {
    pub fn new() -> ProgressData {
        ::std::default::Default::default()
    }

    // bool has_progress = 1;


    pub fn get_has_progress(&self) -> bool {
        self.has_progress
    }
    pub fn clear_has_progress(&mut self) {
        self.has_progress = false;
    }

    // Param is passed by value, moved
    pub fn set_has_progress(&mut self, v: bool) {
        self.has_progress = v;
    }

    // float progress = 2;


    pub fn get_progress(&self) -> f32 {
        self.progress
    }
    pub fn clear_progress(&mut self) {
        self.progress = 0.;
    }

    // Param is passed by value, moved
    pub fn set_progress(&mut self, v: f32) {
        self.progress = v;
    }

    // bool has_status_text = 3;


    pub fn get_has_status_text(&self) -> bool {
        self.has_status_text
    }
    pub fn clear_has_status_text(&mut self) {
        self.has_status_text = false;
    }

    // Param is passed by value, moved
    pub fn set_has_status_text(&mut self, v: bool) {
        self.has_status_text = v;
    }

    // string status_text = 4;


    pub fn get_status_text(&self) -> &str {
        &self.status_text
    }
    pub fn clear_status_text(&mut self) {
        self.status_text.clear();
    }

    // Param is passed by value, moved
    pub fn set_status_text(&mut self, v: ::std::string::String) {
        self.status_text = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_status_text(&mut self) -> &mut ::std::string::String {
        &mut self.status_text
    }

    // Take field
    pub fn take_status_text(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.status_text, ::std::string::String::new())
    }
}

impl ::protobuf::Message for ProgressData {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_progress = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.progress = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.has_status_text = tmp;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.status_text)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.has_progress != false {
            my_size += 2;
        }
        if self.progress != 0. {
            my_size += 5;
        }
        if self.has_status_text != false {
            my_size += 2;
        }
        if !self.status_text.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.status_text);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.has_progress != false {
            os.write_bool(1, self.has_progress)?;
        }
        if self.progress != 0. {
            os.write_float(2, self.progress)?;
        }
        if self.has_status_text != false {
            os.write_bool(3, self.has_status_text)?;
        }
        if !self.status_text.is_empty() {
            os.write_string(4, &self.status_text)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ProgressData {
        ProgressData::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_progress",
                    |m: &ProgressData| { &m.has_progress },
                    |m: &mut ProgressData| { &mut m.has_progress },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                    "progress",
                    |m: &ProgressData| { &m.progress },
                    |m: &mut ProgressData| { &mut m.progress },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "has_status_text",
                    |m: &ProgressData| { &m.has_status_text },
                    |m: &mut ProgressData| { &mut m.has_status_text },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "status_text",
                    |m: &ProgressData| { &m.status_text },
                    |m: &mut ProgressData| { &mut m.status_text },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ProgressData>(
                    "ProgressData",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ProgressData {
        static mut instance: ::protobuf::lazy::Lazy<ProgressData> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ProgressData,
        };
        unsafe {
            instance.get(ProgressData::new)
        }
    }
}

impl ::protobuf::Clear for ProgressData {
    fn clear(&mut self) {
        self.has_progress = false;
        self.progress = 0.;
        self.has_status_text = false;
        self.status_text.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ProgressData {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ProgressData {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x1dcalibration/calibration.proto\x12\x16mavsdk.rpc.calibration\"\x1f\
    \n\x1dSubscribeCalibrateGyroRequest\"\xbc\x01\n\x15CalibrateGyroResponse\
    \x12X\n\x12calibration_result\x18\x01\x20\x01(\x0b2).mavsdk.rpc.calibrat\
    ion.CalibrationResultR\x11calibrationResult\x12I\n\rprogress_data\x18\
    \x02\x20\x01(\x0b2$.mavsdk.rpc.calibration.ProgressDataR\x0cprogressData\
    \"(\n&SubscribeCalibrateAccelerometerRequest\"\xc5\x01\n\x1eCalibrateAcc\
    elerometerResponse\x12X\n\x12calibration_result\x18\x01\x20\x01(\x0b2).m\
    avsdk.rpc.calibration.CalibrationResultR\x11calibrationResult\x12I\n\rpr\
    ogress_data\x18\x02\x20\x01(\x0b2$.mavsdk.rpc.calibration.ProgressDataR\
    \x0cprogressData\"'\n%SubscribeCalibrateMagnetometerRequest\"\xc4\x01\n\
    \x1dCalibrateMagnetometerResponse\x12X\n\x12calibration_result\x18\x01\
    \x20\x01(\x0b2).mavsdk.rpc.calibration.CalibrationResultR\x11calibration\
    Result\x12I\n\rprogress_data\x18\x02\x20\x01(\x0b2$.mavsdk.rpc.calibrati\
    on.ProgressDataR\x0cprogressData\".\n,SubscribeCalibrateGimbalAccelerome\
    terRequest\"\xcb\x01\n$CalibrateGimbalAccelerometerResponse\x12X\n\x12ca\
    libration_result\x18\x01\x20\x01(\x0b2).mavsdk.rpc.calibration.Calibrati\
    onResultR\x11calibrationResult\x12I\n\rprogress_data\x18\x02\x20\x01(\
    \x0b2$.mavsdk.rpc.calibration.ProgressDataR\x0cprogressData\"\x0f\n\rCan\
    celRequest\"\x10\n\x0eCancelResponse\"\xae\x02\n\x11CalibrationResult\
    \x12H\n\x06result\x18\x01\x20\x01(\x0e20.mavsdk.rpc.calibration.Calibrat\
    ionResult.ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\x20\x01(\tR\tr\
    esultStr\"\xaf\x01\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07S\
    UCCESS\x10\x01\x12\x0f\n\x0bIN_PROGRESS\x10\x02\x12\x0f\n\x0bINSTRUCTION\
    \x10\x03\x12\n\n\x06FAILED\x10\x04\x12\r\n\tNO_SYSTEM\x10\x05\x12\x14\n\
    \x10CONNECTION_ERROR\x10\x06\x12\x08\n\x04BUSY\x10\x07\x12\x12\n\x0eCOMM\
    AND_DENIED\x10\x08\x12\x0b\n\x07TIMEOUT\x10\t\x12\r\n\tCANCELLED\x10\n\"\
    \x96\x01\n\x0cProgressData\x12!\n\x0chas_progress\x18\x01\x20\x01(\x08R\
    \x0bhasProgress\x12\x1a\n\x08progress\x18\x02\x20\x01(\x02R\x08progress\
    \x12&\n\x0fhas_status_text\x18\x03\x20\x01(\x08R\rhasStatusText\x12\x1f\
    \n\x0bstatus_text\x18\x04\x20\x01(\tR\nstatusText2\xe3\x05\n\x12Calibrat\
    ionService\x12\x82\x01\n\x16SubscribeCalibrateGyro\x125.mavsdk.rpc.calib\
    ration.SubscribeCalibrateGyroRequest\x1a-.mavsdk.rpc.calibration.Calibra\
    teGyroResponse\"\00\x01\x12\x9d\x01\n\x1fSubscribeCalibrateAccelerometer\
    \x12>.mavsdk.rpc.calibration.SubscribeCalibrateAccelerometerRequest\x1a6\
    .mavsdk.rpc.calibration.CalibrateAccelerometerResponse\"\00\x01\x12\x9a\
    \x01\n\x1eSubscribeCalibrateMagnetometer\x12=.mavsdk.rpc.calibration.Sub\
    scribeCalibrateMagnetometerRequest\x1a5.mavsdk.rpc.calibration.Calibrate\
    MagnetometerResponse\"\00\x01\x12\xaf\x01\n%SubscribeCalibrateGimbalAcce\
    lerometer\x12D.mavsdk.rpc.calibration.SubscribeCalibrateGimbalAccelerome\
    terRequest\x1a<.mavsdk.rpc.calibration.CalibrateGimbalAccelerometerRespo\
    nse\"\00\x01\x12Y\n\x06Cancel\x12%.mavsdk.rpc.calibration.CancelRequest\
    \x1a&.mavsdk.rpc.calibration.CancelResponse\"\0B)\n\x15io.mavsdk.calibra\
    tionB\x10CalibrationProtoJ\xae\x1a\n\x06\x12\x04\0\0P\x01\n\x08\n\x01\
    \x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\x08\x1e\n\x08\n\x01\x08\
    \x12\x03\x04\0.\n\x0b\n\x04\x08\xe7\x07\0\x12\x03\x04\0.\n\x0c\n\x05\x08\
    \xe7\x07\0\x02\x12\x03\x04\x07\x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\
    \x04\x07\x13\n\x0e\n\x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\
    \x0c\n\x05\x08\xe7\x07\0\x07\x12\x03\x04\x16-\n\x08\n\x01\x08\x12\x03\
    \x05\01\n\x0b\n\x04\x08\xe7\x07\x01\x12\x03\x05\01\n\x0c\n\x05\x08\xe7\
    \x07\x01\x02\x12\x03\x05\x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\
    \x05\x07\x1b\n\x0e\n\x07\x08\xe7\x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\
    \x0c\n\x05\x08\xe7\x07\x01\x07\x12\x03\x05\x1e0\nc\n\x02\x06\0\x12\x04\
    \x08\0\x13\x01\x1aW\x20Enable\x20to\x20calibrate\x20sensors\x20of\x20a\
    \x20drone\x20such\x20as\x20gyro,\x20accelerometer,\x20and\x20magnetomete\
    r.\n\n\n\n\x03\x06\0\x01\x12\x03\x08\x08\x1a\n(\n\x04\x06\0\x02\0\x12\
    \x03\n\x04f\x1a\x1b\x20Perform\x20gyro\x20calibration.\n\n\x0c\n\x05\x06\
    \0\x02\0\x01\x12\x03\n\x08\x1e\n\x0c\n\x05\x06\0\x02\0\x02\x12\x03\n\x1f\
    <\n\x0c\n\x05\x06\0\x02\0\x06\x12\x03\nFL\n\x0c\n\x05\x06\0\x02\0\x03\
    \x12\x03\nMb\n2\n\x04\x06\0\x02\x01\x12\x04\x0c\x04\x81\x01\x1a$\x20Perf\
    orm\x20accelerometer\x20calibration.\n\n\x0c\n\x05\x06\0\x02\x01\x01\x12\
    \x03\x0c\x08'\n\x0c\n\x05\x06\0\x02\x01\x02\x12\x03\x0c(N\n\x0c\n\x05\
    \x06\0\x02\x01\x06\x12\x03\x0cX^\n\x0c\n\x05\x06\0\x02\x01\x03\x12\x03\
    \x0c_}\n/\n\x04\x06\0\x02\x02\x12\x03\x0e\x04~\x1a\"\x20Perform\x20magne\
    tometer\x20caliration.\n\n\x0c\n\x05\x06\0\x02\x02\x01\x12\x03\x0e\x08&\
    \n\x0c\n\x05\x06\0\x02\x02\x02\x12\x03\x0e'L\n\x0c\n\x05\x06\0\x02\x02\
    \x06\x12\x03\x0eV\\\n\x0c\n\x05\x06\0\x02\x02\x03\x12\x03\x0e]z\n9\n\x04\
    \x06\0\x02\x03\x12\x04\x10\x04\x93\x01\x1a+\x20Perform\x20gimbal\x20acce\
    lerometer\x20calibration.\n\n\x0c\n\x05\x06\0\x02\x03\x01\x12\x03\x10\
    \x08-\n\x0c\n\x05\x06\0\x02\x03\x02\x12\x03\x10.Z\n\x0c\n\x05\x06\0\x02\
    \x03\x06\x12\x03\x10dj\n\r\n\x05\x06\0\x02\x03\x03\x12\x04\x10k\x8f\x01\
    \n2\n\x04\x06\0\x02\x04\x12\x03\x12\x048\x1a%\x20Cancel\x20ongoing\x20ca\
    libration\x20process.\n\n\x0c\n\x05\x06\0\x02\x04\x01\x12\x03\x12\x08\
    \x0e\n\x0c\n\x05\x06\0\x02\x04\x02\x12\x03\x12\x0f\x1c\n\x0c\n\x05\x06\0\
    \x02\x04\x03\x12\x03\x12&4\n\t\n\x02\x04\0\x12\x03\x15\0(\n\n\n\x03\x04\
    \0\x01\x12\x03\x15\x08%\n\n\n\x02\x04\x01\x12\x04\x16\0\x19\x01\n\n\n\
    \x03\x04\x01\x01\x12\x03\x16\x08\x1d\n\x0b\n\x04\x04\x01\x02\0\x12\x03\
    \x17\x04-\n\r\n\x05\x04\x01\x02\0\x04\x12\x04\x17\x04\x16\x1f\n\x0c\n\
    \x05\x04\x01\x02\0\x06\x12\x03\x17\x04\x15\n\x0c\n\x05\x04\x01\x02\0\x01\
    \x12\x03\x17\x16(\n\x0c\n\x05\x04\x01\x02\0\x03\x12\x03\x17+,\n\x1c\n\
    \x04\x04\x01\x02\x01\x12\x03\x18\x04#\"\x0f\x20Progress\x20data\n\n\r\n\
    \x05\x04\x01\x02\x01\x04\x12\x04\x18\x04\x17-\n\x0c\n\x05\x04\x01\x02\
    \x01\x06\x12\x03\x18\x04\x10\n\x0c\n\x05\x04\x01\x02\x01\x01\x12\x03\x18\
    \x11\x1e\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\x18!\"\n\t\n\x02\x04\
    \x02\x12\x03\x1b\01\n\n\n\x03\x04\x02\x01\x12\x03\x1b\x08.\n\n\n\x02\x04\
    \x03\x12\x04\x1c\0\x1f\x01\n\n\n\x03\x04\x03\x01\x12\x03\x1c\x08&\n\x0b\
    \n\x04\x04\x03\x02\0\x12\x03\x1d\x04-\n\r\n\x05\x04\x03\x02\0\x04\x12\
    \x04\x1d\x04\x1c(\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03\x1d\x04\x15\n\
    \x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x1d\x16(\n\x0c\n\x05\x04\x03\x02\0\
    \x03\x12\x03\x1d+,\n\x1c\n\x04\x04\x03\x02\x01\x12\x03\x1e\x04#\"\x0f\
    \x20Progress\x20data\n\n\r\n\x05\x04\x03\x02\x01\x04\x12\x04\x1e\x04\x1d\
    -\n\x0c\n\x05\x04\x03\x02\x01\x06\x12\x03\x1e\x04\x10\n\x0c\n\x05\x04\
    \x03\x02\x01\x01\x12\x03\x1e\x11\x1e\n\x0c\n\x05\x04\x03\x02\x01\x03\x12\
    \x03\x1e!\"\n\t\n\x02\x04\x04\x12\x03!\00\n\n\n\x03\x04\x04\x01\x12\x03!\
    \x08-\n\n\n\x02\x04\x05\x12\x04\"\0%\x01\n\n\n\x03\x04\x05\x01\x12\x03\"\
    \x08%\n\x0b\n\x04\x04\x05\x02\0\x12\x03#\x04-\n\r\n\x05\x04\x05\x02\0\
    \x04\x12\x04#\x04\"'\n\x0c\n\x05\x04\x05\x02\0\x06\x12\x03#\x04\x15\n\
    \x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\x16(\n\x0c\n\x05\x04\x05\x02\0\x03\
    \x12\x03#+,\n\x1c\n\x04\x04\x05\x02\x01\x12\x03$\x04#\"\x0f\x20Progress\
    \x20data\n\n\r\n\x05\x04\x05\x02\x01\x04\x12\x04$\x04#-\n\x0c\n\x05\x04\
    \x05\x02\x01\x06\x12\x03$\x04\x10\n\x0c\n\x05\x04\x05\x02\x01\x01\x12\
    \x03$\x11\x1e\n\x0c\n\x05\x04\x05\x02\x01\x03\x12\x03$!\"\n\t\n\x02\x04\
    \x06\x12\x03'\07\n\n\n\x03\x04\x06\x01\x12\x03'\x084\n\n\n\x02\x04\x07\
    \x12\x04(\0+\x01\n\n\n\x03\x04\x07\x01\x12\x03(\x08,\n\x0b\n\x04\x04\x07\
    \x02\0\x12\x03)\x04-\n\r\n\x05\x04\x07\x02\0\x04\x12\x04)\x04(.\n\x0c\n\
    \x05\x04\x07\x02\0\x06\x12\x03)\x04\x15\n\x0c\n\x05\x04\x07\x02\0\x01\
    \x12\x03)\x16(\n\x0c\n\x05\x04\x07\x02\0\x03\x12\x03)+,\n\x1c\n\x04\x04\
    \x07\x02\x01\x12\x03*\x04#\"\x0f\x20Progress\x20data\n\n\r\n\x05\x04\x07\
    \x02\x01\x04\x12\x04*\x04)-\n\x0c\n\x05\x04\x07\x02\x01\x06\x12\x03*\x04\
    \x10\n\x0c\n\x05\x04\x07\x02\x01\x01\x12\x03*\x11\x1e\n\x0c\n\x05\x04\
    \x07\x02\x01\x03\x12\x03*!\"\n\t\n\x02\x04\x08\x12\x03-\0\x18\n\n\n\x03\
    \x04\x08\x01\x12\x03-\x08\x15\n\t\n\x02\x04\t\x12\x03.\0\x19\n\n\n\x03\
    \x04\t\x01\x12\x03.\x08\x16\n\x1a\n\x02\x04\n\x12\x041\0C\x01\x1a\x0e\
    \x20Result\x20type.\n\n\n\n\x03\x04\n\x01\x12\x031\x08\x19\nB\n\x04\x04\
    \n\x04\0\x12\x043\x04?\x05\x1a4\x20Possible\x20results\x20returned\x20fo\
    r\x20calibration\x20commands\n\n\x0c\n\x05\x04\n\x04\0\x01\x12\x033\t\
    \x0f\n\x1e\n\x06\x04\n\x04\0\x02\0\x12\x034\x08\x14\"\x0f\x20Unknown\x20\
    error\n\n\x0e\n\x07\x04\n\x04\0\x02\0\x01\x12\x034\x08\x0f\n\x0e\n\x07\
    \x04\n\x04\0\x02\0\x02\x12\x034\x12\x13\n2\n\x06\x04\n\x04\0\x02\x01\x12\
    \x035\x08\x14\"#\x20The\x20calibration\x20process\x20succeeded\n\n\x0e\n\
    \x07\x04\n\x04\0\x02\x01\x01\x12\x035\x08\x0f\n\x0e\n\x07\x04\n\x04\0\
    \x02\x01\x02\x12\x035\x12\x13\nQ\n\x06\x04\n\x04\0\x02\x02\x12\x036\x08\
    \x18\"B\x20Intermediate\x20message\x20showing\x20progress\x20of\x20the\
    \x20calibration\x20process\n\n\x0e\n\x07\x04\n\x04\0\x02\x02\x01\x12\x03\
    6\x08\x13\n\x0e\n\x07\x04\n\x04\0\x02\x02\x02\x12\x036\x16\x17\nc\n\x06\
    \x04\n\x04\0\x02\x03\x12\x037\x08\x18\"T\x20Intermediate\x20message\x20g\
    iving\x20instructions\x20on\x20the\x20next\x20steps\x20required\x20by\
    \x20the\x20process\n\n\x0e\n\x07\x04\n\x04\0\x02\x03\x01\x12\x037\x08\
    \x13\n\x0e\n\x07\x04\n\x04\0\x02\x03\x02\x12\x037\x16\x17\n#\n\x06\x04\n\
    \x04\0\x02\x04\x12\x038\x08\x13\"\x14\x20Calibration\x20failed\n\n\x0e\n\
    \x07\x04\n\x04\0\x02\x04\x01\x12\x038\x08\x0e\n\x0e\n\x07\x04\n\x04\0\
    \x02\x04\x02\x12\x038\x11\x12\n'\n\x06\x04\n\x04\0\x02\x05\x12\x039\x08\
    \x16\"\x18\x20No\x20system\x20is\x20connected\n\n\x0e\n\x07\x04\n\x04\0\
    \x02\x05\x01\x12\x039\x08\x11\n\x0e\n\x07\x04\n\x04\0\x02\x05\x02\x12\
    \x039\x14\x15\n!\n\x06\x04\n\x04\0\x02\x06\x12\x03:\x08\x1d\"\x12\x20Con\
    nection\x20error\n\n\x0e\n\x07\x04\n\x04\0\x02\x06\x01\x12\x03:\x08\x18\
    \n\x0e\n\x07\x04\n\x04\0\x02\x06\x02\x12\x03:\x1b\x1c\n\x20\n\x06\x04\n\
    \x04\0\x02\x07\x12\x03;\x08\x11\"\x11\x20Vehicle\x20is\x20busy\n\n\x0e\n\
    \x07\x04\n\x04\0\x02\x07\x01\x12\x03;\x08\x0c\n\x0e\n\x07\x04\n\x04\0\
    \x02\x07\x02\x12\x03;\x0f\x10\n+\n\x06\x04\n\x04\0\x02\x08\x12\x03<\x08\
    \x1b\"\x1c\x20Command\x20refused\x20by\x20vehicle\n\n\x0e\n\x07\x04\n\
    \x04\0\x02\x08\x01\x12\x03<\x08\x16\n\x0e\n\x07\x04\n\x04\0\x02\x08\x02\
    \x12\x03<\x19\x1a\n\"\n\x06\x04\n\x04\0\x02\t\x12\x03=\x08\x14\"\x13\x20\
    Command\x20timed\x20out\n\n\x0e\n\x07\x04\n\x04\0\x02\t\x01\x12\x03=\x08\
    \x0f\n\x0e\n\x07\x04\n\x04\0\x02\t\x02\x12\x03=\x12\x13\n2\n\x06\x04\n\
    \x04\0\x02\n\x12\x03>\x08\x17\"#\x20Calibration\x20process\x20got\x20can\
    celled\n\n\x0e\n\x07\x04\n\x04\0\x02\n\x01\x12\x03>\x08\x11\n\x0e\n\x07\
    \x04\n\x04\0\x02\n\x02\x12\x03>\x14\x16\n\x20\n\x04\x04\n\x02\0\x12\x03A\
    \x04\x16\"\x13\x20Result\x20enum\x20value\n\n\r\n\x05\x04\n\x02\0\x04\
    \x12\x04A\x04?\x05\n\x0c\n\x05\x04\n\x02\0\x06\x12\x03A\x04\n\n\x0c\n\
    \x05\x04\n\x02\0\x01\x12\x03A\x0b\x11\n\x0c\n\x05\x04\n\x02\0\x03\x12\
    \x03A\x14\x15\nB\n\x04\x04\n\x02\x01\x12\x03B\x04\x1a\"5\x20Human-readab\
    le\x20English\x20string\x20describing\x20the\x20result\n\n\r\n\x05\x04\n\
    \x02\x01\x04\x12\x04B\x04A\x16\n\x0c\n\x05\x04\n\x02\x01\x05\x12\x03B\
    \x04\n\n\x0c\n\x05\x04\n\x02\x01\x01\x12\x03B\x0b\x15\n\x0c\n\x05\x04\n\
    \x02\x01\x03\x12\x03B\x18\x19\nm\n\x02\x04\x0b\x12\x04J\0P\x01\x1aa\n\
    \x20Progress\x20data\x20coming\x20from\x20calibration.\n\n\x20Can\x20be\
    \x20a\x20progress\x20percentage,\x20or\x20an\x20instruction\x20text.\n\n\
    \n\n\x03\x04\x0b\x01\x12\x03J\x08\x14\n\x0b\n\x04\x04\x0b\x02\0\x12\x03K\
    \x04\x1a\n\r\n\x05\x04\x0b\x02\0\x04\x12\x04K\x04J\x16\n\x0c\n\x05\x04\
    \x0b\x02\0\x05\x12\x03K\x04\x08\n\x0c\n\x05\x04\x0b\x02\0\x01\x12\x03K\t\
    \x15\n\x0c\n\x05\x04\x0b\x02\0\x03\x12\x03K\x18\x19\n$\n\x04\x04\x0b\x02\
    \x01\x12\x03L\x04\x17\"\x17\x20Progress\x20(percentage)\n\n\r\n\x05\x04\
    \x0b\x02\x01\x04\x12\x04L\x04K\x1a\n\x0c\n\x05\x04\x0b\x02\x01\x05\x12\
    \x03L\x04\t\n\x0c\n\x05\x04\x0b\x02\x01\x01\x12\x03L\n\x12\n\x0c\n\x05\
    \x04\x0b\x02\x01\x03\x12\x03L\x15\x16\n\x0b\n\x04\x04\x0b\x02\x02\x12\
    \x03N\x04\x1d\n\r\n\x05\x04\x0b\x02\x02\x04\x12\x04N\x04L\x17\n\x0c\n\
    \x05\x04\x0b\x02\x02\x05\x12\x03N\x04\x08\n\x0c\n\x05\x04\x0b\x02\x02\
    \x01\x12\x03N\t\x18\n\x0c\n\x05\x04\x0b\x02\x02\x03\x12\x03N\x1b\x1c\n\
    \x1f\n\x04\x04\x0b\x02\x03\x12\x03O\x04\x1b\"\x12\x20Instruction\x20text\
    \n\n\r\n\x05\x04\x0b\x02\x03\x04\x12\x04O\x04N\x1d\n\x0c\n\x05\x04\x0b\
    \x02\x03\x05\x12\x03O\x04\n\n\x0c\n\x05\x04\x0b\x02\x03\x01\x12\x03O\x0b\
    \x16\n\x0c\n\x05\x04\x0b\x02\x03\x03\x12\x03O\x19\x1ab\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
