// This file is generated by rust-protobuf 2.8.1. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `geofence/geofence.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_1;

#[derive(PartialEq,Clone,Default)]
pub struct Point {
    // message fields
    pub latitude_deg: f64,
    pub longitude_deg: f64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Point {
    fn default() -> &'a Point {
        <Point as ::protobuf::Message>::default_instance()
    }
}

impl Point {
    pub fn new() -> Point {
        ::std::default::Default::default()
    }

    // double latitude_deg = 1;


    pub fn get_latitude_deg(&self) -> f64 {
        self.latitude_deg
    }
    pub fn clear_latitude_deg(&mut self) {
        self.latitude_deg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_latitude_deg(&mut self, v: f64) {
        self.latitude_deg = v;
    }

    // double longitude_deg = 2;


    pub fn get_longitude_deg(&self) -> f64 {
        self.longitude_deg
    }
    pub fn clear_longitude_deg(&mut self) {
        self.longitude_deg = 0.;
    }

    // Param is passed by value, moved
    pub fn set_longitude_deg(&mut self, v: f64) {
        self.longitude_deg = v;
    }
}

impl ::protobuf::Message for Point {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.latitude_deg = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed64 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_double()?;
                    self.longitude_deg = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.latitude_deg != 0. {
            my_size += 9;
        }
        if self.longitude_deg != 0. {
            my_size += 9;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.latitude_deg != 0. {
            os.write_double(1, self.latitude_deg)?;
        }
        if self.longitude_deg != 0. {
            os.write_double(2, self.longitude_deg)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Point {
        Point::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "latitude_deg",
                    |m: &Point| { &m.latitude_deg },
                    |m: &mut Point| { &mut m.latitude_deg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeDouble>(
                    "longitude_deg",
                    |m: &Point| { &m.longitude_deg },
                    |m: &mut Point| { &mut m.longitude_deg },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Point>(
                    "Point",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Point {
        static mut instance: ::protobuf::lazy::Lazy<Point> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Point,
        };
        unsafe {
            instance.get(Point::new)
        }
    }
}

impl ::protobuf::Clear for Point {
    fn clear(&mut self) {
        self.latitude_deg = 0.;
        self.longitude_deg = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Point {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Point {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Polygon {
    // message fields
    pub points: ::protobuf::RepeatedField<Point>,
    pub field_type: Polygon_Type,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Polygon {
    fn default() -> &'a Polygon {
        <Polygon as ::protobuf::Message>::default_instance()
    }
}

impl Polygon {
    pub fn new() -> Polygon {
        ::std::default::Default::default()
    }

    // repeated .mavsdk.rpc.geofence.Point points = 1;


    pub fn get_points(&self) -> &[Point] {
        &self.points
    }
    pub fn clear_points(&mut self) {
        self.points.clear();
    }

    // Param is passed by value, moved
    pub fn set_points(&mut self, v: ::protobuf::RepeatedField<Point>) {
        self.points = v;
    }

    // Mutable pointer to the field.
    pub fn mut_points(&mut self) -> &mut ::protobuf::RepeatedField<Point> {
        &mut self.points
    }

    // Take field
    pub fn take_points(&mut self) -> ::protobuf::RepeatedField<Point> {
        ::std::mem::replace(&mut self.points, ::protobuf::RepeatedField::new())
    }

    // .mavsdk.rpc.geofence.Polygon.Type type = 2;


    pub fn get_field_type(&self) -> Polygon_Type {
        self.field_type
    }
    pub fn clear_field_type(&mut self) {
        self.field_type = Polygon_Type::INCLUSION;
    }

    // Param is passed by value, moved
    pub fn set_field_type(&mut self, v: Polygon_Type) {
        self.field_type = v;
    }
}

impl ::protobuf::Message for Polygon {
    fn is_initialized(&self) -> bool {
        for v in &self.points {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.points)?;
                },
                2 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.field_type, 2, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.points {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.field_type != Polygon_Type::INCLUSION {
            my_size += ::protobuf::rt::enum_size(2, self.field_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.points {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.field_type != Polygon_Type::INCLUSION {
            os.write_enum(2, self.field_type.value())?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Polygon {
        Polygon::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Point>>(
                    "points",
                    |m: &Polygon| { &m.points },
                    |m: &mut Polygon| { &mut m.points },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<Polygon_Type>>(
                    "type",
                    |m: &Polygon| { &m.field_type },
                    |m: &mut Polygon| { &mut m.field_type },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Polygon>(
                    "Polygon",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Polygon {
        static mut instance: ::protobuf::lazy::Lazy<Polygon> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Polygon,
        };
        unsafe {
            instance.get(Polygon::new)
        }
    }
}

impl ::protobuf::Clear for Polygon {
    fn clear(&mut self) {
        self.points.clear();
        self.field_type = Polygon_Type::INCLUSION;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Polygon {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Polygon {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum Polygon_Type {
    INCLUSION = 0,
    EXCLUSION = 1,
}

impl ::protobuf::ProtobufEnum for Polygon_Type {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Polygon_Type> {
        match value {
            0 => ::std::option::Option::Some(Polygon_Type::INCLUSION),
            1 => ::std::option::Option::Some(Polygon_Type::EXCLUSION),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [Polygon_Type] = &[
            Polygon_Type::INCLUSION,
            Polygon_Type::EXCLUSION,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("Polygon_Type", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for Polygon_Type {
}

impl ::std::default::Default for Polygon_Type {
    fn default() -> Self {
        Polygon_Type::INCLUSION
    }
}

impl ::protobuf::reflect::ProtobufValue for Polygon_Type {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UploadGeofenceRequest {
    // message fields
    pub polygons: ::protobuf::RepeatedField<Polygon>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadGeofenceRequest {
    fn default() -> &'a UploadGeofenceRequest {
        <UploadGeofenceRequest as ::protobuf::Message>::default_instance()
    }
}

impl UploadGeofenceRequest {
    pub fn new() -> UploadGeofenceRequest {
        ::std::default::Default::default()
    }

    // repeated .mavsdk.rpc.geofence.Polygon polygons = 1;


    pub fn get_polygons(&self) -> &[Polygon] {
        &self.polygons
    }
    pub fn clear_polygons(&mut self) {
        self.polygons.clear();
    }

    // Param is passed by value, moved
    pub fn set_polygons(&mut self, v: ::protobuf::RepeatedField<Polygon>) {
        self.polygons = v;
    }

    // Mutable pointer to the field.
    pub fn mut_polygons(&mut self) -> &mut ::protobuf::RepeatedField<Polygon> {
        &mut self.polygons
    }

    // Take field
    pub fn take_polygons(&mut self) -> ::protobuf::RepeatedField<Polygon> {
        ::std::mem::replace(&mut self.polygons, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for UploadGeofenceRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.polygons {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.polygons)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.polygons {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.polygons {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadGeofenceRequest {
        UploadGeofenceRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Polygon>>(
                    "polygons",
                    |m: &UploadGeofenceRequest| { &m.polygons },
                    |m: &mut UploadGeofenceRequest| { &mut m.polygons },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UploadGeofenceRequest>(
                    "UploadGeofenceRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UploadGeofenceRequest {
        static mut instance: ::protobuf::lazy::Lazy<UploadGeofenceRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UploadGeofenceRequest,
        };
        unsafe {
            instance.get(UploadGeofenceRequest::new)
        }
    }
}

impl ::protobuf::Clear for UploadGeofenceRequest {
    fn clear(&mut self) {
        self.polygons.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadGeofenceRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadGeofenceRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UploadGeofenceResponse {
    // message fields
    pub geofence_result: ::protobuf::SingularPtrField<GeofenceResult>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a UploadGeofenceResponse {
    fn default() -> &'a UploadGeofenceResponse {
        <UploadGeofenceResponse as ::protobuf::Message>::default_instance()
    }
}

impl UploadGeofenceResponse {
    pub fn new() -> UploadGeofenceResponse {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.geofence.GeofenceResult geofence_result = 1;


    pub fn get_geofence_result(&self) -> &GeofenceResult {
        self.geofence_result.as_ref().unwrap_or_else(|| GeofenceResult::default_instance())
    }
    pub fn clear_geofence_result(&mut self) {
        self.geofence_result.clear();
    }

    pub fn has_geofence_result(&self) -> bool {
        self.geofence_result.is_some()
    }

    // Param is passed by value, moved
    pub fn set_geofence_result(&mut self, v: GeofenceResult) {
        self.geofence_result = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_geofence_result(&mut self) -> &mut GeofenceResult {
        if self.geofence_result.is_none() {
            self.geofence_result.set_default();
        }
        self.geofence_result.as_mut().unwrap()
    }

    // Take field
    pub fn take_geofence_result(&mut self) -> GeofenceResult {
        self.geofence_result.take().unwrap_or_else(|| GeofenceResult::new())
    }
}

impl ::protobuf::Message for UploadGeofenceResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.geofence_result {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.geofence_result)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let Some(ref v) = self.geofence_result.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if let Some(ref v) = self.geofence_result.as_ref() {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UploadGeofenceResponse {
        UploadGeofenceResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<GeofenceResult>>(
                    "geofence_result",
                    |m: &UploadGeofenceResponse| { &m.geofence_result },
                    |m: &mut UploadGeofenceResponse| { &mut m.geofence_result },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UploadGeofenceResponse>(
                    "UploadGeofenceResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UploadGeofenceResponse {
        static mut instance: ::protobuf::lazy::Lazy<UploadGeofenceResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UploadGeofenceResponse,
        };
        unsafe {
            instance.get(UploadGeofenceResponse::new)
        }
    }
}

impl ::protobuf::Clear for UploadGeofenceResponse {
    fn clear(&mut self) {
        self.geofence_result.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UploadGeofenceResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UploadGeofenceResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GeofenceResult {
    // message fields
    pub result: GeofenceResult_Result,
    pub result_str: ::std::string::String,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GeofenceResult {
    fn default() -> &'a GeofenceResult {
        <GeofenceResult as ::protobuf::Message>::default_instance()
    }
}

impl GeofenceResult {
    pub fn new() -> GeofenceResult {
        ::std::default::Default::default()
    }

    // .mavsdk.rpc.geofence.GeofenceResult.Result result = 1;


    pub fn get_result(&self) -> GeofenceResult_Result {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = GeofenceResult_Result::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: GeofenceResult_Result) {
        self.result = v;
    }

    // string result_str = 2;


    pub fn get_result_str(&self) -> &str {
        &self.result_str
    }
    pub fn clear_result_str(&mut self) {
        self.result_str.clear();
    }

    // Param is passed by value, moved
    pub fn set_result_str(&mut self, v: ::std::string::String) {
        self.result_str = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_result_str(&mut self) -> &mut ::std::string::String {
        &mut self.result_str
    }

    // Take field
    pub fn take_result_str(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.result_str, ::std::string::String::new())
    }
}

impl ::protobuf::Message for GeofenceResult {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.result, 1, &mut self.unknown_fields)?
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.result_str)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.result != GeofenceResult_Result::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.result);
        }
        if !self.result_str.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.result_str);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.result != GeofenceResult_Result::UNKNOWN {
            os.write_enum(1, self.result.value())?;
        }
        if !self.result_str.is_empty() {
            os.write_string(2, &self.result_str)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GeofenceResult {
        GeofenceResult::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GeofenceResult_Result>>(
                    "result",
                    |m: &GeofenceResult| { &m.result },
                    |m: &mut GeofenceResult| { &mut m.result },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "result_str",
                    |m: &GeofenceResult| { &m.result_str },
                    |m: &mut GeofenceResult| { &mut m.result_str },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<GeofenceResult>(
                    "GeofenceResult",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static GeofenceResult {
        static mut instance: ::protobuf::lazy::Lazy<GeofenceResult> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const GeofenceResult,
        };
        unsafe {
            instance.get(GeofenceResult::new)
        }
    }
}

impl ::protobuf::Clear for GeofenceResult {
    fn clear(&mut self) {
        self.result = GeofenceResult_Result::UNKNOWN;
        self.result_str.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GeofenceResult {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GeofenceResult {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GeofenceResult_Result {
    UNKNOWN = 0,
    SUCCESS = 1,
    ERROR = 2,
    TOO_MANY_GEOFENCE_ITEMS = 3,
    BUSY = 4,
    TIMEOUT = 5,
    INVALID_ARGUMENT = 6,
}

impl ::protobuf::ProtobufEnum for GeofenceResult_Result {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GeofenceResult_Result> {
        match value {
            0 => ::std::option::Option::Some(GeofenceResult_Result::UNKNOWN),
            1 => ::std::option::Option::Some(GeofenceResult_Result::SUCCESS),
            2 => ::std::option::Option::Some(GeofenceResult_Result::ERROR),
            3 => ::std::option::Option::Some(GeofenceResult_Result::TOO_MANY_GEOFENCE_ITEMS),
            4 => ::std::option::Option::Some(GeofenceResult_Result::BUSY),
            5 => ::std::option::Option::Some(GeofenceResult_Result::TIMEOUT),
            6 => ::std::option::Option::Some(GeofenceResult_Result::INVALID_ARGUMENT),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GeofenceResult_Result] = &[
            GeofenceResult_Result::UNKNOWN,
            GeofenceResult_Result::SUCCESS,
            GeofenceResult_Result::ERROR,
            GeofenceResult_Result::TOO_MANY_GEOFENCE_ITEMS,
            GeofenceResult_Result::BUSY,
            GeofenceResult_Result::TIMEOUT,
            GeofenceResult_Result::INVALID_ARGUMENT,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::EnumDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new("GeofenceResult_Result", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for GeofenceResult_Result {
}

impl ::std::default::Default for GeofenceResult_Result {
    fn default() -> Self {
        GeofenceResult_Result::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for GeofenceResult_Result {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x17geofence/geofence.proto\x12\x13mavsdk.rpc.geofence\"O\n\x05Point\
    \x12!\n\x0clatitude_deg\x18\x01\x20\x01(\x01R\x0blatitudeDeg\x12#\n\rlon\
    gitude_deg\x18\x02\x20\x01(\x01R\x0clongitudeDeg\"\x9a\x01\n\x07Polygon\
    \x122\n\x06points\x18\x01\x20\x03(\x0b2\x1a.mavsdk.rpc.geofence.PointR\
    \x06points\x125\n\x04type\x18\x02\x20\x01(\x0e2!.mavsdk.rpc.geofence.Pol\
    ygon.TypeR\x04type\"$\n\x04Type\x12\r\n\tINCLUSION\x10\0\x12\r\n\tEXCLUS\
    ION\x10\x01\"Q\n\x15UploadGeofenceRequest\x128\n\x08polygons\x18\x01\x20\
    \x03(\x0b2\x1c.mavsdk.rpc.geofence.PolygonR\x08polygons\"f\n\x16UploadGe\
    ofenceResponse\x12L\n\x0fgeofence_result\x18\x01\x20\x01(\x0b2#.mavsdk.r\
    pc.geofence.GeofenceResultR\x0egeofenceResult\"\xec\x01\n\x0eGeofenceRes\
    ult\x12B\n\x06result\x18\x01\x20\x01(\x0e2*.mavsdk.rpc.geofence.Geofence\
    Result.ResultR\x06result\x12\x1d\n\nresult_str\x18\x02\x20\x01(\tR\tresu\
    ltStr\"w\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\0\x12\x0b\n\x07SUCCESS\x10\
    \x01\x12\t\n\x05ERROR\x10\x02\x12\x1b\n\x17TOO_MANY_GEOFENCE_ITEMS\x10\
    \x03\x12\x08\n\x04BUSY\x10\x04\x12\x0b\n\x07TIMEOUT\x10\x05\x12\x14\n\
    \x10INVALID_ARGUMENT\x10\x062~\n\x0fGeofenceService\x12k\n\x0eUploadGeof\
    ence\x12*.mavsdk.rpc.geofence.UploadGeofenceRequest\x1a+.mavsdk.rpc.geof\
    ence.UploadGeofenceResponse\"\0B#\n\x12io.mavsdk.geofenceB\rGeofenceProt\
    oJ\x8b\x11\n\x06\x12\x04\0\0:\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\
    \n\x01\x02\x12\x03\x02\x08\x1b\n\x08\n\x01\x08\x12\x03\x04\0+\n\x0b\n\
    \x04\x08\xe7\x07\0\x12\x03\x04\0+\n\x0c\n\x05\x08\xe7\x07\0\x02\x12\x03\
    \x04\x07\x13\n\r\n\x06\x08\xe7\x07\0\x02\0\x12\x03\x04\x07\x13\n\x0e\n\
    \x07\x08\xe7\x07\0\x02\0\x01\x12\x03\x04\x07\x13\n\x0c\n\x05\x08\xe7\x07\
    \0\x07\x12\x03\x04\x16*\n\x08\n\x01\x08\x12\x03\x05\0.\n\x0b\n\x04\x08\
    \xe7\x07\x01\x12\x03\x05\0.\n\x0c\n\x05\x08\xe7\x07\x01\x02\x12\x03\x05\
    \x07\x1b\n\r\n\x06\x08\xe7\x07\x01\x02\0\x12\x03\x05\x07\x1b\n\x0e\n\x07\
    \x08\xe7\x07\x01\x02\0\x01\x12\x03\x05\x07\x1b\n\x0c\n\x05\x08\xe7\x07\
    \x01\x07\x12\x03\x05\x1e-\n(\n\x02\x06\0\x12\x04\x08\0\x10\x01\x1a\x1c\
    \x20Enable\x20setting\x20a\x20geofence.\n\n\n\n\x03\x06\0\x01\x12\x03\
    \x08\x08\x17\n\x9b\x01\n\x04\x06\0\x02\0\x12\x03\x0f\x04P\x1a\x8d\x01\n\
    \x20Upload\x20a\x20geofence.\n\n\x20Polygons\x20are\x20uploaded\x20to\
    \x20a\x20drone.\x20Once\x20uploaded,\x20the\x20geofence\x20will\x20remai\
    n\n\x20on\x20the\x20drone\x20even\x20if\x20a\x20connection\x20is\x20lost\
    .\n\n\x0c\n\x05\x06\0\x02\0\x01\x12\x03\x0f\x08\x16\n\x0c\n\x05\x06\0\
    \x02\0\x02\x12\x03\x0f\x17,\n\x0c\n\x05\x06\0\x02\0\x03\x12\x03\x0f6L\n\
    \x19\n\x02\x04\0\x12\x04\x13\0\x16\x01\x1a\r\x20Point\x20type.\n\n\n\n\
    \x03\x04\0\x01\x12\x03\x13\x08\r\n6\n\x04\x04\0\x02\0\x12\x03\x14\x04\
    \x1c\")\x20Latitude\x20in\x20degrees\x20(range:\x20-90\x20to\x20+90)\n\n\
    \r\n\x05\x04\0\x02\0\x04\x12\x04\x14\x04\x13\x0f\n\x0c\n\x05\x04\0\x02\0\
    \x05\x12\x03\x14\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x14\x0b\x17\n\
    \x0c\n\x05\x04\0\x02\0\x03\x12\x03\x14\x1a\x1b\n9\n\x04\x04\0\x02\x01\
    \x12\x03\x15\x04\x1d\",\x20Longitude\x20in\x20degrees\x20(range:\x20-180\
    \x20to\x20+180)\n\n\r\n\x05\x04\0\x02\x01\x04\x12\x04\x15\x04\x14\x1c\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x15\x04\n\n\x0c\n\x05\x04\0\x02\x01\
    \x01\x12\x03\x15\x0b\x18\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x15\x1b\
    \x1c\n\x1b\n\x02\x04\x01\x12\x04\x19\0!\x01\x1a\x0f\x20Polygon\x20type.\
    \n\n\n\n\x03\x04\x01\x01\x12\x03\x19\x08\x0f\n\x0c\n\x04\x04\x01\x04\0\
    \x12\x04\x1a\x04\x1d\x05\n\x0c\n\x05\x04\x01\x04\0\x01\x12\x03\x1a\t\r\n\
    5\n\x06\x04\x01\x04\0\x02\0\x12\x03\x1b\x08\x16\"&\x20Type\x20representi\
    ng\x20an\x20inclusion\x20fence\n\n\x0e\n\x07\x04\x01\x04\0\x02\0\x01\x12\
    \x03\x1b\x08\x11\n\x0e\n\x07\x04\x01\x04\0\x02\0\x02\x12\x03\x1b\x14\x15\
    \n5\n\x06\x04\x01\x04\0\x02\x01\x12\x03\x1c\x08\x16\"&\x20Type\x20repres\
    enting\x20an\x20exclusion\x20fence\n\n\x0e\n\x07\x04\x01\x04\0\x02\x01\
    \x01\x12\x03\x1c\x08\x11\n\x0e\n\x07\x04\x01\x04\0\x02\x01\x02\x12\x03\
    \x1c\x14\x15\n*\n\x04\x04\x01\x02\0\x12\x03\x1f\x04\x1e\"\x1d\x20Points\
    \x20defining\x20the\x20polygon\n\n\x0c\n\x05\x04\x01\x02\0\x04\x12\x03\
    \x1f\x04\x0c\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\x1f\r\x12\n\x0c\n\x05\
    \x04\x01\x02\0\x01\x12\x03\x1f\x13\x19\n\x0c\n\x05\x04\x01\x02\0\x03\x12\
    \x03\x1f\x1c\x1d\n\x19\n\x04\x04\x01\x02\x01\x12\x03\x20\x04\x12\"\x0c\
    \x20Fence\x20type\n\n\r\n\x05\x04\x01\x02\x01\x04\x12\x04\x20\x04\x1f\
    \x1e\n\x0c\n\x05\x04\x01\x02\x01\x06\x12\x03\x20\x04\x08\n\x0c\n\x05\x04\
    \x01\x02\x01\x01\x12\x03\x20\t\r\n\x0c\n\x05\x04\x01\x02\x01\x03\x12\x03\
    \x20\x10\x11\n\n\n\x02\x04\x02\x12\x04#\0%\x01\n\n\n\x03\x04\x02\x01\x12\
    \x03#\x08\x1d\n6\n\x04\x04\x02\x02\0\x12\x03$\x04\"\")\x20Polygon(s)\x20\
    representing\x20the\x20geofence(s)\n\n\x0c\n\x05\x04\x02\x02\0\x04\x12\
    \x03$\x04\x0c\n\x0c\n\x05\x04\x02\x02\0\x06\x12\x03$\r\x14\n\x0c\n\x05\
    \x04\x02\x02\0\x01\x12\x03$\x15\x1d\n\x0c\n\x05\x04\x02\x02\0\x03\x12\
    \x03$\x20!\n\n\n\x02\x04\x03\x12\x04'\0)\x01\n\n\n\x03\x04\x03\x01\x12\
    \x03'\x08\x1e\n\x0b\n\x04\x04\x03\x02\0\x12\x03(\x04'\n\r\n\x05\x04\x03\
    \x02\0\x04\x12\x04(\x04'\x20\n\x0c\n\x05\x04\x03\x02\0\x06\x12\x03(\x04\
    \x12\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03(\x13\"\n\x0c\n\x05\x04\x03\
    \x02\0\x03\x12\x03(%&\n\x1a\n\x02\x04\x04\x12\x04,\0:\x01\x1a\x0e\x20Res\
    ult\x20type.\n\n\n\n\x03\x04\x04\x01\x12\x03,\x08\x16\n@\n\x04\x04\x04\
    \x04\0\x12\x04.\x046\x05\x1a2\x20Possible\x20results\x20returned\x20for\
    \x20geofence\x20requests.\n\n\x0c\n\x05\x04\x04\x04\0\x01\x12\x03.\t\x0f\
    \n\x1e\n\x06\x04\x04\x04\0\x02\0\x12\x03/\x08\x14\"\x0f\x20Unknown\x20er\
    ror\n\n\x0e\n\x07\x04\x04\x04\0\x02\0\x01\x12\x03/\x08\x0f\n\x0e\n\x07\
    \x04\x04\x04\0\x02\0\x02\x12\x03/\x12\x13\n\"\n\x06\x04\x04\x04\0\x02\
    \x01\x12\x030\x08\x14\"\x13\x20Request\x20succeeded\n\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x01\x01\x12\x030\x08\x0f\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x01\x02\x12\x030\x12\x13\n\x16\n\x06\x04\x04\x04\0\x02\x02\x12\x031\x08\
    \x12\"\x07\x20Error\n\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x01\x12\x031\x08\
    \r\n\x0e\n\x07\x04\x04\x04\0\x02\x02\x02\x12\x031\x10\x11\n9\n\x06\x04\
    \x04\x04\0\x02\x03\x12\x032\x08$\"*\x20Too\x20many\x20Polygon\x20objects\
    \x20in\x20the\x20geofence\n\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x01\x12\
    \x032\x08\x1f\n\x0e\n\x07\x04\x04\x04\0\x02\x03\x02\x12\x032\"#\n\x20\n\
    \x06\x04\x04\x04\0\x02\x04\x12\x033\x08\x11\"\x11\x20Vehicle\x20is\x20bu\
    sy\n\n\x0e\n\x07\x04\x04\x04\0\x02\x04\x01\x12\x033\x08\x0c\n\x0e\n\x07\
    \x04\x04\x04\0\x02\x04\x02\x12\x033\x0f\x10\n\"\n\x06\x04\x04\x04\0\x02\
    \x05\x12\x034\x08\x14\"\x13\x20Request\x20timed\x20out\n\n\x0e\n\x07\x04\
    \x04\x04\0\x02\x05\x01\x12\x034\x08\x0f\n\x0e\n\x07\x04\x04\x04\0\x02\
    \x05\x02\x12\x034\x12\x13\n!\n\x06\x04\x04\x04\0\x02\x06\x12\x035\x08\
    \x1d\"\x12\x20Invalid\x20argument\n\n\x0e\n\x07\x04\x04\x04\0\x02\x06\
    \x01\x12\x035\x08\x18\n\x0e\n\x07\x04\x04\x04\0\x02\x06\x02\x12\x035\x1b\
    \x1c\n\x20\n\x04\x04\x04\x02\0\x12\x038\x04\x16\"\x13\x20Result\x20enum\
    \x20value\n\n\r\n\x05\x04\x04\x02\0\x04\x12\x048\x046\x05\n\x0c\n\x05\
    \x04\x04\x02\0\x06\x12\x038\x04\n\n\x0c\n\x05\x04\x04\x02\0\x01\x12\x038\
    \x0b\x11\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x038\x14\x15\nB\n\x04\x04\x04\
    \x02\x01\x12\x039\x04\x1a\"5\x20Human-readable\x20English\x20string\x20d\
    escribing\x20the\x20result\n\n\r\n\x05\x04\x04\x02\x01\x04\x12\x049\x048\
    \x16\n\x0c\n\x05\x04\x04\x02\x01\x05\x12\x039\x04\n\n\x0c\n\x05\x04\x04\
    \x02\x01\x01\x12\x039\x0b\x15\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x039\
    \x18\x19b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
